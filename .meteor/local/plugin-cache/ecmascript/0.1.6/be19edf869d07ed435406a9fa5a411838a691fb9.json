{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"var uberClientId = 'I8iDf46DcbPEC32PbibfPoBYBoHewzt8',\n    uberServerToken = 'YOUR_SERVER_TOKEN';\n\n// Create variables to store latitude and longitude\nvar userLatitude, userLongitude, barLatitude, barLongitude;\n\n// Create variable to store timer\nvar timer;\n\nvar planId;\nvar voted = undefined;\n\nTemplate.finalTargetListItem.helpers({\n  getPlanId: function () {\n    // reactive getParams method which will invalidate the comp if any part of the params change\n    // including the hash.\n    var controller = Iron.controller();\n    var params = controller.getParams();\n    planId = params._id;\n  }\n});\n\nTemplate.finalTargetListItem.events({\n  'click .ride_btn': function (event, template) {\n    // Redirect to Uber API via deep-linking to the mobile web-app\n    var uberURL = 'https://m.uber.com/sign-up?';\n\n    // Add parameters\n    uberURL += 'client_id=' + uberClientId;\n    if (typeof userLatitude != typeof undefined) uberURL += '&' + 'pickup_latitude=' + userLatitude;\n    if (typeof userLongitude != typeof undefined) uberURL += '&' + 'pickup_longitude=' + userLongitude;\n    uberURL += '&' + 'dropoff_latitude=' + barLatitude;\n    uberURL += '&' + 'dropoff_longitude=' + barLongitude;\n    uberURL += '&' + 'dropoff_nickname=' + 'Bar';\n\n    // Redirect to Uber\n    window.location.href = uberURL;\n  }\n});\n\n//Voting for an item\nTemplate.finalTargetListItem.events({\n  'click .collection-item': function (event, template) {\n    //initialize this to self\n    var self = this;\n\n    if (voted === undefined) {\n      voteForItem();\n    } else {\n      overrideVote();\n    }\n\n    function voteForItem() {\n      //Get all of the final selected launches that have been saved to the session\n      var allSelectedLaunches = Session.get('selectedLaunches');\n\n      //Find the index of the currently selected launch item in the DB Array\n      var index = allSelectedLaunches.findIndex(function (element) {\n        return element.placeId == self.placeId;\n      });\n\n      //Currently selected bar\n      var currentBar = allSelectedLaunches[index];\n\n      //Get the total votes\n      var totalVotes = currentBar.votes;\n      totalVotes++;\n      currentBar.votes = totalVotes;\n      allSelectedLaunches[index] = currentBar;\n\n      //Move the element with the most votes to the top of the list\n      var mostVotes = currentBar;\n      for (var i = 0; i < allSelectedLaunches.length; i++) {\n        if (allSelectedLaunches[i].votes > currentBar.votes) {\n          mostVotes = allSelectedLaunches[i];\n          var indexMostVotes = allSelectedLaunches.findIndex(function (element) {\n            return element.placeId == mostVotes.placeId;\n          });\n          allSelectedLaunches.splice(indexMostVotes, 1);\n          allSelectedLaunches.unshift(mostVotes);\n        }\n      };\n\n      //Update the whole final selected launches in the DB\n      Launches.update(planId, { $set: { finalLaunches: allSelectedLaunches } }, function (error) {\n        if (error) {\n          // display the error to the user\n          alert(error.reason);\n        } else {\n          console.log('Vote Added to ' + currentBar.name);\n        }\n      });\n\n      //Materialize toast when item is voted on\n      // Materialize.toast('Voted for ' + currentBar.name, 4000);\n      voted = currentBar;\n    }\n\n    function overrideVote() {\n\n      var allSelectedLaunches = Session.get('selectedLaunches');\n      console.log(allSelectedLaunches, 'allSelectedLaunches');\n\n      //Find the index of the currently selected launch item in the DB Array\n      var indexNew = allSelectedLaunches.findIndex(function (element) {\n        return element.placeId == self.placeId;\n      });\n\n      var indexOld = allSelectedLaunches.findIndex(function (element) {\n        return element.placeId == voted.placeId;\n      });\n\n      //Currently selected bar\n      var currentBar = allSelectedLaunches[indexNew];\n\n      var oldBar = allSelectedLaunches[indexOld];\n\n      //Get the total votes for the current bar\n      var totalVotesCurrent = currentBar.votes;\n      totalVotesCurrent++;\n      currentBar.votes = totalVotesCurrent;\n      allSelectedLaunches[indexNew] = currentBar;\n\n      //remove the vote for the previously selected vote\n      var totalVotesOld = oldBar.votes;\n      totalVotesOld--;\n      oldBar.votes = totalVotesOld;\n      allSelectedLaunches[indexOld] = oldBar;\n\n      //Move the element with the most votes to the top of the list\n      var mostVotes = currentBar;\n      for (var i = 0; i < allSelectedLaunches.length; i++) {\n        if (allSelectedLaunches[i].votes > currentBar.votes) {\n          mostVotes = allSelectedLaunches[i];\n          var indexMostVotes = allSelectedLaunches.findIndex(function (element) {\n            return element.placeId == mostVotes.placeId;\n          });\n          allSelectedLaunches.splice(indexMostVotes, 1);\n          allSelectedLaunches.unshift(mostVotes);\n        }\n      };\n\n      //Update the whole final selected launches in the DB\n      Launches.update(planId, { $set: { finalLaunches: allSelectedLaunches } }, function (error) {\n        if (error) {\n          // display the error to the user\n          alert(error.reason);\n        } else {\n          console.log('Vote Added to ' + currentBar.name);\n        }\n      });\n\n      //Materialize toast when item is voted on\n      // Materialize.toast('Voted for ' + currentBar.name, 4000);\n      voted = currentBar;\n    }\n  }\n});","ast":null,"map":{"version":3,"sources":["/client/views/04-final-launch-plan/final-launch-list-item.js"],"names":[],"mappings":"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","file":"/client/views/04-final-launch-plan/final-launch-list-item.js.map","sourcesContent":["var uberClientId = 'I8iDf46DcbPEC32PbibfPoBYBoHewzt8',\n     uberServerToken = 'YOUR_SERVER_TOKEN';\n\n// Create variables to store latitude and longitude\nvar userLatitude,\n    userLongitude,\n    barLatitude,\n    barLongitude;\n\n// Create variable to store timer\nvar timer;\n\nvar planId;\nvar voted = undefined;\n\nTemplate.finalTargetListItem.helpers({\n  getPlanId : function() {\n    // reactive getParams method which will invalidate the comp if any part of the params change\n    // including the hash.\n    var controller = Iron.controller();\n    var params = controller.getParams();\n    planId = params._id;\n  }\n});\n\nTemplate.finalTargetListItem.events({\n  'click .ride_btn' : function (event, template) {\n    // Redirect to Uber API via deep-linking to the mobile web-app\n    var uberURL = 'https://m.uber.com/sign-up?';\n\n    // Add parameters\n    uberURL += 'client_id=' + uberClientId;\n    if (typeof userLatitude != typeof undefined) uberURL += '&' + 'pickup_latitude=' + userLatitude;\n    if (typeof userLongitude != typeof undefined) uberURL += '&' + 'pickup_longitude=' + userLongitude;\n    uberURL += '&' + 'dropoff_latitude=' + barLatitude;\n    uberURL += '&' + 'dropoff_longitude=' + barLongitude;\n    uberURL += '&' + 'dropoff_nickname=' + 'Bar';\n\n    // Redirect to Uber\n    window.location.href = uberURL;\n  }\n});\n\n//Voting for an item\nTemplate.finalTargetListItem.events({\n  'click .collection-item' : function (event, template) {\n    //initialize this to self\n    var self = this;\n\n    if (voted === undefined) {\n      voteForItem();\n    } else {\n      overrideVote();\n    }\n\n    function voteForItem() {\n      //Get all of the final selected launches that have been saved to the session\n      var allSelectedLaunches = Session.get('selectedLaunches');\n\n      //Find the index of the currently selected launch item in the DB Array\n      var index = allSelectedLaunches.findIndex( function(element) { return element.placeId == self.placeId } );\n\n      //Currently selected bar\n      var currentBar = allSelectedLaunches[index];\n\n      //Get the total votes\n      var totalVotes = currentBar.votes;\n      totalVotes++;\n      currentBar.votes = totalVotes;\n      allSelectedLaunches[index] = currentBar;\n\n      //Move the element with the most votes to the top of the list\n      var mostVotes = currentBar;\n      for (var i = 0; i < allSelectedLaunches.length; i++) {\n        if (allSelectedLaunches[i].votes > currentBar.votes) {\n          mostVotes = allSelectedLaunches[i];\n          var indexMostVotes = allSelectedLaunches.findIndex( function(element) { return element.placeId == mostVotes.placeId } );\n          allSelectedLaunches.splice(indexMostVotes, 1);\n          allSelectedLaunches.unshift(mostVotes);\n        }\n      };\n\n      //Update the whole final selected launches in the DB\n      Launches.update(planId, { $set : { finalLaunches : allSelectedLaunches } }, function(error) {\n        if (error) {\n          // display the error to the user\n          alert(error.reason);\n        } else {\n          console.log('Vote Added to ' + currentBar.name);\n        }\n      });\n\n      //Materialize toast when item is voted on\n      // Materialize.toast('Voted for ' + currentBar.name, 4000);\n      voted = currentBar;\n\n    }\n\n    function overrideVote() {\n\n      var allSelectedLaunches = Session.get('selectedLaunches');\n      console.log(allSelectedLaunches, 'allSelectedLaunches');\n\n      //Find the index of the currently selected launch item in the DB Array\n      var indexNew = allSelectedLaunches.findIndex( function(element) { return element.placeId == self.placeId } );\n\n      var indexOld = allSelectedLaunches.findIndex( function(element) { return element.placeId == voted.placeId } );\n\n      //Currently selected bar\n      var currentBar = allSelectedLaunches[indexNew];\n\n      var oldBar = allSelectedLaunches[indexOld];\n\n      //Get the total votes for the current bar\n      var totalVotesCurrent = currentBar.votes;\n      totalVotesCurrent++;\n      currentBar.votes = totalVotesCurrent;\n      allSelectedLaunches[indexNew] = currentBar;\n\n      //remove the vote for the previously selected vote\n      var totalVotesOld = oldBar.votes;\n      totalVotesOld--;\n      oldBar.votes = totalVotesOld;\n      allSelectedLaunches[indexOld] = oldBar;\n\n      //Move the element with the most votes to the top of the list\n      var mostVotes = currentBar;\n      for (var i = 0; i < allSelectedLaunches.length; i++) {\n        if (allSelectedLaunches[i].votes > currentBar.votes) {\n          mostVotes = allSelectedLaunches[i];\n          var indexMostVotes = allSelectedLaunches.findIndex( function(element) { return element.placeId == mostVotes.placeId } );\n          allSelectedLaunches.splice(indexMostVotes, 1);\n          allSelectedLaunches.unshift(mostVotes);\n        }\n      };\n\n      //Update the whole final selected launches in the DB\n      Launches.update(planId, { $set : { finalLaunches : allSelectedLaunches } }, function(error) {\n        if (error) {\n          // display the error to the user\n          alert(error.reason);\n        } else {\n          console.log('Vote Added to ' + currentBar.name);\n        }\n      });\n\n      //Materialize toast when item is voted on\n      // Materialize.toast('Voted for ' + currentBar.name, 4000);\n      voted = currentBar;\n    }\n\n  }\n});"]},"hash":"be19edf869d07ed435406a9fa5a411838a691fb9"}
