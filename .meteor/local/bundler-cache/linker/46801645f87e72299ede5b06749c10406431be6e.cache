[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n/* Package-scope variables */\nvar ZeroClipboard;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/propercursive_zeroclipboard/packages/propercursive_zeroc //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {                                                       // 1\n                                                                     // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/propercursive:zeroclipboard/zeroclipboard/dist/ZeroClipboard.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * ZeroClipboard                                                                                                       // 2\n * The ZeroClipboard library provides an easy way to copy text to the clipboard using an invisible Adobe Flash movie and a JavaScript interface.\n * Copyright (c) 2009-2015 Jon Rohan, James M. Greene                                                                  // 4\n * Licensed MIT                                                                                                        // 5\n * http://zeroclipboard.org/                                                                                           // 6\n * v2.3.0-beta.1                                                                                                       // 7\n */                                                                                                                    // 8\n(function(window, undefined) {                                                                                         // 9\n  \"use strict\";                                                                                                        // 10\n  /**                                                                                                                  // 11\n * Store references to critically important global functions that may be                                               // 12\n * overridden on certain web pages.                                                                                    // 13\n */                                                                                                                    // 14\n  var _window = window, _document = _window.document, _navigator = _window.navigator, _setTimeout = _window.setTimeout, _clearTimeout = _window.clearTimeout, _setInterval = _window.setInterval, _clearInterval = _window.clearInterval, _getComputedStyle = _window.getComputedStyle, _encodeURIComponent = _window.encodeURIComponent, _ActiveXObject = _window.ActiveXObject, _Error = _window.Error, _parseInt = _window.Number.parseInt || _window.parseInt, _parseFloat = _window.Number.parseFloat || _window.parseFloat, _isNaN = _window.Number.isNaN || _window.isNaN, _now = _window.Date.now, _keys = _window.Object.keys, _defineProperty = _window.Object.defineProperty, _hasOwn = _window.Object.prototype.hasOwnProperty, _slice = _window.Array.prototype.slice, _unwrap = function() {\n    var unwrapper = function(el) {                                                                                     // 16\n      return el;                                                                                                       // 17\n    };                                                                                                                 // 18\n    if (typeof _window.wrap === \"function\" && typeof _window.unwrap === \"function\") {                                  // 19\n      try {                                                                                                            // 20\n        var div = _document.createElement(\"div\");                                                                      // 21\n        var unwrappedDiv = _window.unwrap(div);                                                                        // 22\n        if (div.nodeType === 1 && unwrappedDiv && unwrappedDiv.nodeType === 1) {                                       // 23\n          unwrapper = _window.unwrap;                                                                                  // 24\n        }                                                                                                              // 25\n      } catch (e) {}                                                                                                   // 26\n    }                                                                                                                  // 27\n    return unwrapper;                                                                                                  // 28\n  }();                                                                                                                 // 29\n  /**                                                                                                                  // 30\n * Convert an `arguments` object into an Array.                                                                        // 31\n *                                                                                                                     // 32\n * @returns The arguments as an Array                                                                                  // 33\n * @private                                                                                                            // 34\n */                                                                                                                    // 35\n  var _args = function(argumentsObj) {                                                                                 // 36\n    return _slice.call(argumentsObj, 0);                                                                               // 37\n  };                                                                                                                   // 38\n  /**                                                                                                                  // 39\n * Shallow-copy the owned, enumerable properties of one object over to another, similar to jQuery's `$.extend`.        // 40\n *                                                                                                                     // 41\n * @returns The target object, augmented                                                                               // 42\n * @private                                                                                                            // 43\n */                                                                                                                    // 44\n  var _extend = function() {                                                                                           // 45\n    var i, len, arg, prop, src, copy, args = _args(arguments), target = args[0] || {};                                 // 46\n    for (i = 1, len = args.length; i < len; i++) {                                                                     // 47\n      if ((arg = args[i]) != null) {                                                                                   // 48\n        for (prop in arg) {                                                                                            // 49\n          if (_hasOwn.call(arg, prop)) {                                                                               // 50\n            src = target[prop];                                                                                        // 51\n            copy = arg[prop];                                                                                          // 52\n            if (target !== copy && copy !== undefined) {                                                               // 53\n              target[prop] = copy;                                                                                     // 54\n            }                                                                                                          // 55\n          }                                                                                                            // 56\n        }                                                                                                              // 57\n      }                                                                                                                // 58\n    }                                                                                                                  // 59\n    return target;                                                                                                     // 60\n  };                                                                                                                   // 61\n  /**                                                                                                                  // 62\n * Return a deep copy of the source object or array.                                                                   // 63\n *                                                                                                                     // 64\n * @returns Object or Array                                                                                            // 65\n * @private                                                                                                            // 66\n */                                                                                                                    // 67\n  var _deepCopy = function(source) {                                                                                   // 68\n    var copy, i, len, prop;                                                                                            // 69\n    if (typeof source !== \"object\" || source == null || typeof source.nodeType === \"number\") {                         // 70\n      copy = source;                                                                                                   // 71\n    } else if (typeof source.length === \"number\") {                                                                    // 72\n      copy = [];                                                                                                       // 73\n      for (i = 0, len = source.length; i < len; i++) {                                                                 // 74\n        if (_hasOwn.call(source, i)) {                                                                                 // 75\n          copy[i] = _deepCopy(source[i]);                                                                              // 76\n        }                                                                                                              // 77\n      }                                                                                                                // 78\n    } else {                                                                                                           // 79\n      copy = {};                                                                                                       // 80\n      for (prop in source) {                                                                                           // 81\n        if (_hasOwn.call(source, prop)) {                                                                              // 82\n          copy[prop] = _deepCopy(source[prop]);                                                                        // 83\n        }                                                                                                              // 84\n      }                                                                                                                // 85\n    }                                                                                                                  // 86\n    return copy;                                                                                                       // 87\n  };                                                                                                                   // 88\n  /**                                                                                                                  // 89\n * Makes a shallow copy of `obj` (like `_extend`) but filters its properties based on a list of `keys` to keep.        // 90\n * The inverse of `_omit`, mostly. The big difference is that these properties do NOT need to be enumerable to         // 91\n * be kept.                                                                                                            // 92\n *                                                                                                                     // 93\n * @returns A new filtered object.                                                                                     // 94\n * @private                                                                                                            // 95\n */                                                                                                                    // 96\n  var _pick = function(obj, keys) {                                                                                    // 97\n    var newObj = {};                                                                                                   // 98\n    for (var i = 0, len = keys.length; i < len; i++) {                                                                 // 99\n      if (keys[i] in obj) {                                                                                            // 100\n        newObj[keys[i]] = obj[keys[i]];                                                                                // 101\n      }                                                                                                                // 102\n    }                                                                                                                  // 103\n    return newObj;                                                                                                     // 104\n  };                                                                                                                   // 105\n  /**                                                                                                                  // 106\n * Makes a shallow copy of `obj` (like `_extend`) but filters its properties based on a list of `keys` to omit.        // 107\n * The inverse of `_pick`.                                                                                             // 108\n *                                                                                                                     // 109\n * @returns A new filtered object.                                                                                     // 110\n * @private                                                                                                            // 111\n */                                                                                                                    // 112\n  var _omit = function(obj, keys) {                                                                                    // 113\n    var newObj = {};                                                                                                   // 114\n    for (var prop in obj) {                                                                                            // 115\n      if (keys.indexOf(prop) === -1) {                                                                                 // 116\n        newObj[prop] = obj[prop];                                                                                      // 117\n      }                                                                                                                // 118\n    }                                                                                                                  // 119\n    return newObj;                                                                                                     // 120\n  };                                                                                                                   // 121\n  /**                                                                                                                  // 122\n * Remove all owned, enumerable properties from an object.                                                             // 123\n *                                                                                                                     // 124\n * @returns The original object without its owned, enumerable properties.                                              // 125\n * @private                                                                                                            // 126\n */                                                                                                                    // 127\n  var _deleteOwnProperties = function(obj) {                                                                           // 128\n    if (obj) {                                                                                                         // 129\n      for (var prop in obj) {                                                                                          // 130\n        if (_hasOwn.call(obj, prop)) {                                                                                 // 131\n          delete obj[prop];                                                                                            // 132\n        }                                                                                                              // 133\n      }                                                                                                                // 134\n    }                                                                                                                  // 135\n    return obj;                                                                                                        // 136\n  };                                                                                                                   // 137\n  /**                                                                                                                  // 138\n * Determine if an element is contained within another element.                                                        // 139\n *                                                                                                                     // 140\n * @returns Boolean                                                                                                    // 141\n * @private                                                                                                            // 142\n */                                                                                                                    // 143\n  var _containedBy = function(el, ancestorEl) {                                                                        // 144\n    if (el && el.nodeType === 1 && el.ownerDocument && ancestorEl && (ancestorEl.nodeType === 1 && ancestorEl.ownerDocument && ancestorEl.ownerDocument === el.ownerDocument || ancestorEl.nodeType === 9 && !ancestorEl.ownerDocument && ancestorEl === el.ownerDocument)) {\n      do {                                                                                                             // 146\n        if (el === ancestorEl) {                                                                                       // 147\n          return true;                                                                                                 // 148\n        }                                                                                                              // 149\n        el = el.parentNode;                                                                                            // 150\n      } while (el);                                                                                                    // 151\n    }                                                                                                                  // 152\n    return false;                                                                                                      // 153\n  };                                                                                                                   // 154\n  /**                                                                                                                  // 155\n * Get the URL path's parent directory.                                                                                // 156\n *                                                                                                                     // 157\n * @returns String or `undefined`                                                                                      // 158\n * @private                                                                                                            // 159\n */                                                                                                                    // 160\n  var _getDirPathOfUrl = function(url) {                                                                               // 161\n    var dir;                                                                                                           // 162\n    if (typeof url === \"string\" && url) {                                                                              // 163\n      dir = url.split(\"#\")[0].split(\"?\")[0];                                                                           // 164\n      dir = url.slice(0, url.lastIndexOf(\"/\") + 1);                                                                    // 165\n    }                                                                                                                  // 166\n    return dir;                                                                                                        // 167\n  };                                                                                                                   // 168\n  /**                                                                                                                  // 169\n * Get the current script's URL by throwing an `Error` and analyzing it.                                               // 170\n *                                                                                                                     // 171\n * @returns String or `undefined`                                                                                      // 172\n * @private                                                                                                            // 173\n */                                                                                                                    // 174\n  var _getCurrentScriptUrlFromErrorStack = function(stack) {                                                           // 175\n    var url, matches;                                                                                                  // 176\n    if (typeof stack === \"string\" && stack) {                                                                          // 177\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)((?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      if (matches && matches[1]) {                                                                                     // 179\n        url = matches[1];                                                                                              // 180\n      } else {                                                                                                         // 181\n        matches = stack.match(/\\)@((?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);                       // 182\n        if (matches && matches[1]) {                                                                                   // 183\n          url = matches[1];                                                                                            // 184\n        }                                                                                                              // 185\n      }                                                                                                                // 186\n    }                                                                                                                  // 187\n    return url;                                                                                                        // 188\n  };                                                                                                                   // 189\n  /**                                                                                                                  // 190\n * Get the current script's URL by throwing an `Error` and analyzing it.                                               // 191\n *                                                                                                                     // 192\n * @returns String or `undefined`                                                                                      // 193\n * @private                                                                                                            // 194\n */                                                                                                                    // 195\n  var _getCurrentScriptUrlFromError = function() {                                                                     // 196\n    var url, err;                                                                                                      // 197\n    try {                                                                                                              // 198\n      throw new _Error();                                                                                              // 199\n    } catch (e) {                                                                                                      // 200\n      err = e;                                                                                                         // 201\n    }                                                                                                                  // 202\n    if (err) {                                                                                                         // 203\n      url = err.sourceURL || err.fileName || _getCurrentScriptUrlFromErrorStack(err.stack);                            // 204\n    }                                                                                                                  // 205\n    return url;                                                                                                        // 206\n  };                                                                                                                   // 207\n  /**                                                                                                                  // 208\n * Get the current script's URL.                                                                                       // 209\n *                                                                                                                     // 210\n * @returns String or `undefined`                                                                                      // 211\n * @private                                                                                                            // 212\n */                                                                                                                    // 213\n  var _getCurrentScriptUrl = function() {                                                                              // 214\n    var jsPath, scripts, i;                                                                                            // 215\n    if (_document.currentScript && (jsPath = _document.currentScript.src)) {                                           // 216\n      return jsPath;                                                                                                   // 217\n    }                                                                                                                  // 218\n    scripts = _document.getElementsByTagName(\"script\");                                                                // 219\n    if (scripts.length === 1) {                                                                                        // 220\n      return scripts[0].src || undefined;                                                                              // 221\n    }                                                                                                                  // 222\n    if (\"readyState\" in scripts[0]) {                                                                                  // 223\n      for (i = scripts.length; i--; ) {                                                                                // 224\n        if (scripts[i].readyState === \"interactive\" && (jsPath = scripts[i].src)) {                                    // 225\n          return jsPath;                                                                                               // 226\n        }                                                                                                              // 227\n      }                                                                                                                // 228\n    }                                                                                                                  // 229\n    if (_document.readyState === \"loading\" && (jsPath = scripts[scripts.length - 1].src)) {                            // 230\n      return jsPath;                                                                                                   // 231\n    }                                                                                                                  // 232\n    if (jsPath = _getCurrentScriptUrlFromError()) {                                                                    // 233\n      return jsPath;                                                                                                   // 234\n    }                                                                                                                  // 235\n    return undefined;                                                                                                  // 236\n  };                                                                                                                   // 237\n  /**                                                                                                                  // 238\n * Get the unanimous parent directory of ALL script tags.                                                              // 239\n * If any script tags are either (a) inline or (b) from differing parent                                               // 240\n * directories, this method must return `undefined`.                                                                   // 241\n *                                                                                                                     // 242\n * @returns String or `undefined`                                                                                      // 243\n * @private                                                                                                            // 244\n */                                                                                                                    // 245\n  var _getUnanimousScriptParentDir = function() {                                                                      // 246\n    var i, jsDir, jsPath, scripts = _document.getElementsByTagName(\"script\");                                          // 247\n    for (i = scripts.length; i--; ) {                                                                                  // 248\n      if (!(jsPath = scripts[i].src)) {                                                                                // 249\n        jsDir = null;                                                                                                  // 250\n        break;                                                                                                         // 251\n      }                                                                                                                // 252\n      jsPath = _getDirPathOfUrl(jsPath);                                                                               // 253\n      if (jsDir == null) {                                                                                             // 254\n        jsDir = jsPath;                                                                                                // 255\n      } else if (jsDir !== jsPath) {                                                                                   // 256\n        jsDir = null;                                                                                                  // 257\n        break;                                                                                                         // 258\n      }                                                                                                                // 259\n    }                                                                                                                  // 260\n    return jsDir || undefined;                                                                                         // 261\n  };                                                                                                                   // 262\n  /**                                                                                                                  // 263\n * Get the presumed location of the \"ZeroClipboard.swf\" file, based on the location                                    // 264\n * of the executing JavaScript file (e.g. \"ZeroClipboard.js\", etc.).                                                   // 265\n *                                                                                                                     // 266\n * @returns String                                                                                                     // 267\n * @private                                                                                                            // 268\n */                                                                                                                    // 269\n  var _getDefaultSwfPath = function() {                                                                                // 270\n    var jsDir = _getDirPathOfUrl(_getCurrentScriptUrl()) || _getUnanimousScriptParentDir() || \"\";                      // 271\n    return jsDir + \"ZeroClipboard.swf\";                                                                                // 272\n  };                                                                                                                   // 273\n  /**                                                                                                                  // 274\n * Is the client's operating system some version of Windows?                                                           // 275\n *                                                                                                                     // 276\n * @returns Boolean                                                                                                    // 277\n * @private                                                                                                            // 278\n */                                                                                                                    // 279\n  var _isWindows = function() {                                                                                        // 280\n    var isWindowsRegex = /win(dows|[\\s]?(nt|me|ce|xp|vista|[\\d]+))/i;                                                  // 281\n    return !!_navigator && (isWindowsRegex.test(_navigator.appVersion || \"\") || isWindowsRegex.test(_navigator.platform || \"\") || (_navigator.userAgent || \"\").indexOf(\"Windows\") !== -1);\n  };                                                                                                                   // 283\n  /**                                                                                                                  // 284\n * Keep track of if the page is framed (in an `iframe`). This can never change.                                        // 285\n * @private                                                                                                            // 286\n */                                                                                                                    // 287\n  var _pageIsFramed = function() {                                                                                     // 288\n    return window.opener == null && (!!window.top && window != window.top || !!window.parent && window != window.parent);\n  }();                                                                                                                 // 290\n  /**                                                                                                                  // 291\n * Keep track of the state of the Flash object.                                                                        // 292\n * @private                                                                                                            // 293\n */                                                                                                                    // 294\n  var _flashState = {                                                                                                  // 295\n    bridge: null,                                                                                                      // 296\n    version: \"0.0.0\",                                                                                                  // 297\n    pluginType: \"unknown\",                                                                                             // 298\n    disabled: null,                                                                                                    // 299\n    outdated: null,                                                                                                    // 300\n    sandboxed: null,                                                                                                   // 301\n    unavailable: null,                                                                                                 // 302\n    degraded: null,                                                                                                    // 303\n    deactivated: null,                                                                                                 // 304\n    overdue: null,                                                                                                     // 305\n    ready: null                                                                                                        // 306\n  };                                                                                                                   // 307\n  /**                                                                                                                  // 308\n * The minimum Flash Player version required to use ZeroClipboard completely.                                          // 309\n * @readonly                                                                                                           // 310\n * @private                                                                                                            // 311\n */                                                                                                                    // 312\n  var _minimumFlashVersion = \"11.0.0\";                                                                                 // 313\n  /**                                                                                                                  // 314\n * The ZeroClipboard library version number, as reported by Flash, at the time the SWF was compiled.                   // 315\n */                                                                                                                    // 316\n  var _zcSwfVersion;                                                                                                   // 317\n  /**                                                                                                                  // 318\n * Keep track of all event listener registrations.                                                                     // 319\n * @private                                                                                                            // 320\n */                                                                                                                    // 321\n  var _handlers = {};                                                                                                  // 322\n  /**                                                                                                                  // 323\n * Keep track of the currently activated element.                                                                      // 324\n * @private                                                                                                            // 325\n */                                                                                                                    // 326\n  var _currentElement;                                                                                                 // 327\n  /**                                                                                                                  // 328\n * Keep track of the element that was activated when a `copy` process started.                                         // 329\n * @private                                                                                                            // 330\n */                                                                                                                    // 331\n  var _copyTarget;                                                                                                     // 332\n  /**                                                                                                                  // 333\n * Keep track of data for the pending clipboard transaction.                                                           // 334\n * @private                                                                                                            // 335\n */                                                                                                                    // 336\n  var _clipData = {};                                                                                                  // 337\n  /**                                                                                                                  // 338\n * Keep track of data formats for the pending clipboard transaction.                                                   // 339\n * @private                                                                                                            // 340\n */                                                                                                                    // 341\n  var _clipDataFormatMap = null;                                                                                       // 342\n  /**                                                                                                                  // 343\n * Keep track of the Flash availability check timeout.                                                                 // 344\n * @private                                                                                                            // 345\n */                                                                                                                    // 346\n  var _flashCheckTimeout = 0;                                                                                          // 347\n  /**                                                                                                                  // 348\n * Keep track of SWF network errors interval polling.                                                                  // 349\n * @private                                                                                                            // 350\n */                                                                                                                    // 351\n  var _swfFallbackCheckInterval = 0;                                                                                   // 352\n  /**                                                                                                                  // 353\n * The `message` store for events                                                                                      // 354\n * @private                                                                                                            // 355\n */                                                                                                                    // 356\n  var _eventMessages = {                                                                                               // 357\n    ready: \"Flash communication is established\",                                                                       // 358\n    error: {                                                                                                           // 359\n      \"flash-disabled\": \"Flash is disabled or not installed. May also be attempting to run Flash in a sandboxed iframe, which is impossible.\",\n      \"flash-outdated\": \"Flash is too outdated to support ZeroClipboard\",                                              // 361\n      \"flash-sandboxed\": \"Attempting to run Flash in a sandboxed iframe, which is impossible\",                         // 362\n      \"flash-unavailable\": \"Flash is unable to communicate bidirectionally with JavaScript\",                           // 363\n      \"flash-degraded\": \"Flash is unable to preserve data fidelity when communicating with JavaScript\",                // 364\n      \"flash-deactivated\": \"Flash is too outdated for your browser and/or is configured as click-to-activate.\\nThis may also mean that the ZeroClipboard SWF object could not be loaded, so please check your `swfPath` configuration and/or network connectivity.\\nMay also be attempting to run Flash in a sandboxed iframe, which is impossible.\",\n      \"flash-overdue\": \"Flash communication was established but NOT within the acceptable time limit\",                 // 366\n      \"version-mismatch\": \"ZeroClipboard JS version number does not match ZeroClipboard SWF version number\",           // 367\n      \"clipboard-error\": \"At least one error was thrown while ZeroClipboard was attempting to inject your data into the clipboard\",\n      \"config-mismatch\": \"ZeroClipboard configuration does not match Flash's reality\",                                 // 369\n      \"swf-not-found\": \"The ZeroClipboard SWF object could not be loaded, so please check your `swfPath` configuration and/or network connectivity\"\n    }                                                                                                                  // 371\n  };                                                                                                                   // 372\n  /**                                                                                                                  // 373\n * The `name`s of `error` events that can only occur is Flash has at least                                             // 374\n * been able to load the SWF successfully.                                                                             // 375\n * @private                                                                                                            // 376\n */                                                                                                                    // 377\n  var _errorsThatOnlyOccurAfterFlashLoads = [ \"flash-unavailable\", \"flash-degraded\", \"flash-overdue\", \"version-mismatch\", \"config-mismatch\", \"clipboard-error\" ];\n  /**                                                                                                                  // 379\n * The `name`s of `error` events that should likely result in the `_flashState`                                        // 380\n * variable's property values being updated.                                                                           // 381\n * @private                                                                                                            // 382\n */                                                                                                                    // 383\n  var _flashStateErrorNames = [ \"flash-disabled\", \"flash-outdated\", \"flash-sandboxed\", \"flash-unavailable\", \"flash-degraded\", \"flash-deactivated\", \"flash-overdue\" ];\n  /**                                                                                                                  // 385\n * A RegExp to match the `name` property of `error` events related to Flash.                                           // 386\n * @private                                                                                                            // 387\n */                                                                                                                    // 388\n  var _flashStateErrorNameMatchingRegex = new RegExp(\"^flash-(\" + _flashStateErrorNames.map(function(errorName) {      // 389\n    return errorName.replace(/^flash-/, \"\");                                                                           // 390\n  }).join(\"|\") + \")$\");                                                                                                // 391\n  /**                                                                                                                  // 392\n * A RegExp to match the `name` property of `error` events related to Flash,                                           // 393\n * which is enabled.                                                                                                   // 394\n * @private                                                                                                            // 395\n */                                                                                                                    // 396\n  var _flashStateEnabledErrorNameMatchingRegex = new RegExp(\"^flash-(\" + _flashStateErrorNames.slice(1).map(function(errorName) {\n    return errorName.replace(/^flash-/, \"\");                                                                           // 398\n  }).join(\"|\") + \")$\");                                                                                                // 399\n  /**                                                                                                                  // 400\n * ZeroClipboard configuration defaults for the Core module.                                                           // 401\n * @private                                                                                                            // 402\n */                                                                                                                    // 403\n  var _globalConfig = {                                                                                                // 404\n    swfPath: _getDefaultSwfPath(),                                                                                     // 405\n    trustedDomains: window.location.host ? [ window.location.host ] : [],                                              // 406\n    cacheBust: true,                                                                                                   // 407\n    forceEnhancedClipboard: false,                                                                                     // 408\n    flashLoadTimeout: 3e4,                                                                                             // 409\n    autoActivate: true,                                                                                                // 410\n    bubbleEvents: true,                                                                                                // 411\n    fixLineEndings: true,                                                                                              // 412\n    containerId: \"global-zeroclipboard-html-bridge\",                                                                   // 413\n    containerClass: \"global-zeroclipboard-container\",                                                                  // 414\n    swfObjectId: \"global-zeroclipboard-flash-bridge\",                                                                  // 415\n    hoverClass: \"zeroclipboard-is-hover\",                                                                              // 416\n    activeClass: \"zeroclipboard-is-active\",                                                                            // 417\n    forceHandCursor: false,                                                                                            // 418\n    title: null,                                                                                                       // 419\n    zIndex: 999999999                                                                                                  // 420\n  };                                                                                                                   // 421\n  /**                                                                                                                  // 422\n * The underlying implementation of `ZeroClipboard.config`.                                                            // 423\n * @private                                                                                                            // 424\n */                                                                                                                    // 425\n  var _config = function(options) {                                                                                    // 426\n    if (typeof options === \"object\" && options !== null) {                                                             // 427\n      for (var prop in options) {                                                                                      // 428\n        if (_hasOwn.call(options, prop)) {                                                                             // 429\n          if (/^(?:forceHandCursor|title|zIndex|bubbleEvents|fixLineEndings)$/.test(prop)) {                           // 430\n            _globalConfig[prop] = options[prop];                                                                       // 431\n          } else if (_flashState.bridge == null) {                                                                     // 432\n            if (prop === \"containerId\" || prop === \"swfObjectId\") {                                                    // 433\n              if (_isValidHtml4Id(options[prop])) {                                                                    // 434\n                _globalConfig[prop] = options[prop];                                                                   // 435\n              } else {                                                                                                 // 436\n                throw new Error(\"The specified `\" + prop + \"` value is not valid as an HTML4 Element ID\");             // 437\n              }                                                                                                        // 438\n            } else {                                                                                                   // 439\n              _globalConfig[prop] = options[prop];                                                                     // 440\n            }                                                                                                          // 441\n          }                                                                                                            // 442\n        }                                                                                                              // 443\n      }                                                                                                                // 444\n    }                                                                                                                  // 445\n    if (typeof options === \"string\" && options) {                                                                      // 446\n      if (_hasOwn.call(_globalConfig, options)) {                                                                      // 447\n        return _globalConfig[options];                                                                                 // 448\n      }                                                                                                                // 449\n      return;                                                                                                          // 450\n    }                                                                                                                  // 451\n    return _deepCopy(_globalConfig);                                                                                   // 452\n  };                                                                                                                   // 453\n  /**                                                                                                                  // 454\n * The underlying implementation of `ZeroClipboard.state`.                                                             // 455\n * @private                                                                                                            // 456\n */                                                                                                                    // 457\n  var _state = function() {                                                                                            // 458\n    _detectSandbox();                                                                                                  // 459\n    return {                                                                                                           // 460\n      browser: _pick(_navigator, [ \"userAgent\", \"platform\", \"appName\", \"appVersion\" ]),                                // 461\n      flash: _omit(_flashState, [ \"bridge\" ]),                                                                         // 462\n      zeroclipboard: {                                                                                                 // 463\n        version: ZeroClipboard.version,                                                                                // 464\n        config: ZeroClipboard.config()                                                                                 // 465\n      }                                                                                                                // 466\n    };                                                                                                                 // 467\n  };                                                                                                                   // 468\n  /**                                                                                                                  // 469\n * The underlying implementation of `ZeroClipboard.isFlashUnusable`.                                                   // 470\n * @private                                                                                                            // 471\n */                                                                                                                    // 472\n  var _isFlashUnusable = function() {                                                                                  // 473\n    return !!(_flashState.disabled || _flashState.outdated || _flashState.sandboxed || _flashState.unavailable || _flashState.degraded || _flashState.deactivated);\n  };                                                                                                                   // 475\n  /**                                                                                                                  // 476\n * The underlying implementation of `ZeroClipboard.on`.                                                                // 477\n * @private                                                                                                            // 478\n */                                                                                                                    // 479\n  var _on = function(eventType, listener) {                                                                            // 480\n    var i, len, events, added = {};                                                                                    // 481\n    if (typeof eventType === \"string\" && eventType) {                                                                  // 482\n      events = eventType.toLowerCase().split(/\\s+/);                                                                   // 483\n    } else if (typeof eventType === \"object\" && eventType && typeof listener === \"undefined\") {                        // 484\n      for (i in eventType) {                                                                                           // 485\n        if (_hasOwn.call(eventType, i) && typeof i === \"string\" && i && typeof eventType[i] === \"function\") {          // 486\n          ZeroClipboard.on(i, eventType[i]);                                                                           // 487\n        }                                                                                                              // 488\n      }                                                                                                                // 489\n    }                                                                                                                  // 490\n    if (events && events.length) {                                                                                     // 491\n      for (i = 0, len = events.length; i < len; i++) {                                                                 // 492\n        eventType = events[i].replace(/^on/, \"\");                                                                      // 493\n        added[eventType] = true;                                                                                       // 494\n        if (!_handlers[eventType]) {                                                                                   // 495\n          _handlers[eventType] = [];                                                                                   // 496\n        }                                                                                                              // 497\n        _handlers[eventType].push(listener);                                                                           // 498\n      }                                                                                                                // 499\n      if (added.ready && _flashState.ready) {                                                                          // 500\n        ZeroClipboard.emit({                                                                                           // 501\n          type: \"ready\"                                                                                                // 502\n        });                                                                                                            // 503\n      }                                                                                                                // 504\n      if (added.error) {                                                                                               // 505\n        for (i = 0, len = _flashStateErrorNames.length; i < len; i++) {                                                // 506\n          if (_flashState[_flashStateErrorNames[i].replace(/^flash-/, \"\")] === true) {                                 // 507\n            ZeroClipboard.emit({                                                                                       // 508\n              type: \"error\",                                                                                           // 509\n              name: _flashStateErrorNames[i]                                                                           // 510\n            });                                                                                                        // 511\n            break;                                                                                                     // 512\n          }                                                                                                            // 513\n        }                                                                                                              // 514\n        if (_zcSwfVersion !== undefined && ZeroClipboard.version !== _zcSwfVersion) {                                  // 515\n          ZeroClipboard.emit({                                                                                         // 516\n            type: \"error\",                                                                                             // 517\n            name: \"version-mismatch\",                                                                                  // 518\n            jsVersion: ZeroClipboard.version,                                                                          // 519\n            swfVersion: _zcSwfVersion                                                                                  // 520\n          });                                                                                                          // 521\n        }                                                                                                              // 522\n      }                                                                                                                // 523\n    }                                                                                                                  // 524\n    return ZeroClipboard;                                                                                              // 525\n  };                                                                                                                   // 526\n  /**                                                                                                                  // 527\n * The underlying implementation of `ZeroClipboard.off`.                                                               // 528\n * @private                                                                                                            // 529\n */                                                                                                                    // 530\n  var _off = function(eventType, listener) {                                                                           // 531\n    var i, len, foundIndex, events, perEventHandlers;                                                                  // 532\n    if (arguments.length === 0) {                                                                                      // 533\n      events = _keys(_handlers);                                                                                       // 534\n    } else if (typeof eventType === \"string\" && eventType) {                                                           // 535\n      events = eventType.split(/\\s+/);                                                                                 // 536\n    } else if (typeof eventType === \"object\" && eventType && typeof listener === \"undefined\") {                        // 537\n      for (i in eventType) {                                                                                           // 538\n        if (_hasOwn.call(eventType, i) && typeof i === \"string\" && i && typeof eventType[i] === \"function\") {          // 539\n          ZeroClipboard.off(i, eventType[i]);                                                                          // 540\n        }                                                                                                              // 541\n      }                                                                                                                // 542\n    }                                                                                                                  // 543\n    if (events && events.length) {                                                                                     // 544\n      for (i = 0, len = events.length; i < len; i++) {                                                                 // 545\n        eventType = events[i].toLowerCase().replace(/^on/, \"\");                                                        // 546\n        perEventHandlers = _handlers[eventType];                                                                       // 547\n        if (perEventHandlers && perEventHandlers.length) {                                                             // 548\n          if (listener) {                                                                                              // 549\n            foundIndex = perEventHandlers.indexOf(listener);                                                           // 550\n            while (foundIndex !== -1) {                                                                                // 551\n              perEventHandlers.splice(foundIndex, 1);                                                                  // 552\n              foundIndex = perEventHandlers.indexOf(listener, foundIndex);                                             // 553\n            }                                                                                                          // 554\n          } else {                                                                                                     // 555\n            perEventHandlers.length = 0;                                                                               // 556\n          }                                                                                                            // 557\n        }                                                                                                              // 558\n      }                                                                                                                // 559\n    }                                                                                                                  // 560\n    return ZeroClipboard;                                                                                              // 561\n  };                                                                                                                   // 562\n  /**                                                                                                                  // 563\n * The underlying implementation of `ZeroClipboard.handlers`.                                                          // 564\n * @private                                                                                                            // 565\n */                                                                                                                    // 566\n  var _listeners = function(eventType) {                                                                               // 567\n    var copy;                                                                                                          // 568\n    if (typeof eventType === \"string\" && eventType) {                                                                  // 569\n      copy = _deepCopy(_handlers[eventType]) || null;                                                                  // 570\n    } else {                                                                                                           // 571\n      copy = _deepCopy(_handlers);                                                                                     // 572\n    }                                                                                                                  // 573\n    return copy;                                                                                                       // 574\n  };                                                                                                                   // 575\n  /**                                                                                                                  // 576\n * The underlying implementation of `ZeroClipboard.emit`.                                                              // 577\n * @private                                                                                                            // 578\n */                                                                                                                    // 579\n  var _emit = function(event) {                                                                                        // 580\n    var eventCopy, returnVal, tmp;                                                                                     // 581\n    event = _createEvent(event);                                                                                       // 582\n    if (!event) {                                                                                                      // 583\n      return;                                                                                                          // 584\n    }                                                                                                                  // 585\n    if (_preprocessEvent(event)) {                                                                                     // 586\n      return;                                                                                                          // 587\n    }                                                                                                                  // 588\n    if (event.type === \"ready\" && _flashState.overdue === true) {                                                      // 589\n      return ZeroClipboard.emit({                                                                                      // 590\n        type: \"error\",                                                                                                 // 591\n        name: \"flash-overdue\"                                                                                          // 592\n      });                                                                                                              // 593\n    }                                                                                                                  // 594\n    eventCopy = _extend({}, event);                                                                                    // 595\n    _dispatchCallbacks.call(this, eventCopy);                                                                          // 596\n    if (event.type === \"copy\") {                                                                                       // 597\n      tmp = _mapClipDataToFlash(_clipData);                                                                            // 598\n      returnVal = tmp.data;                                                                                            // 599\n      _clipDataFormatMap = tmp.formatMap;                                                                              // 600\n    }                                                                                                                  // 601\n    return returnVal;                                                                                                  // 602\n  };                                                                                                                   // 603\n  /**                                                                                                                  // 604\n * The underlying implementation of `ZeroClipboard.create`.                                                            // 605\n * @private                                                                                                            // 606\n */                                                                                                                    // 607\n  var _create = function() {                                                                                           // 608\n    var previousState = _flashState.sandboxed;                                                                         // 609\n    _detectSandbox();                                                                                                  // 610\n    if (typeof _flashState.ready !== \"boolean\") {                                                                      // 611\n      _flashState.ready = false;                                                                                       // 612\n    }                                                                                                                  // 613\n    if (_flashState.sandboxed !== previousState && _flashState.sandboxed === true) {                                   // 614\n      _flashState.ready = false;                                                                                       // 615\n      ZeroClipboard.emit({                                                                                             // 616\n        type: \"error\",                                                                                                 // 617\n        name: \"flash-sandboxed\"                                                                                        // 618\n      });                                                                                                              // 619\n    } else if (!ZeroClipboard.isFlashUnusable() && _flashState.bridge === null) {                                      // 620\n      var maxWait = _globalConfig.flashLoadTimeout;                                                                    // 621\n      if (typeof maxWait === \"number\" && maxWait >= 0) {                                                               // 622\n        _flashCheckTimeout = _setTimeout(function() {                                                                  // 623\n          if (typeof _flashState.deactivated !== \"boolean\") {                                                          // 624\n            _flashState.deactivated = true;                                                                            // 625\n          }                                                                                                            // 626\n          if (_flashState.deactivated === true) {                                                                      // 627\n            ZeroClipboard.emit({                                                                                       // 628\n              type: \"error\",                                                                                           // 629\n              name: \"flash-deactivated\"                                                                                // 630\n            });                                                                                                        // 631\n          }                                                                                                            // 632\n        }, maxWait);                                                                                                   // 633\n      }                                                                                                                // 634\n      _flashState.overdue = false;                                                                                     // 635\n      _embedSwf();                                                                                                     // 636\n    }                                                                                                                  // 637\n  };                                                                                                                   // 638\n  /**                                                                                                                  // 639\n * The underlying implementation of `ZeroClipboard.destroy`.                                                           // 640\n * @private                                                                                                            // 641\n */                                                                                                                    // 642\n  var _destroy = function() {                                                                                          // 643\n    ZeroClipboard.clearData();                                                                                         // 644\n    ZeroClipboard.blur();                                                                                              // 645\n    ZeroClipboard.emit(\"destroy\");                                                                                     // 646\n    _unembedSwf();                                                                                                     // 647\n    ZeroClipboard.off();                                                                                               // 648\n  };                                                                                                                   // 649\n  /**                                                                                                                  // 650\n * The underlying implementation of `ZeroClipboard.setData`.                                                           // 651\n * @private                                                                                                            // 652\n */                                                                                                                    // 653\n  var _setData = function(format, data) {                                                                              // 654\n    var dataObj;                                                                                                       // 655\n    if (typeof format === \"object\" && format && typeof data === \"undefined\") {                                         // 656\n      dataObj = format;                                                                                                // 657\n      ZeroClipboard.clearData();                                                                                       // 658\n    } else if (typeof format === \"string\" && format) {                                                                 // 659\n      dataObj = {};                                                                                                    // 660\n      dataObj[format] = data;                                                                                          // 661\n    } else {                                                                                                           // 662\n      return;                                                                                                          // 663\n    }                                                                                                                  // 664\n    for (var dataFormat in dataObj) {                                                                                  // 665\n      if (typeof dataFormat === \"string\" && dataFormat && _hasOwn.call(dataObj, dataFormat) && typeof dataObj[dataFormat] === \"string\" && dataObj[dataFormat]) {\n        _clipData[dataFormat] = _fixLineEndings(dataObj[dataFormat]);                                                  // 667\n      }                                                                                                                // 668\n    }                                                                                                                  // 669\n  };                                                                                                                   // 670\n  /**                                                                                                                  // 671\n * The underlying implementation of `ZeroClipboard.clearData`.                                                         // 672\n * @private                                                                                                            // 673\n */                                                                                                                    // 674\n  var _clearData = function(format) {                                                                                  // 675\n    if (typeof format === \"undefined\") {                                                                               // 676\n      _deleteOwnProperties(_clipData);                                                                                 // 677\n      _clipDataFormatMap = null;                                                                                       // 678\n    } else if (typeof format === \"string\" && _hasOwn.call(_clipData, format)) {                                        // 679\n      delete _clipData[format];                                                                                        // 680\n    }                                                                                                                  // 681\n  };                                                                                                                   // 682\n  /**                                                                                                                  // 683\n * The underlying implementation of `ZeroClipboard.getData`.                                                           // 684\n * @private                                                                                                            // 685\n */                                                                                                                    // 686\n  var _getData = function(format) {                                                                                    // 687\n    if (typeof format === \"undefined\") {                                                                               // 688\n      return _deepCopy(_clipData);                                                                                     // 689\n    } else if (typeof format === \"string\" && _hasOwn.call(_clipData, format)) {                                        // 690\n      return _clipData[format];                                                                                        // 691\n    }                                                                                                                  // 692\n  };                                                                                                                   // 693\n  /**                                                                                                                  // 694\n * The underlying implementation of `ZeroClipboard.focus`/`ZeroClipboard.activate`.                                    // 695\n * @private                                                                                                            // 696\n */                                                                                                                    // 697\n  var _focus = function(element) {                                                                                     // 698\n    if (!(element && element.nodeType === 1)) {                                                                        // 699\n      return;                                                                                                          // 700\n    }                                                                                                                  // 701\n    if (_currentElement) {                                                                                             // 702\n      _removeClass(_currentElement, _globalConfig.activeClass);                                                        // 703\n      if (_currentElement !== element) {                                                                               // 704\n        _removeClass(_currentElement, _globalConfig.hoverClass);                                                       // 705\n      }                                                                                                                // 706\n    }                                                                                                                  // 707\n    _currentElement = element;                                                                                         // 708\n    _addClass(element, _globalConfig.hoverClass);                                                                      // 709\n    var newTitle = element.getAttribute(\"title\") || _globalConfig.title;                                               // 710\n    if (typeof newTitle === \"string\" && newTitle) {                                                                    // 711\n      var htmlBridge = _getHtmlBridge(_flashState.bridge);                                                             // 712\n      if (htmlBridge) {                                                                                                // 713\n        htmlBridge.setAttribute(\"title\", newTitle);                                                                    // 714\n      }                                                                                                                // 715\n    }                                                                                                                  // 716\n    var useHandCursor = _globalConfig.forceHandCursor === true || _getStyle(element, \"cursor\") === \"pointer\";          // 717\n    _setHandCursor(useHandCursor);                                                                                     // 718\n    _reposition();                                                                                                     // 719\n  };                                                                                                                   // 720\n  /**                                                                                                                  // 721\n * The underlying implementation of `ZeroClipboard.blur`/`ZeroClipboard.deactivate`.                                   // 722\n * @private                                                                                                            // 723\n */                                                                                                                    // 724\n  var _blur = function() {                                                                                             // 725\n    var htmlBridge = _getHtmlBridge(_flashState.bridge);                                                               // 726\n    if (htmlBridge) {                                                                                                  // 727\n      htmlBridge.removeAttribute(\"title\");                                                                             // 728\n      htmlBridge.style.left = \"0px\";                                                                                   // 729\n      htmlBridge.style.top = \"-9999px\";                                                                                // 730\n      htmlBridge.style.width = \"1px\";                                                                                  // 731\n      htmlBridge.style.height = \"1px\";                                                                                 // 732\n    }                                                                                                                  // 733\n    if (_currentElement) {                                                                                             // 734\n      _removeClass(_currentElement, _globalConfig.hoverClass);                                                         // 735\n      _removeClass(_currentElement, _globalConfig.activeClass);                                                        // 736\n      _currentElement = null;                                                                                          // 737\n    }                                                                                                                  // 738\n  };                                                                                                                   // 739\n  /**                                                                                                                  // 740\n * The underlying implementation of `ZeroClipboard.activeElement`.                                                     // 741\n * @private                                                                                                            // 742\n */                                                                                                                    // 743\n  var _activeElement = function() {                                                                                    // 744\n    return _currentElement || null;                                                                                    // 745\n  };                                                                                                                   // 746\n  /**                                                                                                                  // 747\n * Check if a value is a valid HTML4 `ID` or `Name` token.                                                             // 748\n * @private                                                                                                            // 749\n */                                                                                                                    // 750\n  var _isValidHtml4Id = function(id) {                                                                                 // 751\n    return typeof id === \"string\" && id && /^[A-Za-z][A-Za-z0-9_:\\-\\.]*$/.test(id);                                    // 752\n  };                                                                                                                   // 753\n  /**                                                                                                                  // 754\n * Create or update an `event` object, based on the `eventType`.                                                       // 755\n * @private                                                                                                            // 756\n */                                                                                                                    // 757\n  var _createEvent = function(event) {                                                                                 // 758\n    var eventType;                                                                                                     // 759\n    if (typeof event === \"string\" && event) {                                                                          // 760\n      eventType = event;                                                                                               // 761\n      event = {};                                                                                                      // 762\n    } else if (typeof event === \"object\" && event && typeof event.type === \"string\" && event.type) {                   // 763\n      eventType = event.type;                                                                                          // 764\n    }                                                                                                                  // 765\n    if (!eventType) {                                                                                                  // 766\n      return;                                                                                                          // 767\n    }                                                                                                                  // 768\n    eventType = eventType.toLowerCase();                                                                               // 769\n    if (!event.target && (/^(copy|aftercopy|_click)$/.test(eventType) || eventType === \"error\" && event.name === \"clipboard-error\")) {\n      event.target = _copyTarget;                                                                                      // 771\n    }                                                                                                                  // 772\n    _extend(event, {                                                                                                   // 773\n      type: eventType,                                                                                                 // 774\n      target: event.target || _currentElement || null,                                                                 // 775\n      relatedTarget: event.relatedTarget || null,                                                                      // 776\n      currentTarget: _flashState && _flashState.bridge || null,                                                        // 777\n      timeStamp: event.timeStamp || _now() || null                                                                     // 778\n    });                                                                                                                // 779\n    var msg = _eventMessages[event.type];                                                                              // 780\n    if (event.type === \"error\" && event.name && msg) {                                                                 // 781\n      msg = msg[event.name];                                                                                           // 782\n    }                                                                                                                  // 783\n    if (msg) {                                                                                                         // 784\n      event.message = msg;                                                                                             // 785\n    }                                                                                                                  // 786\n    if (event.type === \"ready\") {                                                                                      // 787\n      _extend(event, {                                                                                                 // 788\n        target: null,                                                                                                  // 789\n        version: _flashState.version                                                                                   // 790\n      });                                                                                                              // 791\n    }                                                                                                                  // 792\n    if (event.type === \"error\") {                                                                                      // 793\n      if (_flashStateErrorNameMatchingRegex.test(event.name)) {                                                        // 794\n        _extend(event, {                                                                                               // 795\n          target: null,                                                                                                // 796\n          minimumVersion: _minimumFlashVersion                                                                         // 797\n        });                                                                                                            // 798\n      }                                                                                                                // 799\n      if (_flashStateEnabledErrorNameMatchingRegex.test(event.name)) {                                                 // 800\n        _extend(event, {                                                                                               // 801\n          version: _flashState.version                                                                                 // 802\n        });                                                                                                            // 803\n      }                                                                                                                // 804\n    }                                                                                                                  // 805\n    if (event.type === \"copy\") {                                                                                       // 806\n      event.clipboardData = {                                                                                          // 807\n        setData: ZeroClipboard.setData,                                                                                // 808\n        clearData: ZeroClipboard.clearData                                                                             // 809\n      };                                                                                                               // 810\n    }                                                                                                                  // 811\n    if (event.type === \"aftercopy\") {                                                                                  // 812\n      event = _mapClipResultsFromFlash(event, _clipDataFormatMap);                                                     // 813\n    }                                                                                                                  // 814\n    if (event.target && !event.relatedTarget) {                                                                        // 815\n      event.relatedTarget = _getRelatedTarget(event.target);                                                           // 816\n    }                                                                                                                  // 817\n    return _addMouseData(event);                                                                                       // 818\n  };                                                                                                                   // 819\n  /**                                                                                                                  // 820\n * Get a relatedTarget from the target's `data-clipboard-target` attribute                                             // 821\n * @private                                                                                                            // 822\n */                                                                                                                    // 823\n  var _getRelatedTarget = function(targetEl) {                                                                         // 824\n    var relatedTargetId = targetEl && targetEl.getAttribute && targetEl.getAttribute(\"data-clipboard-target\");         // 825\n    return relatedTargetId ? _document.getElementById(relatedTargetId) : null;                                         // 826\n  };                                                                                                                   // 827\n  /**                                                                                                                  // 828\n * Add element and position data to `MouseEvent` instances                                                             // 829\n * @private                                                                                                            // 830\n */                                                                                                                    // 831\n  var _addMouseData = function(event) {                                                                                // 832\n    if (event && /^_(?:click|mouse(?:over|out|down|up|move))$/.test(event.type)) {                                     // 833\n      var srcElement = event.target;                                                                                   // 834\n      var fromElement = event.type === \"_mouseover\" && event.relatedTarget ? event.relatedTarget : undefined;          // 835\n      var toElement = event.type === \"_mouseout\" && event.relatedTarget ? event.relatedTarget : undefined;             // 836\n      var pos = _getElementPosition(srcElement);                                                                       // 837\n      var screenLeft = _window.screenLeft || _window.screenX || 0;                                                     // 838\n      var screenTop = _window.screenTop || _window.screenY || 0;                                                       // 839\n      var scrollLeft = _document.body.scrollLeft + _document.documentElement.scrollLeft;                               // 840\n      var scrollTop = _document.body.scrollTop + _document.documentElement.scrollTop;                                  // 841\n      var pageX = pos.left + (typeof event._stageX === \"number\" ? event._stageX : 0);                                  // 842\n      var pageY = pos.top + (typeof event._stageY === \"number\" ? event._stageY : 0);                                   // 843\n      var clientX = pageX - scrollLeft;                                                                                // 844\n      var clientY = pageY - scrollTop;                                                                                 // 845\n      var screenX = screenLeft + clientX;                                                                              // 846\n      var screenY = screenTop + clientY;                                                                               // 847\n      var moveX = typeof event.movementX === \"number\" ? event.movementX : 0;                                           // 848\n      var moveY = typeof event.movementY === \"number\" ? event.movementY : 0;                                           // 849\n      delete event._stageX;                                                                                            // 850\n      delete event._stageY;                                                                                            // 851\n      _extend(event, {                                                                                                 // 852\n        srcElement: srcElement,                                                                                        // 853\n        fromElement: fromElement,                                                                                      // 854\n        toElement: toElement,                                                                                          // 855\n        screenX: screenX,                                                                                              // 856\n        screenY: screenY,                                                                                              // 857\n        pageX: pageX,                                                                                                  // 858\n        pageY: pageY,                                                                                                  // 859\n        clientX: clientX,                                                                                              // 860\n        clientY: clientY,                                                                                              // 861\n        x: clientX,                                                                                                    // 862\n        y: clientY,                                                                                                    // 863\n        movementX: moveX,                                                                                              // 864\n        movementY: moveY,                                                                                              // 865\n        offsetX: 0,                                                                                                    // 866\n        offsetY: 0,                                                                                                    // 867\n        layerX: 0,                                                                                                     // 868\n        layerY: 0                                                                                                      // 869\n      });                                                                                                              // 870\n    }                                                                                                                  // 871\n    return event;                                                                                                      // 872\n  };                                                                                                                   // 873\n  /**                                                                                                                  // 874\n * Determine if an event's registered handlers should be execute synchronously or asynchronously.                      // 875\n *                                                                                                                     // 876\n * @returns {boolean}                                                                                                  // 877\n * @private                                                                                                            // 878\n */                                                                                                                    // 879\n  var _shouldPerformAsync = function(event) {                                                                          // 880\n    var eventType = event && typeof event.type === \"string\" && event.type || \"\";                                       // 881\n    return !/^(?:(?:before)?copy|destroy)$/.test(eventType);                                                           // 882\n  };                                                                                                                   // 883\n  /**                                                                                                                  // 884\n * Control if a callback should be executed asynchronously or not.                                                     // 885\n *                                                                                                                     // 886\n * @returns `undefined`                                                                                                // 887\n * @private                                                                                                            // 888\n */                                                                                                                    // 889\n  var _dispatchCallback = function(func, context, args, async) {                                                       // 890\n    if (async) {                                                                                                       // 891\n      _setTimeout(function() {                                                                                         // 892\n        func.apply(context, args);                                                                                     // 893\n      }, 0);                                                                                                           // 894\n    } else {                                                                                                           // 895\n      func.apply(context, args);                                                                                       // 896\n    }                                                                                                                  // 897\n  };                                                                                                                   // 898\n  /**                                                                                                                  // 899\n * Handle the actual dispatching of events to client instances.                                                        // 900\n *                                                                                                                     // 901\n * @returns `undefined`                                                                                                // 902\n * @private                                                                                                            // 903\n */                                                                                                                    // 904\n  var _dispatchCallbacks = function(event) {                                                                           // 905\n    if (!(typeof event === \"object\" && event && event.type)) {                                                         // 906\n      return;                                                                                                          // 907\n    }                                                                                                                  // 908\n    var async = _shouldPerformAsync(event);                                                                            // 909\n    var wildcardTypeHandlers = _handlers[\"*\"] || [];                                                                   // 910\n    var specificTypeHandlers = _handlers[event.type] || [];                                                            // 911\n    var handlers = wildcardTypeHandlers.concat(specificTypeHandlers);                                                  // 912\n    if (handlers && handlers.length) {                                                                                 // 913\n      var i, len, func, context, eventCopy, originalContext = this;                                                    // 914\n      for (i = 0, len = handlers.length; i < len; i++) {                                                               // 915\n        func = handlers[i];                                                                                            // 916\n        context = originalContext;                                                                                     // 917\n        if (typeof func === \"string\" && typeof _window[func] === \"function\") {                                         // 918\n          func = _window[func];                                                                                        // 919\n        }                                                                                                              // 920\n        if (typeof func === \"object\" && func && typeof func.handleEvent === \"function\") {                              // 921\n          context = func;                                                                                              // 922\n          func = func.handleEvent;                                                                                     // 923\n        }                                                                                                              // 924\n        if (typeof func === \"function\") {                                                                              // 925\n          eventCopy = _extend({}, event);                                                                              // 926\n          _dispatchCallback(func, context, [ eventCopy ], async);                                                      // 927\n        }                                                                                                              // 928\n      }                                                                                                                // 929\n    }                                                                                                                  // 930\n    return this;                                                                                                       // 931\n  };                                                                                                                   // 932\n  /**                                                                                                                  // 933\n * Check an `error` event's `name` property to see if Flash has                                                        // 934\n * already loaded, which rules out possible `iframe` sandboxing.                                                       // 935\n * @private                                                                                                            // 936\n */                                                                                                                    // 937\n  var _getSandboxStatusFromErrorEvent = function(event) {                                                              // 938\n    var isSandboxed = null;                                                                                            // 939\n    if (_pageIsFramed === false || event && event.type === \"error\" && event.name && _errorsThatOnlyOccurAfterFlashLoads.indexOf(event.name) !== -1) {\n      isSandboxed = false;                                                                                             // 941\n    }                                                                                                                  // 942\n    return isSandboxed;                                                                                                // 943\n  };                                                                                                                   // 944\n  /**                                                                                                                  // 945\n * Preprocess any special behaviors, reactions, or state changes after receiving this event.                           // 946\n * Executes only once per event emitted, NOT once per client.                                                          // 947\n * @private                                                                                                            // 948\n */                                                                                                                    // 949\n  var _preprocessEvent = function(event) {                                                                             // 950\n    var element = event.target || _currentElement || null;                                                             // 951\n    var sourceIsSwf = event._source === \"swf\";                                                                         // 952\n    delete event._source;                                                                                              // 953\n    switch (event.type) {                                                                                              // 954\n     case \"error\":                                                                                                     // 955\n      var isSandboxed = event.name === \"flash-sandboxed\" || _getSandboxStatusFromErrorEvent(event);                    // 956\n      if (typeof isSandboxed === \"boolean\") {                                                                          // 957\n        _flashState.sandboxed = isSandboxed;                                                                           // 958\n      }                                                                                                                // 959\n      if (_flashStateErrorNames.indexOf(event.name) !== -1) {                                                          // 960\n        _extend(_flashState, {                                                                                         // 961\n          disabled: event.name === \"flash-disabled\",                                                                   // 962\n          outdated: event.name === \"flash-outdated\",                                                                   // 963\n          unavailable: event.name === \"flash-unavailable\",                                                             // 964\n          degraded: event.name === \"flash-degraded\",                                                                   // 965\n          deactivated: event.name === \"flash-deactivated\",                                                             // 966\n          overdue: event.name === \"flash-overdue\",                                                                     // 967\n          ready: false                                                                                                 // 968\n        });                                                                                                            // 969\n      } else if (event.name === \"version-mismatch\") {                                                                  // 970\n        _zcSwfVersion = event.swfVersion;                                                                              // 971\n        _extend(_flashState, {                                                                                         // 972\n          disabled: false,                                                                                             // 973\n          outdated: false,                                                                                             // 974\n          unavailable: false,                                                                                          // 975\n          degraded: false,                                                                                             // 976\n          deactivated: false,                                                                                          // 977\n          overdue: false,                                                                                              // 978\n          ready: false                                                                                                 // 979\n        });                                                                                                            // 980\n      }                                                                                                                // 981\n      _clearTimeoutsAndPolling();                                                                                      // 982\n      break;                                                                                                           // 983\n                                                                                                                       // 984\n     case \"ready\":                                                                                                     // 985\n      _zcSwfVersion = event.swfVersion;                                                                                // 986\n      var wasDeactivated = _flashState.deactivated === true;                                                           // 987\n      _extend(_flashState, {                                                                                           // 988\n        disabled: false,                                                                                               // 989\n        outdated: false,                                                                                               // 990\n        sandboxed: false,                                                                                              // 991\n        unavailable: false,                                                                                            // 992\n        degraded: false,                                                                                               // 993\n        deactivated: false,                                                                                            // 994\n        overdue: wasDeactivated,                                                                                       // 995\n        ready: !wasDeactivated                                                                                         // 996\n      });                                                                                                              // 997\n      _clearTimeoutsAndPolling();                                                                                      // 998\n      break;                                                                                                           // 999\n                                                                                                                       // 1000\n     case \"beforecopy\":                                                                                                // 1001\n      _copyTarget = element;                                                                                           // 1002\n      break;                                                                                                           // 1003\n                                                                                                                       // 1004\n     case \"copy\":                                                                                                      // 1005\n      var textContent, htmlContent, targetEl = event.relatedTarget;                                                    // 1006\n      if (!(_clipData[\"text/html\"] || _clipData[\"text/plain\"]) && targetEl && (htmlContent = targetEl.value || targetEl.outerHTML || targetEl.innerHTML) && (textContent = targetEl.value || targetEl.textContent || targetEl.innerText)) {\n        event.clipboardData.clearData();                                                                               // 1008\n        event.clipboardData.setData(\"text/plain\", textContent);                                                        // 1009\n        if (htmlContent !== textContent) {                                                                             // 1010\n          event.clipboardData.setData(\"text/html\", htmlContent);                                                       // 1011\n        }                                                                                                              // 1012\n      } else if (!_clipData[\"text/plain\"] && event.target && (textContent = event.target.getAttribute(\"data-clipboard-text\"))) {\n        event.clipboardData.clearData();                                                                               // 1014\n        event.clipboardData.setData(\"text/plain\", textContent);                                                        // 1015\n      }                                                                                                                // 1016\n      break;                                                                                                           // 1017\n                                                                                                                       // 1018\n     case \"aftercopy\":                                                                                                 // 1019\n      _queueEmitClipboardErrors(event);                                                                                // 1020\n      ZeroClipboard.clearData();                                                                                       // 1021\n      if (element && element !== _safeActiveElement() && element.focus) {                                              // 1022\n        element.focus();                                                                                               // 1023\n      }                                                                                                                // 1024\n      break;                                                                                                           // 1025\n                                                                                                                       // 1026\n     case \"_mouseover\":                                                                                                // 1027\n      ZeroClipboard.focus(element);                                                                                    // 1028\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {                                                        // 1029\n        if (element && element !== event.relatedTarget && !_containedBy(event.relatedTarget, element)) {               // 1030\n          _fireMouseEvent(_extend({}, event, {                                                                         // 1031\n            type: \"mouseenter\",                                                                                        // 1032\n            bubbles: false,                                                                                            // 1033\n            cancelable: false                                                                                          // 1034\n          }));                                                                                                         // 1035\n        }                                                                                                              // 1036\n        _fireMouseEvent(_extend({}, event, {                                                                           // 1037\n          type: \"mouseover\"                                                                                            // 1038\n        }));                                                                                                           // 1039\n      }                                                                                                                // 1040\n      break;                                                                                                           // 1041\n                                                                                                                       // 1042\n     case \"_mouseout\":                                                                                                 // 1043\n      ZeroClipboard.blur();                                                                                            // 1044\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {                                                        // 1045\n        if (element && element !== event.relatedTarget && !_containedBy(event.relatedTarget, element)) {               // 1046\n          _fireMouseEvent(_extend({}, event, {                                                                         // 1047\n            type: \"mouseleave\",                                                                                        // 1048\n            bubbles: false,                                                                                            // 1049\n            cancelable: false                                                                                          // 1050\n          }));                                                                                                         // 1051\n        }                                                                                                              // 1052\n        _fireMouseEvent(_extend({}, event, {                                                                           // 1053\n          type: \"mouseout\"                                                                                             // 1054\n        }));                                                                                                           // 1055\n      }                                                                                                                // 1056\n      break;                                                                                                           // 1057\n                                                                                                                       // 1058\n     case \"_mousedown\":                                                                                                // 1059\n      _addClass(element, _globalConfig.activeClass);                                                                   // 1060\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {                                                        // 1061\n        _fireMouseEvent(_extend({}, event, {                                                                           // 1062\n          type: event.type.slice(1)                                                                                    // 1063\n        }));                                                                                                           // 1064\n      }                                                                                                                // 1065\n      break;                                                                                                           // 1066\n                                                                                                                       // 1067\n     case \"_mouseup\":                                                                                                  // 1068\n      _removeClass(element, _globalConfig.activeClass);                                                                // 1069\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {                                                        // 1070\n        _fireMouseEvent(_extend({}, event, {                                                                           // 1071\n          type: event.type.slice(1)                                                                                    // 1072\n        }));                                                                                                           // 1073\n      }                                                                                                                // 1074\n      break;                                                                                                           // 1075\n                                                                                                                       // 1076\n     case \"_click\":                                                                                                    // 1077\n      _copyTarget = null;                                                                                              // 1078\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {                                                        // 1079\n        _fireMouseEvent(_extend({}, event, {                                                                           // 1080\n          type: event.type.slice(1)                                                                                    // 1081\n        }));                                                                                                           // 1082\n      }                                                                                                                // 1083\n      break;                                                                                                           // 1084\n                                                                                                                       // 1085\n     case \"_mousemove\":                                                                                                // 1086\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {                                                        // 1087\n        _fireMouseEvent(_extend({}, event, {                                                                           // 1088\n          type: event.type.slice(1)                                                                                    // 1089\n        }));                                                                                                           // 1090\n      }                                                                                                                // 1091\n      break;                                                                                                           // 1092\n    }                                                                                                                  // 1093\n    if (/^_(?:click|mouse(?:over|out|down|up|move))$/.test(event.type)) {                                              // 1094\n      return true;                                                                                                     // 1095\n    }                                                                                                                  // 1096\n  };                                                                                                                   // 1097\n  /**                                                                                                                  // 1098\n * Check an \"aftercopy\" event for clipboard errors and emit a corresponding \"error\" event.                             // 1099\n * @private                                                                                                            // 1100\n */                                                                                                                    // 1101\n  var _queueEmitClipboardErrors = function(aftercopyEvent) {                                                           // 1102\n    if (aftercopyEvent.errors && aftercopyEvent.errors.length > 0) {                                                   // 1103\n      var errorEvent = _deepCopy(aftercopyEvent);                                                                      // 1104\n      _extend(errorEvent, {                                                                                            // 1105\n        type: \"error\",                                                                                                 // 1106\n        name: \"clipboard-error\"                                                                                        // 1107\n      });                                                                                                              // 1108\n      delete errorEvent.success;                                                                                       // 1109\n      _setTimeout(function() {                                                                                         // 1110\n        ZeroClipboard.emit(errorEvent);                                                                                // 1111\n      }, 0);                                                                                                           // 1112\n    }                                                                                                                  // 1113\n  };                                                                                                                   // 1114\n  /**                                                                                                                  // 1115\n * Dispatch a synthetic MouseEvent.                                                                                    // 1116\n *                                                                                                                     // 1117\n * @returns `undefined`                                                                                                // 1118\n * @private                                                                                                            // 1119\n */                                                                                                                    // 1120\n  var _fireMouseEvent = function(event) {                                                                              // 1121\n    if (!(event && typeof event.type === \"string\" && event)) {                                                         // 1122\n      return;                                                                                                          // 1123\n    }                                                                                                                  // 1124\n    var e, target = event.target || null, doc = target && target.ownerDocument || _document, defaults = {              // 1125\n      view: doc.defaultView || _window,                                                                                // 1126\n      canBubble: true,                                                                                                 // 1127\n      cancelable: true,                                                                                                // 1128\n      detail: event.type === \"click\" ? 1 : 0,                                                                          // 1129\n      button: typeof event.which === \"number\" ? event.which - 1 : typeof event.button === \"number\" ? event.button : doc.createEvent ? 0 : 1\n    }, args = _extend(defaults, event);                                                                                // 1131\n    if (!target) {                                                                                                     // 1132\n      return;                                                                                                          // 1133\n    }                                                                                                                  // 1134\n    if (doc.createEvent && target.dispatchEvent) {                                                                     // 1135\n      args = [ args.type, args.canBubble, args.cancelable, args.view, args.detail, args.screenX, args.screenY, args.clientX, args.clientY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.button, args.relatedTarget ];\n      e = doc.createEvent(\"MouseEvents\");                                                                              // 1137\n      if (e.initMouseEvent) {                                                                                          // 1138\n        e.initMouseEvent.apply(e, args);                                                                               // 1139\n        e._source = \"js\";                                                                                              // 1140\n        target.dispatchEvent(e);                                                                                       // 1141\n      }                                                                                                                // 1142\n    }                                                                                                                  // 1143\n  };                                                                                                                   // 1144\n  /**                                                                                                                  // 1145\n * Continuously poll the DOM until either:                                                                             // 1146\n *  (a) the fallback content becomes visible, or                                                                       // 1147\n *  (b) we receive an event from SWF (handled elsewhere)                                                               // 1148\n *                                                                                                                     // 1149\n * IMPORTANT:                                                                                                          // 1150\n * This is NOT a necessary check but it can result in significantly faster                                             // 1151\n * detection of bad `swfPath` configuration and/or network/server issues [in                                           // 1152\n * supported browsers] than waiting for the entire `flashLoadTimeout` duration                                         // 1153\n * to elapse before detecting that the SWF cannot be loaded. The detection                                             // 1154\n * duration can be anywhere from 10-30 times faster [in supported browsers] by                                         // 1155\n * using this approach.                                                                                                // 1156\n *                                                                                                                     // 1157\n * @returns `undefined`                                                                                                // 1158\n * @private                                                                                                            // 1159\n */                                                                                                                    // 1160\n  var _watchForSwfFallbackContent = function() {                                                                       // 1161\n    var maxWait = _globalConfig.flashLoadTimeout;                                                                      // 1162\n    if (typeof maxWait === \"number\" && maxWait >= 0) {                                                                 // 1163\n      var pollWait = Math.min(1e3, maxWait / 10);                                                                      // 1164\n      var fallbackContentId = _globalConfig.swfObjectId + \"_fallbackContent\";                                          // 1165\n      _swfFallbackCheckInterval = _setInterval(function() {                                                            // 1166\n        var el = _document.getElementById(fallbackContentId);                                                          // 1167\n        if (_isElementVisible(el)) {                                                                                   // 1168\n          _clearTimeoutsAndPolling();                                                                                  // 1169\n          _flashState.deactivated = null;                                                                              // 1170\n          ZeroClipboard.emit({                                                                                         // 1171\n            type: \"error\",                                                                                             // 1172\n            name: \"swf-not-found\"                                                                                      // 1173\n          });                                                                                                          // 1174\n        }                                                                                                              // 1175\n      }, pollWait);                                                                                                    // 1176\n    }                                                                                                                  // 1177\n  };                                                                                                                   // 1178\n  /**                                                                                                                  // 1179\n * Create the HTML bridge element to embed the Flash object into.                                                      // 1180\n * @private                                                                                                            // 1181\n */                                                                                                                    // 1182\n  var _createHtmlBridge = function() {                                                                                 // 1183\n    var container = _document.createElement(\"div\");                                                                    // 1184\n    container.id = _globalConfig.containerId;                                                                          // 1185\n    container.className = _globalConfig.containerClass;                                                                // 1186\n    container.style.position = \"absolute\";                                                                             // 1187\n    container.style.left = \"0px\";                                                                                      // 1188\n    container.style.top = \"-9999px\";                                                                                   // 1189\n    container.style.width = \"1px\";                                                                                     // 1190\n    container.style.height = \"1px\";                                                                                    // 1191\n    container.style.zIndex = \"\" + _getSafeZIndex(_globalConfig.zIndex);                                                // 1192\n    return container;                                                                                                  // 1193\n  };                                                                                                                   // 1194\n  /**                                                                                                                  // 1195\n * Get the HTML element container that wraps the Flash bridge object/element.                                          // 1196\n * @private                                                                                                            // 1197\n */                                                                                                                    // 1198\n  var _getHtmlBridge = function(flashBridge) {                                                                         // 1199\n    var htmlBridge = flashBridge && flashBridge.parentNode;                                                            // 1200\n    while (htmlBridge && htmlBridge.nodeName === \"OBJECT\" && htmlBridge.parentNode) {                                  // 1201\n      htmlBridge = htmlBridge.parentNode;                                                                              // 1202\n    }                                                                                                                  // 1203\n    return htmlBridge || null;                                                                                         // 1204\n  };                                                                                                                   // 1205\n  /**                                                                                                                  // 1206\n * Create the SWF object.                                                                                              // 1207\n *                                                                                                                     // 1208\n * @returns The SWF object reference.                                                                                  // 1209\n * @private                                                                                                            // 1210\n */                                                                                                                    // 1211\n  var _embedSwf = function() {                                                                                         // 1212\n    var len, flashBridge = _flashState.bridge, container = _getHtmlBridge(flashBridge);                                // 1213\n    if (!flashBridge) {                                                                                                // 1214\n      var allowScriptAccess = _determineScriptAccess(_window.location.host, _globalConfig);                            // 1215\n      var allowNetworking = allowScriptAccess === \"never\" ? \"none\" : \"all\";                                            // 1216\n      var flashvars = _vars(_extend({                                                                                  // 1217\n        jsVersion: ZeroClipboard.version                                                                               // 1218\n      }, _globalConfig));                                                                                              // 1219\n      var swfUrl = _globalConfig.swfPath + _cacheBust(_globalConfig.swfPath, _globalConfig);                           // 1220\n      container = _createHtmlBridge();                                                                                 // 1221\n      var divToBeReplaced = _document.createElement(\"div\");                                                            // 1222\n      container.appendChild(divToBeReplaced);                                                                          // 1223\n      _document.body.appendChild(container);                                                                           // 1224\n      var tmpDiv = _document.createElement(\"div\");                                                                     // 1225\n      var usingActiveX = _flashState.pluginType === \"activex\";                                                         // 1226\n      tmpDiv.innerHTML = '<object id=\"' + _globalConfig.swfObjectId + '\" name=\"' + _globalConfig.swfObjectId + '\" ' + 'width=\"100%\" height=\"100%\" ' + (usingActiveX ? 'classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"' : 'type=\"application/x-shockwave-flash\" data=\"' + swfUrl + '\"') + \">\" + (usingActiveX ? '<param name=\"movie\" value=\"' + swfUrl + '\"/>' : \"\") + '<param name=\"allowScriptAccess\" value=\"' + allowScriptAccess + '\"/>' + '<param name=\"allowNetworking\" value=\"' + allowNetworking + '\"/>' + '<param name=\"menu\" value=\"false\"/>' + '<param name=\"wmode\" value=\"transparent\"/>' + '<param name=\"flashvars\" value=\"' + flashvars + '\"/>' + '<div id=\"' + _globalConfig.swfObjectId + '_fallbackContent\">&nbsp;</div>' + \"</object>\";\n      flashBridge = tmpDiv.firstChild;                                                                                 // 1228\n      tmpDiv = null;                                                                                                   // 1229\n      _unwrap(flashBridge).ZeroClipboard = ZeroClipboard;                                                              // 1230\n      container.replaceChild(flashBridge, divToBeReplaced);                                                            // 1231\n      _watchForSwfFallbackContent();                                                                                   // 1232\n    }                                                                                                                  // 1233\n    if (!flashBridge) {                                                                                                // 1234\n      flashBridge = _document[_globalConfig.swfObjectId];                                                              // 1235\n      if (flashBridge && (len = flashBridge.length)) {                                                                 // 1236\n        flashBridge = flashBridge[len - 1];                                                                            // 1237\n      }                                                                                                                // 1238\n      if (!flashBridge && container) {                                                                                 // 1239\n        flashBridge = container.firstChild;                                                                            // 1240\n      }                                                                                                                // 1241\n    }                                                                                                                  // 1242\n    _flashState.bridge = flashBridge || null;                                                                          // 1243\n    return flashBridge;                                                                                                // 1244\n  };                                                                                                                   // 1245\n  /**                                                                                                                  // 1246\n * Destroy the SWF object.                                                                                             // 1247\n * @private                                                                                                            // 1248\n */                                                                                                                    // 1249\n  var _unembedSwf = function() {                                                                                       // 1250\n    var flashBridge = _flashState.bridge;                                                                              // 1251\n    if (flashBridge) {                                                                                                 // 1252\n      var htmlBridge = _getHtmlBridge(flashBridge);                                                                    // 1253\n      if (htmlBridge) {                                                                                                // 1254\n        if (_flashState.pluginType === \"activex\" && \"readyState\" in flashBridge) {                                     // 1255\n          flashBridge.style.display = \"none\";                                                                          // 1256\n          (function removeSwfFromIE() {                                                                                // 1257\n            if (flashBridge.readyState === 4) {                                                                        // 1258\n              for (var prop in flashBridge) {                                                                          // 1259\n                if (typeof flashBridge[prop] === \"function\") {                                                         // 1260\n                  flashBridge[prop] = null;                                                                            // 1261\n                }                                                                                                      // 1262\n              }                                                                                                        // 1263\n              if (flashBridge.parentNode) {                                                                            // 1264\n                flashBridge.parentNode.removeChild(flashBridge);                                                       // 1265\n              }                                                                                                        // 1266\n              if (htmlBridge.parentNode) {                                                                             // 1267\n                htmlBridge.parentNode.removeChild(htmlBridge);                                                         // 1268\n              }                                                                                                        // 1269\n            } else {                                                                                                   // 1270\n              _setTimeout(removeSwfFromIE, 10);                                                                        // 1271\n            }                                                                                                          // 1272\n          })();                                                                                                        // 1273\n        } else {                                                                                                       // 1274\n          if (flashBridge.parentNode) {                                                                                // 1275\n            flashBridge.parentNode.removeChild(flashBridge);                                                           // 1276\n          }                                                                                                            // 1277\n          if (htmlBridge.parentNode) {                                                                                 // 1278\n            htmlBridge.parentNode.removeChild(htmlBridge);                                                             // 1279\n          }                                                                                                            // 1280\n        }                                                                                                              // 1281\n      }                                                                                                                // 1282\n      _clearTimeoutsAndPolling();                                                                                      // 1283\n      _flashState.ready = null;                                                                                        // 1284\n      _flashState.bridge = null;                                                                                       // 1285\n      _flashState.deactivated = null;                                                                                  // 1286\n      _zcSwfVersion = undefined;                                                                                       // 1287\n    }                                                                                                                  // 1288\n  };                                                                                                                   // 1289\n  /**                                                                                                                  // 1290\n * Map the data format names of the \"clipData\" to Flash-friendly names.                                                // 1291\n *                                                                                                                     // 1292\n * @returns A new transformed object.                                                                                  // 1293\n * @private                                                                                                            // 1294\n */                                                                                                                    // 1295\n  var _mapClipDataToFlash = function(clipData) {                                                                       // 1296\n    var newClipData = {}, formatMap = {};                                                                              // 1297\n    if (!(typeof clipData === \"object\" && clipData)) {                                                                 // 1298\n      return;                                                                                                          // 1299\n    }                                                                                                                  // 1300\n    for (var dataFormat in clipData) {                                                                                 // 1301\n      if (dataFormat && _hasOwn.call(clipData, dataFormat) && typeof clipData[dataFormat] === \"string\" && clipData[dataFormat]) {\n        switch (dataFormat.toLowerCase()) {                                                                            // 1303\n         case \"text/plain\":                                                                                            // 1304\n         case \"text\":                                                                                                  // 1305\n         case \"air:text\":                                                                                              // 1306\n         case \"flash:text\":                                                                                            // 1307\n          newClipData.text = clipData[dataFormat];                                                                     // 1308\n          formatMap.text = dataFormat;                                                                                 // 1309\n          break;                                                                                                       // 1310\n                                                                                                                       // 1311\n         case \"text/html\":                                                                                             // 1312\n         case \"html\":                                                                                                  // 1313\n         case \"air:html\":                                                                                              // 1314\n         case \"flash:html\":                                                                                            // 1315\n          newClipData.html = clipData[dataFormat];                                                                     // 1316\n          formatMap.html = dataFormat;                                                                                 // 1317\n          break;                                                                                                       // 1318\n                                                                                                                       // 1319\n         case \"application/rtf\":                                                                                       // 1320\n         case \"text/rtf\":                                                                                              // 1321\n         case \"rtf\":                                                                                                   // 1322\n         case \"richtext\":                                                                                              // 1323\n         case \"air:rtf\":                                                                                               // 1324\n         case \"flash:rtf\":                                                                                             // 1325\n          newClipData.rtf = clipData[dataFormat];                                                                      // 1326\n          formatMap.rtf = dataFormat;                                                                                  // 1327\n          break;                                                                                                       // 1328\n                                                                                                                       // 1329\n         default:                                                                                                      // 1330\n          break;                                                                                                       // 1331\n        }                                                                                                              // 1332\n      }                                                                                                                // 1333\n    }                                                                                                                  // 1334\n    return {                                                                                                           // 1335\n      data: newClipData,                                                                                               // 1336\n      formatMap: formatMap                                                                                             // 1337\n    };                                                                                                                 // 1338\n  };                                                                                                                   // 1339\n  /**                                                                                                                  // 1340\n * Map the data format names from Flash-friendly names back to their original \"clipData\" names (via a format mapping). // 1341\n *                                                                                                                     // 1342\n * @returns A new transformed object.                                                                                  // 1343\n * @private                                                                                                            // 1344\n */                                                                                                                    // 1345\n  var _mapClipResultsFromFlash = function(clipResults, formatMap) {                                                    // 1346\n    if (!(typeof clipResults === \"object\" && clipResults && typeof formatMap === \"object\" && formatMap)) {             // 1347\n      return clipResults;                                                                                              // 1348\n    }                                                                                                                  // 1349\n    var newResults = {};                                                                                               // 1350\n    for (var prop in clipResults) {                                                                                    // 1351\n      if (_hasOwn.call(clipResults, prop)) {                                                                           // 1352\n        if (prop === \"errors\") {                                                                                       // 1353\n          newResults[prop] = clipResults[prop] ? clipResults[prop].slice() : [];                                       // 1354\n          for (var i = 0, len = newResults[prop].length; i < len; i++) {                                               // 1355\n            newResults[prop][i].format = formatMap[newResults[prop][i].format];                                        // 1356\n          }                                                                                                            // 1357\n        } else if (prop !== \"success\" && prop !== \"data\") {                                                            // 1358\n          newResults[prop] = clipResults[prop];                                                                        // 1359\n        } else {                                                                                                       // 1360\n          newResults[prop] = {};                                                                                       // 1361\n          var tmpHash = clipResults[prop];                                                                             // 1362\n          for (var dataFormat in tmpHash) {                                                                            // 1363\n            if (dataFormat && _hasOwn.call(tmpHash, dataFormat) && _hasOwn.call(formatMap, dataFormat)) {              // 1364\n              newResults[prop][formatMap[dataFormat]] = tmpHash[dataFormat];                                           // 1365\n            }                                                                                                          // 1366\n          }                                                                                                            // 1367\n        }                                                                                                              // 1368\n      }                                                                                                                // 1369\n    }                                                                                                                  // 1370\n    return newResults;                                                                                                 // 1371\n  };                                                                                                                   // 1372\n  /**                                                                                                                  // 1373\n * Will look at a path, and will create a \"?noCache={time}\" or \"&noCache={time}\"                                       // 1374\n * query param string to return. Does NOT append that string to the original path.                                     // 1375\n * This is useful because ExternalInterface often breaks when a Flash SWF is cached.                                   // 1376\n *                                                                                                                     // 1377\n * @returns The `noCache` query param with necessary \"?\"/\"&\" prefix.                                                   // 1378\n * @private                                                                                                            // 1379\n */                                                                                                                    // 1380\n  var _cacheBust = function(path, options) {                                                                           // 1381\n    var cacheBust = options == null || options && options.cacheBust === true;                                          // 1382\n    if (cacheBust) {                                                                                                   // 1383\n      return (path.indexOf(\"?\") === -1 ? \"?\" : \"&\") + \"noCache=\" + _now();                                             // 1384\n    } else {                                                                                                           // 1385\n      return \"\";                                                                                                       // 1386\n    }                                                                                                                  // 1387\n  };                                                                                                                   // 1388\n  /**                                                                                                                  // 1389\n * Creates a query string for the FlashVars param.                                                                     // 1390\n * Does NOT include the cache-busting query param.                                                                     // 1391\n *                                                                                                                     // 1392\n * @returns FlashVars query string                                                                                     // 1393\n * @private                                                                                                            // 1394\n */                                                                                                                    // 1395\n  var _vars = function(options) {                                                                                      // 1396\n    var i, len, domain, domains, str = \"\", trustedOriginsExpanded = [];                                                // 1397\n    if (options.trustedDomains) {                                                                                      // 1398\n      if (typeof options.trustedDomains === \"string\") {                                                                // 1399\n        domains = [ options.trustedDomains ];                                                                          // 1400\n      } else if (typeof options.trustedDomains === \"object\" && \"length\" in options.trustedDomains) {                   // 1401\n        domains = options.trustedDomains;                                                                              // 1402\n      }                                                                                                                // 1403\n    }                                                                                                                  // 1404\n    if (domains && domains.length) {                                                                                   // 1405\n      for (i = 0, len = domains.length; i < len; i++) {                                                                // 1406\n        if (_hasOwn.call(domains, i) && domains[i] && typeof domains[i] === \"string\") {                                // 1407\n          domain = _extractDomain(domains[i]);                                                                         // 1408\n          if (!domain) {                                                                                               // 1409\n            continue;                                                                                                  // 1410\n          }                                                                                                            // 1411\n          if (domain === \"*\") {                                                                                        // 1412\n            trustedOriginsExpanded.length = 0;                                                                         // 1413\n            trustedOriginsExpanded.push(domain);                                                                       // 1414\n            break;                                                                                                     // 1415\n          }                                                                                                            // 1416\n          trustedOriginsExpanded.push.apply(trustedOriginsExpanded, [ domain, \"//\" + domain, _window.location.protocol + \"//\" + domain ]);\n        }                                                                                                              // 1418\n      }                                                                                                                // 1419\n    }                                                                                                                  // 1420\n    if (trustedOriginsExpanded.length) {                                                                               // 1421\n      str += \"trustedOrigins=\" + _encodeURIComponent(trustedOriginsExpanded.join(\",\"));                                // 1422\n    }                                                                                                                  // 1423\n    if (options.forceEnhancedClipboard === true) {                                                                     // 1424\n      str += (str ? \"&\" : \"\") + \"forceEnhancedClipboard=true\";                                                         // 1425\n    }                                                                                                                  // 1426\n    if (typeof options.swfObjectId === \"string\" && options.swfObjectId) {                                              // 1427\n      str += (str ? \"&\" : \"\") + \"swfObjectId=\" + _encodeURIComponent(options.swfObjectId);                             // 1428\n    }                                                                                                                  // 1429\n    if (typeof options.jsVersion === \"string\" && options.jsVersion) {                                                  // 1430\n      str += (str ? \"&\" : \"\") + \"jsVersion=\" + _encodeURIComponent(options.jsVersion);                                 // 1431\n    }                                                                                                                  // 1432\n    return str;                                                                                                        // 1433\n  };                                                                                                                   // 1434\n  /**                                                                                                                  // 1435\n * Extract the domain (e.g. \"github.com\") from an origin (e.g. \"https://github.com\") or                                // 1436\n * URL (e.g. \"https://github.com/zeroclipboard/zeroclipboard/\").                                                       // 1437\n *                                                                                                                     // 1438\n * @returns the domain                                                                                                 // 1439\n * @private                                                                                                            // 1440\n */                                                                                                                    // 1441\n  var _extractDomain = function(originOrUrl) {                                                                         // 1442\n    if (originOrUrl == null || originOrUrl === \"\") {                                                                   // 1443\n      return null;                                                                                                     // 1444\n    }                                                                                                                  // 1445\n    originOrUrl = originOrUrl.replace(/^\\s+|\\s+$/g, \"\");                                                               // 1446\n    if (originOrUrl === \"\") {                                                                                          // 1447\n      return null;                                                                                                     // 1448\n    }                                                                                                                  // 1449\n    var protocolIndex = originOrUrl.indexOf(\"//\");                                                                     // 1450\n    originOrUrl = protocolIndex === -1 ? originOrUrl : originOrUrl.slice(protocolIndex + 2);                           // 1451\n    var pathIndex = originOrUrl.indexOf(\"/\");                                                                          // 1452\n    originOrUrl = pathIndex === -1 ? originOrUrl : protocolIndex === -1 || pathIndex === 0 ? null : originOrUrl.slice(0, pathIndex);\n    if (originOrUrl && originOrUrl.slice(-4).toLowerCase() === \".swf\") {                                               // 1454\n      return null;                                                                                                     // 1455\n    }                                                                                                                  // 1456\n    return originOrUrl || null;                                                                                        // 1457\n  };                                                                                                                   // 1458\n  /**                                                                                                                  // 1459\n * Set `allowScriptAccess` based on `trustedDomains` and `window.location.host` vs. `swfPath`.                         // 1460\n *                                                                                                                     // 1461\n * @returns The appropriate script access level.                                                                       // 1462\n * @private                                                                                                            // 1463\n */                                                                                                                    // 1464\n  var _determineScriptAccess = function() {                                                                            // 1465\n    var _extractAllDomains = function(origins) {                                                                       // 1466\n      var i, len, tmp, resultsArray = [];                                                                              // 1467\n      if (typeof origins === \"string\") {                                                                               // 1468\n        origins = [ origins ];                                                                                         // 1469\n      }                                                                                                                // 1470\n      if (!(typeof origins === \"object\" && origins && typeof origins.length === \"number\")) {                           // 1471\n        return resultsArray;                                                                                           // 1472\n      }                                                                                                                // 1473\n      for (i = 0, len = origins.length; i < len; i++) {                                                                // 1474\n        if (_hasOwn.call(origins, i) && (tmp = _extractDomain(origins[i]))) {                                          // 1475\n          if (tmp === \"*\") {                                                                                           // 1476\n            resultsArray.length = 0;                                                                                   // 1477\n            resultsArray.push(\"*\");                                                                                    // 1478\n            break;                                                                                                     // 1479\n          }                                                                                                            // 1480\n          if (resultsArray.indexOf(tmp) === -1) {                                                                      // 1481\n            resultsArray.push(tmp);                                                                                    // 1482\n          }                                                                                                            // 1483\n        }                                                                                                              // 1484\n      }                                                                                                                // 1485\n      return resultsArray;                                                                                             // 1486\n    };                                                                                                                 // 1487\n    return function(currentDomain, configOptions) {                                                                    // 1488\n      var swfDomain = _extractDomain(configOptions.swfPath);                                                           // 1489\n      if (swfDomain === null) {                                                                                        // 1490\n        swfDomain = currentDomain;                                                                                     // 1491\n      }                                                                                                                // 1492\n      var trustedDomains = _extractAllDomains(configOptions.trustedDomains);                                           // 1493\n      var len = trustedDomains.length;                                                                                 // 1494\n      if (len > 0) {                                                                                                   // 1495\n        if (len === 1 && trustedDomains[0] === \"*\") {                                                                  // 1496\n          return \"always\";                                                                                             // 1497\n        }                                                                                                              // 1498\n        if (trustedDomains.indexOf(currentDomain) !== -1) {                                                            // 1499\n          if (len === 1 && currentDomain === swfDomain) {                                                              // 1500\n            return \"sameDomain\";                                                                                       // 1501\n          }                                                                                                            // 1502\n          return \"always\";                                                                                             // 1503\n        }                                                                                                              // 1504\n      }                                                                                                                // 1505\n      return \"never\";                                                                                                  // 1506\n    };                                                                                                                 // 1507\n  }();                                                                                                                 // 1508\n  /**                                                                                                                  // 1509\n * Get the currently active/focused DOM element.                                                                       // 1510\n *                                                                                                                     // 1511\n * @returns the currently active/focused element, or `null`                                                            // 1512\n * @private                                                                                                            // 1513\n */                                                                                                                    // 1514\n  var _safeActiveElement = function() {                                                                                // 1515\n    try {                                                                                                              // 1516\n      return _document.activeElement;                                                                                  // 1517\n    } catch (err) {                                                                                                    // 1518\n      return null;                                                                                                     // 1519\n    }                                                                                                                  // 1520\n  };                                                                                                                   // 1521\n  /**                                                                                                                  // 1522\n * Add a class to an element, if it doesn't already have it.                                                           // 1523\n *                                                                                                                     // 1524\n * @returns The element, with its new class added.                                                                     // 1525\n * @private                                                                                                            // 1526\n */                                                                                                                    // 1527\n  var _addClass = function(element, value) {                                                                           // 1528\n    var c, cl, className, classNames = [];                                                                             // 1529\n    if (typeof value === \"string\" && value) {                                                                          // 1530\n      classNames = value.split(/\\s+/);                                                                                 // 1531\n    }                                                                                                                  // 1532\n    if (element && element.nodeType === 1 && classNames.length > 0) {                                                  // 1533\n      className = (\" \" + (element.className || \"\") + \" \").replace(/[\\t\\r\\n\\f]/g, \" \");                                 // 1534\n      for (c = 0, cl = classNames.length; c < cl; c++) {                                                               // 1535\n        if (className.indexOf(\" \" + classNames[c] + \" \") === -1) {                                                     // 1536\n          className += classNames[c] + \" \";                                                                            // 1537\n        }                                                                                                              // 1538\n      }                                                                                                                // 1539\n      className = className.replace(/^\\s+|\\s+$/g, \"\");                                                                 // 1540\n      if (className !== element.className) {                                                                           // 1541\n        element.className = className;                                                                                 // 1542\n      }                                                                                                                // 1543\n    }                                                                                                                  // 1544\n    return element;                                                                                                    // 1545\n  };                                                                                                                   // 1546\n  /**                                                                                                                  // 1547\n * Remove a class from an element, if it has it.                                                                       // 1548\n *                                                                                                                     // 1549\n * @returns The element, with its class removed.                                                                       // 1550\n * @private                                                                                                            // 1551\n */                                                                                                                    // 1552\n  var _removeClass = function(element, value) {                                                                        // 1553\n    var c, cl, className, classNames = [];                                                                             // 1554\n    if (typeof value === \"string\" && value) {                                                                          // 1555\n      classNames = value.split(/\\s+/);                                                                                 // 1556\n    }                                                                                                                  // 1557\n    if (element && element.nodeType === 1 && classNames.length > 0) {                                                  // 1558\n      if (element.className) {                                                                                         // 1559\n        className = (\" \" + element.className + \" \").replace(/[\\t\\r\\n\\f]/g, \" \");                                       // 1560\n        for (c = 0, cl = classNames.length; c < cl; c++) {                                                             // 1561\n          className = className.replace(\" \" + classNames[c] + \" \", \" \");                                               // 1562\n        }                                                                                                              // 1563\n        className = className.replace(/^\\s+|\\s+$/g, \"\");                                                               // 1564\n        if (className !== element.className) {                                                                         // 1565\n          element.className = className;                                                                               // 1566\n        }                                                                                                              // 1567\n      }                                                                                                                // 1568\n    }                                                                                                                  // 1569\n    return element;                                                                                                    // 1570\n  };                                                                                                                   // 1571\n  /**                                                                                                                  // 1572\n * Attempt to interpret the element's CSS styling. If `prop` is `\"cursor\"`,                                            // 1573\n * then we assume that it should be a hand (\"pointer\") cursor if the element                                           // 1574\n * is an anchor element (\"a\" tag).                                                                                     // 1575\n *                                                                                                                     // 1576\n * @returns The computed style property.                                                                               // 1577\n * @private                                                                                                            // 1578\n */                                                                                                                    // 1579\n  var _getStyle = function(el, prop) {                                                                                 // 1580\n    var value = _getComputedStyle(el, null).getPropertyValue(prop);                                                    // 1581\n    if (prop === \"cursor\") {                                                                                           // 1582\n      if (!value || value === \"auto\") {                                                                                // 1583\n        if (el.nodeName === \"A\") {                                                                                     // 1584\n          return \"pointer\";                                                                                            // 1585\n        }                                                                                                              // 1586\n      }                                                                                                                // 1587\n    }                                                                                                                  // 1588\n    return value;                                                                                                      // 1589\n  };                                                                                                                   // 1590\n  /**                                                                                                                  // 1591\n * Get the absolutely positioned coordinates of a DOM element.                                                         // 1592\n *                                                                                                                     // 1593\n * @returns Object containing the element's position, width, and height.                                               // 1594\n * @private                                                                                                            // 1595\n */                                                                                                                    // 1596\n  var _getElementPosition = function(el) {                                                                             // 1597\n    var pos = {                                                                                                        // 1598\n      left: 0,                                                                                                         // 1599\n      top: 0,                                                                                                          // 1600\n      width: 0,                                                                                                        // 1601\n      height: 0                                                                                                        // 1602\n    };                                                                                                                 // 1603\n    if (el.getBoundingClientRect) {                                                                                    // 1604\n      var elRect = el.getBoundingClientRect();                                                                         // 1605\n      var pageXOffset = _window.pageXOffset;                                                                           // 1606\n      var pageYOffset = _window.pageYOffset;                                                                           // 1607\n      var leftBorderWidth = _document.documentElement.clientLeft || 0;                                                 // 1608\n      var topBorderWidth = _document.documentElement.clientTop || 0;                                                   // 1609\n      var leftBodyOffset = 0;                                                                                          // 1610\n      var topBodyOffset = 0;                                                                                           // 1611\n      if (_getStyle(_document.body, \"position\") === \"relative\") {                                                      // 1612\n        var bodyRect = _document.body.getBoundingClientRect();                                                         // 1613\n        var htmlRect = _document.documentElement.getBoundingClientRect();                                              // 1614\n        leftBodyOffset = bodyRect.left - htmlRect.left || 0;                                                           // 1615\n        topBodyOffset = bodyRect.top - htmlRect.top || 0;                                                              // 1616\n      }                                                                                                                // 1617\n      pos.left = elRect.left + pageXOffset - leftBorderWidth - leftBodyOffset;                                         // 1618\n      pos.top = elRect.top + pageYOffset - topBorderWidth - topBodyOffset;                                             // 1619\n      pos.width = \"width\" in elRect ? elRect.width : elRect.right - elRect.left;                                       // 1620\n      pos.height = \"height\" in elRect ? elRect.height : elRect.bottom - elRect.top;                                    // 1621\n    }                                                                                                                  // 1622\n    return pos;                                                                                                        // 1623\n  };                                                                                                                   // 1624\n  /**                                                                                                                  // 1625\n * Determine is an element is visible somewhere within the document (page).                                            // 1626\n *                                                                                                                     // 1627\n * @returns Boolean                                                                                                    // 1628\n * @private                                                                                                            // 1629\n */                                                                                                                    // 1630\n  var _isElementVisible = function(el) {                                                                               // 1631\n    if (!el) {                                                                                                         // 1632\n      return false;                                                                                                    // 1633\n    }                                                                                                                  // 1634\n    var styles = _getComputedStyle(el, null);                                                                          // 1635\n    if (!styles) {                                                                                                     // 1636\n      return false;                                                                                                    // 1637\n    }                                                                                                                  // 1638\n    var hasCssHeight = _parseFloat(styles.height) > 0;                                                                 // 1639\n    var hasCssWidth = _parseFloat(styles.width) > 0;                                                                   // 1640\n    var hasCssTop = _parseFloat(styles.top) >= 0;                                                                      // 1641\n    var hasCssLeft = _parseFloat(styles.left) >= 0;                                                                    // 1642\n    var cssKnows = hasCssHeight && hasCssWidth && hasCssTop && hasCssLeft;                                             // 1643\n    var rect = cssKnows ? null : _getElementPosition(el);                                                              // 1644\n    var isVisible = styles.display !== \"none\" && styles.visibility !== \"collapse\" && (cssKnows || !!rect && (hasCssHeight || rect.height > 0) && (hasCssWidth || rect.width > 0) && (hasCssTop || rect.top >= 0) && (hasCssLeft || rect.left >= 0));\n    return isVisible;                                                                                                  // 1646\n  };                                                                                                                   // 1647\n  /**                                                                                                                  // 1648\n * Clear all existing timeouts and interval polling delegates.                                                         // 1649\n *                                                                                                                     // 1650\n * @returns `undefined`                                                                                                // 1651\n * @private                                                                                                            // 1652\n */                                                                                                                    // 1653\n  var _clearTimeoutsAndPolling = function() {                                                                          // 1654\n    _clearTimeout(_flashCheckTimeout);                                                                                 // 1655\n    _flashCheckTimeout = 0;                                                                                            // 1656\n    _clearInterval(_swfFallbackCheckInterval);                                                                         // 1657\n    _swfFallbackCheckInterval = 0;                                                                                     // 1658\n  };                                                                                                                   // 1659\n  /**                                                                                                                  // 1660\n * Reposition the Flash object to cover the currently activated element.                                               // 1661\n *                                                                                                                     // 1662\n * @returns `undefined`                                                                                                // 1663\n * @private                                                                                                            // 1664\n */                                                                                                                    // 1665\n  var _reposition = function() {                                                                                       // 1666\n    var htmlBridge;                                                                                                    // 1667\n    if (_currentElement && (htmlBridge = _getHtmlBridge(_flashState.bridge))) {                                        // 1668\n      var pos = _getElementPosition(_currentElement);                                                                  // 1669\n      _extend(htmlBridge.style, {                                                                                      // 1670\n        width: pos.width + \"px\",                                                                                       // 1671\n        height: pos.height + \"px\",                                                                                     // 1672\n        top: pos.top + \"px\",                                                                                           // 1673\n        left: pos.left + \"px\",                                                                                         // 1674\n        zIndex: \"\" + _getSafeZIndex(_globalConfig.zIndex)                                                              // 1675\n      });                                                                                                              // 1676\n    }                                                                                                                  // 1677\n  };                                                                                                                   // 1678\n  /**                                                                                                                  // 1679\n * Sends a signal to the Flash object to display the hand cursor if `true`.                                            // 1680\n *                                                                                                                     // 1681\n * @returns `undefined`                                                                                                // 1682\n * @private                                                                                                            // 1683\n */                                                                                                                    // 1684\n  var _setHandCursor = function(enabled) {                                                                             // 1685\n    if (_flashState.ready === true) {                                                                                  // 1686\n      if (_flashState.bridge && typeof _flashState.bridge.setHandCursor === \"function\") {                              // 1687\n        _flashState.bridge.setHandCursor(enabled);                                                                     // 1688\n      } else {                                                                                                         // 1689\n        _flashState.ready = false;                                                                                     // 1690\n      }                                                                                                                // 1691\n    }                                                                                                                  // 1692\n  };                                                                                                                   // 1693\n  /**                                                                                                                  // 1694\n * Get a safe value for `zIndex`                                                                                       // 1695\n *                                                                                                                     // 1696\n * @returns an integer, or \"auto\"                                                                                      // 1697\n * @private                                                                                                            // 1698\n */                                                                                                                    // 1699\n  var _getSafeZIndex = function(val) {                                                                                 // 1700\n    if (/^(?:auto|inherit)$/.test(val)) {                                                                              // 1701\n      return val;                                                                                                      // 1702\n    }                                                                                                                  // 1703\n    var zIndex;                                                                                                        // 1704\n    if (typeof val === \"number\" && !_isNaN(val)) {                                                                     // 1705\n      zIndex = val;                                                                                                    // 1706\n    } else if (typeof val === \"string\") {                                                                              // 1707\n      zIndex = _getSafeZIndex(_parseInt(val, 10));                                                                     // 1708\n    }                                                                                                                  // 1709\n    return typeof zIndex === \"number\" ? zIndex : \"auto\";                                                               // 1710\n  };                                                                                                                   // 1711\n  /**                                                                                                                  // 1712\n * Ensure OS-compliant line endings, i.e. \"\\r\\n\" on Windows, \"\\n\" elsewhere                                            // 1713\n *                                                                                                                     // 1714\n * @returns string                                                                                                     // 1715\n * @private                                                                                                            // 1716\n */                                                                                                                    // 1717\n  var _fixLineEndings = function(content) {                                                                            // 1718\n    var replaceRegex = /(\\r\\n|\\r|\\n)/g;                                                                                // 1719\n    if (typeof content === \"string\" && _globalConfig.fixLineEndings === true) {                                        // 1720\n      if (_isWindows()) {                                                                                              // 1721\n        if (/((^|[^\\r])\\n|\\r([^\\n]|$))/.test(content)) {                                                               // 1722\n          content = content.replace(replaceRegex, \"\\r\\n\");                                                             // 1723\n        }                                                                                                              // 1724\n      } else if (/\\r/.test(content)) {                                                                                 // 1725\n        content = content.replace(replaceRegex, \"\\n\");                                                                 // 1726\n      }                                                                                                                // 1727\n    }                                                                                                                  // 1728\n    return content;                                                                                                    // 1729\n  };                                                                                                                   // 1730\n  /**                                                                                                                  // 1731\n * Attempt to detect if ZeroClipboard is executing inside of a sandboxed iframe.                                       // 1732\n * If it is, Flash Player cannot be used, so ZeroClipboard is dead in the water.                                       // 1733\n *                                                                                                                     // 1734\n * @see {@link http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Dec/0002.html}                            // 1735\n * @see {@link https://github.com/zeroclipboard/zeroclipboard/issues/511}                                              // 1736\n * @see {@link http://zeroclipboard.org/test-iframes.html}                                                             // 1737\n *                                                                                                                     // 1738\n * @returns `true` (is sandboxed), `false` (is not sandboxed), or `null` (uncertain)                                   // 1739\n * @private                                                                                                            // 1740\n */                                                                                                                    // 1741\n  var _detectSandbox = function(doNotReassessFlashSupport) {                                                           // 1742\n    var effectiveScriptOrigin, frame, frameError, previousState = _flashState.sandboxed, isSandboxed = null;           // 1743\n    doNotReassessFlashSupport = doNotReassessFlashSupport === true;                                                    // 1744\n    if (_pageIsFramed === false) {                                                                                     // 1745\n      isSandboxed = false;                                                                                             // 1746\n    } else {                                                                                                           // 1747\n      try {                                                                                                            // 1748\n        frame = window.frameElement || null;                                                                           // 1749\n      } catch (e) {                                                                                                    // 1750\n        frameError = {                                                                                                 // 1751\n          name: e.name,                                                                                                // 1752\n          message: e.message                                                                                           // 1753\n        };                                                                                                             // 1754\n      }                                                                                                                // 1755\n      if (frame && frame.nodeType === 1 && frame.nodeName === \"IFRAME\") {                                              // 1756\n        try {                                                                                                          // 1757\n          isSandboxed = frame.hasAttribute(\"sandbox\");                                                                 // 1758\n        } catch (e) {                                                                                                  // 1759\n          isSandboxed = null;                                                                                          // 1760\n        }                                                                                                              // 1761\n      } else {                                                                                                         // 1762\n        try {                                                                                                          // 1763\n          effectiveScriptOrigin = document.domain || null;                                                             // 1764\n        } catch (e) {                                                                                                  // 1765\n          effectiveScriptOrigin = null;                                                                                // 1766\n        }                                                                                                              // 1767\n        if (effectiveScriptOrigin === null || frameError && frameError.name === \"SecurityError\" && /(^|[\\s\\(\\[@])sandbox(es|ed|ing|[\\s\\.,!\\)\\]@]|$)/.test(frameError.message.toLowerCase())) {\n          isSandboxed = true;                                                                                          // 1769\n        }                                                                                                              // 1770\n      }                                                                                                                // 1771\n    }                                                                                                                  // 1772\n    _flashState.sandboxed = isSandboxed;                                                                               // 1773\n    if (previousState !== isSandboxed && !doNotReassessFlashSupport) {                                                 // 1774\n      _detectFlashSupport(_ActiveXObject);                                                                             // 1775\n    }                                                                                                                  // 1776\n    return isSandboxed;                                                                                                // 1777\n  };                                                                                                                   // 1778\n  /**                                                                                                                  // 1779\n * Detect the Flash Player status, version, and plugin type.                                                           // 1780\n *                                                                                                                     // 1781\n * @see {@link https://code.google.com/p/doctype-mirror/wiki/ArticleDetectFlash#The_code}                              // 1782\n * @see {@link http://stackoverflow.com/questions/12866060/detecting-pepper-ppapi-flash-with-javascript}               // 1783\n *                                                                                                                     // 1784\n * @returns `undefined`                                                                                                // 1785\n * @private                                                                                                            // 1786\n */                                                                                                                    // 1787\n  var _detectFlashSupport = function(ActiveXObject) {                                                                  // 1788\n    var plugin, ax, mimeType, hasFlash = false, isActiveX = false, isPPAPI = false, flashVersion = \"\";                 // 1789\n    /**                                                                                                                // 1790\n   * Derived from Apple's suggested sniffer.                                                                           // 1791\n   * @param {String} desc e.g. \"Shockwave Flash 7.0 r61\"                                                               // 1792\n   * @returns {String} \"7.0.61\"                                                                                        // 1793\n   * @private                                                                                                          // 1794\n   */                                                                                                                  // 1795\n    function parseFlashVersion(desc) {                                                                                 // 1796\n      var matches = desc.match(/[\\d]+/g);                                                                              // 1797\n      matches.length = 3;                                                                                              // 1798\n      return matches.join(\".\");                                                                                        // 1799\n    }                                                                                                                  // 1800\n    function isPepperFlash(flashPlayerFileName) {                                                                      // 1801\n      return !!flashPlayerFileName && (flashPlayerFileName = flashPlayerFileName.toLowerCase()) && (/^(pepflashplayer\\.dll|libpepflashplayer\\.so|pepperflashplayer\\.plugin)$/.test(flashPlayerFileName) || flashPlayerFileName.slice(-13) === \"chrome.plugin\");\n    }                                                                                                                  // 1803\n    function inspectPlugin(plugin) {                                                                                   // 1804\n      if (plugin) {                                                                                                    // 1805\n        hasFlash = true;                                                                                               // 1806\n        if (plugin.version) {                                                                                          // 1807\n          flashVersion = parseFlashVersion(plugin.version);                                                            // 1808\n        }                                                                                                              // 1809\n        if (!flashVersion && plugin.description) {                                                                     // 1810\n          flashVersion = parseFlashVersion(plugin.description);                                                        // 1811\n        }                                                                                                              // 1812\n        if (plugin.filename) {                                                                                         // 1813\n          isPPAPI = isPepperFlash(plugin.filename);                                                                    // 1814\n        }                                                                                                              // 1815\n      }                                                                                                                // 1816\n    }                                                                                                                  // 1817\n    if (_navigator.plugins && _navigator.plugins.length) {                                                             // 1818\n      plugin = _navigator.plugins[\"Shockwave Flash\"];                                                                  // 1819\n      inspectPlugin(plugin);                                                                                           // 1820\n      if (_navigator.plugins[\"Shockwave Flash 2.0\"]) {                                                                 // 1821\n        hasFlash = true;                                                                                               // 1822\n        flashVersion = \"2.0.0.11\";                                                                                     // 1823\n      }                                                                                                                // 1824\n    } else if (_navigator.mimeTypes && _navigator.mimeTypes.length) {                                                  // 1825\n      mimeType = _navigator.mimeTypes[\"application/x-shockwave-flash\"];                                                // 1826\n      plugin = mimeType && mimeType.enabledPlugin;                                                                     // 1827\n      inspectPlugin(plugin);                                                                                           // 1828\n    } else if (typeof ActiveXObject !== \"undefined\") {                                                                 // 1829\n      isActiveX = true;                                                                                                // 1830\n      try {                                                                                                            // 1831\n        ax = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash.7\");                                                     // 1832\n        hasFlash = true;                                                                                               // 1833\n        flashVersion = parseFlashVersion(ax.GetVariable(\"$version\"));                                                  // 1834\n      } catch (e1) {                                                                                                   // 1835\n        try {                                                                                                          // 1836\n          ax = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash.6\");                                                   // 1837\n          hasFlash = true;                                                                                             // 1838\n          flashVersion = \"6.0.21\";                                                                                     // 1839\n        } catch (e2) {                                                                                                 // 1840\n          try {                                                                                                        // 1841\n            ax = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\");                                                   // 1842\n            hasFlash = true;                                                                                           // 1843\n            flashVersion = parseFlashVersion(ax.GetVariable(\"$version\"));                                              // 1844\n          } catch (e3) {                                                                                               // 1845\n            isActiveX = false;                                                                                         // 1846\n          }                                                                                                            // 1847\n        }                                                                                                              // 1848\n      }                                                                                                                // 1849\n    }                                                                                                                  // 1850\n    _flashState.disabled = hasFlash !== true;                                                                          // 1851\n    _flashState.outdated = flashVersion && _parseFloat(flashVersion) < _parseFloat(_minimumFlashVersion);              // 1852\n    _flashState.version = flashVersion || \"0.0.0\";                                                                     // 1853\n    _flashState.pluginType = isPPAPI ? \"pepper\" : isActiveX ? \"activex\" : hasFlash ? \"netscape\" : \"unknown\";           // 1854\n  };                                                                                                                   // 1855\n  /**                                                                                                                  // 1856\n * Invoke the Flash detection algorithms immediately upon inclusion so we're not waiting later.                        // 1857\n */                                                                                                                    // 1858\n  _detectFlashSupport(_ActiveXObject);                                                                                 // 1859\n  /**                                                                                                                  // 1860\n * Always assess the `sandboxed` state of the page at important Flash-related moments.                                 // 1861\n */                                                                                                                    // 1862\n  _detectSandbox(true);                                                                                                // 1863\n  /**                                                                                                                  // 1864\n * A shell constructor for `ZeroClipboard` client instances.                                                           // 1865\n *                                                                                                                     // 1866\n * @constructor                                                                                                        // 1867\n */                                                                                                                    // 1868\n  var ZeroClipboard = function() {                                                                                     // 1869\n    if (!(this instanceof ZeroClipboard)) {                                                                            // 1870\n      return new ZeroClipboard();                                                                                      // 1871\n    }                                                                                                                  // 1872\n    if (typeof ZeroClipboard._createClient === \"function\") {                                                           // 1873\n      ZeroClipboard._createClient.apply(this, _args(arguments));                                                       // 1874\n    }                                                                                                                  // 1875\n  };                                                                                                                   // 1876\n  /**                                                                                                                  // 1877\n * The ZeroClipboard library's version number.                                                                         // 1878\n *                                                                                                                     // 1879\n * @static                                                                                                             // 1880\n * @readonly                                                                                                           // 1881\n * @property {string}                                                                                                  // 1882\n */                                                                                                                    // 1883\n  _defineProperty(ZeroClipboard, \"version\", {                                                                          // 1884\n    value: \"2.3.0-beta.1\",                                                                                             // 1885\n    writable: false,                                                                                                   // 1886\n    configurable: true,                                                                                                // 1887\n    enumerable: true                                                                                                   // 1888\n  });                                                                                                                  // 1889\n  /**                                                                                                                  // 1890\n * Update or get a copy of the ZeroClipboard global configuration.                                                     // 1891\n * Returns a copy of the current/updated configuration.                                                                // 1892\n *                                                                                                                     // 1893\n * @returns Object                                                                                                     // 1894\n * @static                                                                                                             // 1895\n */                                                                                                                    // 1896\n  ZeroClipboard.config = function() {                                                                                  // 1897\n    return _config.apply(this, _args(arguments));                                                                      // 1898\n  };                                                                                                                   // 1899\n  /**                                                                                                                  // 1900\n * Diagnostic method that describes the state of the browser, Flash Player, and ZeroClipboard.                         // 1901\n *                                                                                                                     // 1902\n * @returns Object                                                                                                     // 1903\n * @static                                                                                                             // 1904\n */                                                                                                                    // 1905\n  ZeroClipboard.state = function() {                                                                                   // 1906\n    return _state.apply(this, _args(arguments));                                                                       // 1907\n  };                                                                                                                   // 1908\n  /**                                                                                                                  // 1909\n * Check if Flash is unusable for any reason: disabled, outdated, deactivated, etc.                                    // 1910\n *                                                                                                                     // 1911\n * @returns Boolean                                                                                                    // 1912\n * @static                                                                                                             // 1913\n */                                                                                                                    // 1914\n  ZeroClipboard.isFlashUnusable = function() {                                                                         // 1915\n    return _isFlashUnusable.apply(this, _args(arguments));                                                             // 1916\n  };                                                                                                                   // 1917\n  /**                                                                                                                  // 1918\n * Register an event listener.                                                                                         // 1919\n *                                                                                                                     // 1920\n * @returns `ZeroClipboard`                                                                                            // 1921\n * @static                                                                                                             // 1922\n */                                                                                                                    // 1923\n  ZeroClipboard.on = function() {                                                                                      // 1924\n    return _on.apply(this, _args(arguments));                                                                          // 1925\n  };                                                                                                                   // 1926\n  /**                                                                                                                  // 1927\n * Unregister an event listener.                                                                                       // 1928\n * If no `listener` function/object is provided, it will unregister all listeners for the provided `eventType`.        // 1929\n * If no `eventType` is provided, it will unregister all listeners for every event type.                               // 1930\n *                                                                                                                     // 1931\n * @returns `ZeroClipboard`                                                                                            // 1932\n * @static                                                                                                             // 1933\n */                                                                                                                    // 1934\n  ZeroClipboard.off = function() {                                                                                     // 1935\n    return _off.apply(this, _args(arguments));                                                                         // 1936\n  };                                                                                                                   // 1937\n  /**                                                                                                                  // 1938\n * Retrieve event listeners for an `eventType`.                                                                        // 1939\n * If no `eventType` is provided, it will retrieve all listeners for every event type.                                 // 1940\n *                                                                                                                     // 1941\n * @returns array of listeners for the `eventType`; if no `eventType`, then a map/hash object of listeners for all event types; or `null`\n */                                                                                                                    // 1943\n  ZeroClipboard.handlers = function() {                                                                                // 1944\n    return _listeners.apply(this, _args(arguments));                                                                   // 1945\n  };                                                                                                                   // 1946\n  /**                                                                                                                  // 1947\n * Event emission receiver from the Flash object, forwarding to any registered JavaScript event listeners.             // 1948\n *                                                                                                                     // 1949\n * @returns For the \"copy\" event, returns the Flash-friendly \"clipData\" object; otherwise `undefined`.                 // 1950\n * @static                                                                                                             // 1951\n */                                                                                                                    // 1952\n  ZeroClipboard.emit = function() {                                                                                    // 1953\n    return _emit.apply(this, _args(arguments));                                                                        // 1954\n  };                                                                                                                   // 1955\n  /**                                                                                                                  // 1956\n * Create and embed the Flash object.                                                                                  // 1957\n *                                                                                                                     // 1958\n * @returns The Flash object                                                                                           // 1959\n * @static                                                                                                             // 1960\n */                                                                                                                    // 1961\n  ZeroClipboard.create = function() {                                                                                  // 1962\n    return _create.apply(this, _args(arguments));                                                                      // 1963\n  };                                                                                                                   // 1964\n  /**                                                                                                                  // 1965\n * Self-destruct and clean up everything, including the embedded Flash object.                                         // 1966\n *                                                                                                                     // 1967\n * @returns `undefined`                                                                                                // 1968\n * @static                                                                                                             // 1969\n */                                                                                                                    // 1970\n  ZeroClipboard.destroy = function() {                                                                                 // 1971\n    return _destroy.apply(this, _args(arguments));                                                                     // 1972\n  };                                                                                                                   // 1973\n  /**                                                                                                                  // 1974\n * Set the pending data for clipboard injection.                                                                       // 1975\n *                                                                                                                     // 1976\n * @returns `undefined`                                                                                                // 1977\n * @static                                                                                                             // 1978\n */                                                                                                                    // 1979\n  ZeroClipboard.setData = function() {                                                                                 // 1980\n    return _setData.apply(this, _args(arguments));                                                                     // 1981\n  };                                                                                                                   // 1982\n  /**                                                                                                                  // 1983\n * Clear the pending data for clipboard injection.                                                                     // 1984\n * If no `format` is provided, all pending data formats will be cleared.                                               // 1985\n *                                                                                                                     // 1986\n * @returns `undefined`                                                                                                // 1987\n * @static                                                                                                             // 1988\n */                                                                                                                    // 1989\n  ZeroClipboard.clearData = function() {                                                                               // 1990\n    return _clearData.apply(this, _args(arguments));                                                                   // 1991\n  };                                                                                                                   // 1992\n  /**                                                                                                                  // 1993\n * Get a copy of the pending data for clipboard injection.                                                             // 1994\n * If no `format` is provided, a copy of ALL pending data formats will be returned.                                    // 1995\n *                                                                                                                     // 1996\n * @returns `String` or `Object`                                                                                       // 1997\n * @static                                                                                                             // 1998\n */                                                                                                                    // 1999\n  ZeroClipboard.getData = function() {                                                                                 // 2000\n    return _getData.apply(this, _args(arguments));                                                                     // 2001\n  };                                                                                                                   // 2002\n  /**                                                                                                                  // 2003\n * Sets the current HTML object that the Flash object should overlay. This will put the global                         // 2004\n * Flash object on top of the current element; depending on the setup, this may also set the                           // 2005\n * pending clipboard text data as well as the Flash object's wrapping element's title attribute                        // 2006\n * based on the underlying HTML element and ZeroClipboard configuration.                                               // 2007\n *                                                                                                                     // 2008\n * @returns `undefined`                                                                                                // 2009\n * @static                                                                                                             // 2010\n */                                                                                                                    // 2011\n  ZeroClipboard.focus = ZeroClipboard.activate = function() {                                                          // 2012\n    return _focus.apply(this, _args(arguments));                                                                       // 2013\n  };                                                                                                                   // 2014\n  /**                                                                                                                  // 2015\n * Un-overlays the Flash object. This will put the global Flash object off-screen; depending on                        // 2016\n * the setup, this may also unset the Flash object's wrapping element's title attribute based on                       // 2017\n * the underlying HTML element and ZeroClipboard configuration.                                                        // 2018\n *                                                                                                                     // 2019\n * @returns `undefined`                                                                                                // 2020\n * @static                                                                                                             // 2021\n */                                                                                                                    // 2022\n  ZeroClipboard.blur = ZeroClipboard.deactivate = function() {                                                         // 2023\n    return _blur.apply(this, _args(arguments));                                                                        // 2024\n  };                                                                                                                   // 2025\n  /**                                                                                                                  // 2026\n * Returns the currently focused/\"activated\" HTML element that the Flash object is wrapping.                           // 2027\n *                                                                                                                     // 2028\n * @returns `HTMLElement` or `null`                                                                                    // 2029\n * @static                                                                                                             // 2030\n */                                                                                                                    // 2031\n  ZeroClipboard.activeElement = function() {                                                                           // 2032\n    return _activeElement.apply(this, _args(arguments));                                                               // 2033\n  };                                                                                                                   // 2034\n  /**                                                                                                                  // 2035\n * Keep track of the ZeroClipboard client instance counter.                                                            // 2036\n */                                                                                                                    // 2037\n  var _clientIdCounter = 0;                                                                                            // 2038\n  /**                                                                                                                  // 2039\n * Keep track of the state of the client instances.                                                                    // 2040\n *                                                                                                                     // 2041\n * Entry structure:                                                                                                    // 2042\n *   _clientMeta[client.id] = {                                                                                        // 2043\n *     instance: client,                                                                                               // 2044\n *     elements: [],                                                                                                   // 2045\n *     handlers: {}                                                                                                    // 2046\n *   };                                                                                                                // 2047\n */                                                                                                                    // 2048\n  var _clientMeta = {};                                                                                                // 2049\n  /**                                                                                                                  // 2050\n * Keep track of the ZeroClipboard clipped elements counter.                                                           // 2051\n */                                                                                                                    // 2052\n  var _elementIdCounter = 0;                                                                                           // 2053\n  /**                                                                                                                  // 2054\n * Keep track of the state of the clipped element relationships to clients.                                            // 2055\n *                                                                                                                     // 2056\n * Entry structure:                                                                                                    // 2057\n *   _elementMeta[element.zcClippingId] = [client1.id, client2.id];                                                    // 2058\n */                                                                                                                    // 2059\n  var _elementMeta = {};                                                                                               // 2060\n  /**                                                                                                                  // 2061\n * Keep track of the state of the mouse event handlers for clipped elements.                                           // 2062\n *                                                                                                                     // 2063\n * Entry structure:                                                                                                    // 2064\n *   _mouseHandlers[element.zcClippingId] = {                                                                          // 2065\n *     mouseover:  function(event) {},                                                                                 // 2066\n *     mouseout:   function(event) {},                                                                                 // 2067\n *     mouseenter: function(event) {},                                                                                 // 2068\n *     mouseleave: function(event) {},                                                                                 // 2069\n *     mousemove:  function(event) {}                                                                                  // 2070\n *   };                                                                                                                // 2071\n */                                                                                                                    // 2072\n  var _mouseHandlers = {};                                                                                             // 2073\n  /**                                                                                                                  // 2074\n * Extending the ZeroClipboard configuration defaults for the Client module.                                           // 2075\n */                                                                                                                    // 2076\n  _extend(_globalConfig, {                                                                                             // 2077\n    autoActivate: true                                                                                                 // 2078\n  });                                                                                                                  // 2079\n  /**                                                                                                                  // 2080\n * The real constructor for `ZeroClipboard` client instances.                                                          // 2081\n * @private                                                                                                            // 2082\n */                                                                                                                    // 2083\n  var _clientConstructor = function(elements) {                                                                        // 2084\n    var client = this;                                                                                                 // 2085\n    client.id = \"\" + _clientIdCounter++;                                                                               // 2086\n    _clientMeta[client.id] = {                                                                                         // 2087\n      instance: client,                                                                                                // 2088\n      elements: [],                                                                                                    // 2089\n      handlers: {}                                                                                                     // 2090\n    };                                                                                                                 // 2091\n    if (elements) {                                                                                                    // 2092\n      client.clip(elements);                                                                                           // 2093\n    }                                                                                                                  // 2094\n    ZeroClipboard.on(\"*\", function(event) {                                                                            // 2095\n      return client.emit(event);                                                                                       // 2096\n    });                                                                                                                // 2097\n    ZeroClipboard.on(\"destroy\", function() {                                                                           // 2098\n      client.destroy();                                                                                                // 2099\n    });                                                                                                                // 2100\n    ZeroClipboard.create();                                                                                            // 2101\n  };                                                                                                                   // 2102\n  /**                                                                                                                  // 2103\n * The underlying implementation of `ZeroClipboard.Client.prototype.on`.                                               // 2104\n * @private                                                                                                            // 2105\n */                                                                                                                    // 2106\n  var _clientOn = function(eventType, listener) {                                                                      // 2107\n    var i, len, events, added = {}, meta = _clientMeta[this.id], handlers = meta && meta.handlers;                     // 2108\n    if (!meta) {                                                                                                       // 2109\n      throw new Error(\"Attempted to add new listener(s) to a destroyed ZeroClipboard client instance\");                // 2110\n    }                                                                                                                  // 2111\n    if (typeof eventType === \"string\" && eventType) {                                                                  // 2112\n      events = eventType.toLowerCase().split(/\\s+/);                                                                   // 2113\n    } else if (typeof eventType === \"object\" && eventType && typeof listener === \"undefined\") {                        // 2114\n      for (i in eventType) {                                                                                           // 2115\n        if (_hasOwn.call(eventType, i) && typeof i === \"string\" && i && typeof eventType[i] === \"function\") {          // 2116\n          this.on(i, eventType[i]);                                                                                    // 2117\n        }                                                                                                              // 2118\n      }                                                                                                                // 2119\n    }                                                                                                                  // 2120\n    if (events && events.length) {                                                                                     // 2121\n      for (i = 0, len = events.length; i < len; i++) {                                                                 // 2122\n        eventType = events[i].replace(/^on/, \"\");                                                                      // 2123\n        added[eventType] = true;                                                                                       // 2124\n        if (!handlers[eventType]) {                                                                                    // 2125\n          handlers[eventType] = [];                                                                                    // 2126\n        }                                                                                                              // 2127\n        handlers[eventType].push(listener);                                                                            // 2128\n      }                                                                                                                // 2129\n      if (added.ready && _flashState.ready) {                                                                          // 2130\n        this.emit({                                                                                                    // 2131\n          type: \"ready\",                                                                                               // 2132\n          client: this                                                                                                 // 2133\n        });                                                                                                            // 2134\n      }                                                                                                                // 2135\n      if (added.error) {                                                                                               // 2136\n        for (i = 0, len = _flashStateErrorNames.length; i < len; i++) {                                                // 2137\n          if (_flashState[_flashStateErrorNames[i].replace(/^flash-/, \"\")]) {                                          // 2138\n            this.emit({                                                                                                // 2139\n              type: \"error\",                                                                                           // 2140\n              name: _flashStateErrorNames[i],                                                                          // 2141\n              client: this                                                                                             // 2142\n            });                                                                                                        // 2143\n            break;                                                                                                     // 2144\n          }                                                                                                            // 2145\n        }                                                                                                              // 2146\n        if (_zcSwfVersion !== undefined && ZeroClipboard.version !== _zcSwfVersion) {                                  // 2147\n          this.emit({                                                                                                  // 2148\n            type: \"error\",                                                                                             // 2149\n            name: \"version-mismatch\",                                                                                  // 2150\n            jsVersion: ZeroClipboard.version,                                                                          // 2151\n            swfVersion: _zcSwfVersion                                                                                  // 2152\n          });                                                                                                          // 2153\n        }                                                                                                              // 2154\n      }                                                                                                                // 2155\n    }                                                                                                                  // 2156\n    return this;                                                                                                       // 2157\n  };                                                                                                                   // 2158\n  /**                                                                                                                  // 2159\n * The underlying implementation of `ZeroClipboard.Client.prototype.off`.                                              // 2160\n * @private                                                                                                            // 2161\n */                                                                                                                    // 2162\n  var _clientOff = function(eventType, listener) {                                                                     // 2163\n    var i, len, foundIndex, events, perEventHandlers, meta = _clientMeta[this.id], handlers = meta && meta.handlers;   // 2164\n    if (!handlers) {                                                                                                   // 2165\n      return this;                                                                                                     // 2166\n    }                                                                                                                  // 2167\n    if (arguments.length === 0) {                                                                                      // 2168\n      events = _keys(handlers);                                                                                        // 2169\n    } else if (typeof eventType === \"string\" && eventType) {                                                           // 2170\n      events = eventType.split(/\\s+/);                                                                                 // 2171\n    } else if (typeof eventType === \"object\" && eventType && typeof listener === \"undefined\") {                        // 2172\n      for (i in eventType) {                                                                                           // 2173\n        if (_hasOwn.call(eventType, i) && typeof i === \"string\" && i && typeof eventType[i] === \"function\") {          // 2174\n          this.off(i, eventType[i]);                                                                                   // 2175\n        }                                                                                                              // 2176\n      }                                                                                                                // 2177\n    }                                                                                                                  // 2178\n    if (events && events.length) {                                                                                     // 2179\n      for (i = 0, len = events.length; i < len; i++) {                                                                 // 2180\n        eventType = events[i].toLowerCase().replace(/^on/, \"\");                                                        // 2181\n        perEventHandlers = handlers[eventType];                                                                        // 2182\n        if (perEventHandlers && perEventHandlers.length) {                                                             // 2183\n          if (listener) {                                                                                              // 2184\n            foundIndex = perEventHandlers.indexOf(listener);                                                           // 2185\n            while (foundIndex !== -1) {                                                                                // 2186\n              perEventHandlers.splice(foundIndex, 1);                                                                  // 2187\n              foundIndex = perEventHandlers.indexOf(listener, foundIndex);                                             // 2188\n            }                                                                                                          // 2189\n          } else {                                                                                                     // 2190\n            perEventHandlers.length = 0;                                                                               // 2191\n          }                                                                                                            // 2192\n        }                                                                                                              // 2193\n      }                                                                                                                // 2194\n    }                                                                                                                  // 2195\n    return this;                                                                                                       // 2196\n  };                                                                                                                   // 2197\n  /**                                                                                                                  // 2198\n * The underlying implementation of `ZeroClipboard.Client.prototype.handlers`.                                         // 2199\n * @private                                                                                                            // 2200\n */                                                                                                                    // 2201\n  var _clientListeners = function(eventType) {                                                                         // 2202\n    var copy = null, handlers = _clientMeta[this.id] && _clientMeta[this.id].handlers;                                 // 2203\n    if (handlers) {                                                                                                    // 2204\n      if (typeof eventType === \"string\" && eventType) {                                                                // 2205\n        copy = handlers[eventType] ? handlers[eventType].slice(0) : [];                                                // 2206\n      } else {                                                                                                         // 2207\n        copy = _deepCopy(handlers);                                                                                    // 2208\n      }                                                                                                                // 2209\n    }                                                                                                                  // 2210\n    return copy;                                                                                                       // 2211\n  };                                                                                                                   // 2212\n  /**                                                                                                                  // 2213\n * The underlying implementation of `ZeroClipboard.Client.prototype.emit`.                                             // 2214\n * @private                                                                                                            // 2215\n */                                                                                                                    // 2216\n  var _clientEmit = function(event) {                                                                                  // 2217\n    if (_clientShouldEmit.call(this, event)) {                                                                         // 2218\n      if (typeof event === \"object\" && event && typeof event.type === \"string\" && event.type) {                        // 2219\n        event = _extend({}, event);                                                                                    // 2220\n      }                                                                                                                // 2221\n      var eventCopy = _extend({}, _createEvent(event), {                                                               // 2222\n        client: this                                                                                                   // 2223\n      });                                                                                                              // 2224\n      _clientDispatchCallbacks.call(this, eventCopy);                                                                  // 2225\n    }                                                                                                                  // 2226\n    return this;                                                                                                       // 2227\n  };                                                                                                                   // 2228\n  /**                                                                                                                  // 2229\n * The underlying implementation of `ZeroClipboard.Client.prototype.clip`.                                             // 2230\n * @private                                                                                                            // 2231\n */                                                                                                                    // 2232\n  var _clientClip = function(elements) {                                                                               // 2233\n    if (!_clientMeta[this.id]) {                                                                                       // 2234\n      throw new Error(\"Attempted to clip element(s) to a destroyed ZeroClipboard client instance\");                    // 2235\n    }                                                                                                                  // 2236\n    elements = _prepClip(elements);                                                                                    // 2237\n    for (var i = 0; i < elements.length; i++) {                                                                        // 2238\n      if (_hasOwn.call(elements, i) && elements[i] && elements[i].nodeType === 1) {                                    // 2239\n        if (!elements[i].zcClippingId) {                                                                               // 2240\n          elements[i].zcClippingId = \"zcClippingId_\" + _elementIdCounter++;                                            // 2241\n          _elementMeta[elements[i].zcClippingId] = [ this.id ];                                                        // 2242\n          if (_globalConfig.autoActivate === true) {                                                                   // 2243\n            _addMouseHandlers(elements[i]);                                                                            // 2244\n          }                                                                                                            // 2245\n        } else if (_elementMeta[elements[i].zcClippingId].indexOf(this.id) === -1) {                                   // 2246\n          _elementMeta[elements[i].zcClippingId].push(this.id);                                                        // 2247\n        }                                                                                                              // 2248\n        var clippedElements = _clientMeta[this.id] && _clientMeta[this.id].elements;                                   // 2249\n        if (clippedElements.indexOf(elements[i]) === -1) {                                                             // 2250\n          clippedElements.push(elements[i]);                                                                           // 2251\n        }                                                                                                              // 2252\n      }                                                                                                                // 2253\n    }                                                                                                                  // 2254\n    return this;                                                                                                       // 2255\n  };                                                                                                                   // 2256\n  /**                                                                                                                  // 2257\n * The underlying implementation of `ZeroClipboard.Client.prototype.unclip`.                                           // 2258\n * @private                                                                                                            // 2259\n */                                                                                                                    // 2260\n  var _clientUnclip = function(elements) {                                                                             // 2261\n    var meta = _clientMeta[this.id];                                                                                   // 2262\n    if (!meta) {                                                                                                       // 2263\n      return this;                                                                                                     // 2264\n    }                                                                                                                  // 2265\n    var clippedElements = meta.elements;                                                                               // 2266\n    var arrayIndex;                                                                                                    // 2267\n    if (typeof elements === \"undefined\") {                                                                             // 2268\n      elements = clippedElements.slice(0);                                                                             // 2269\n    } else {                                                                                                           // 2270\n      elements = _prepClip(elements);                                                                                  // 2271\n    }                                                                                                                  // 2272\n    for (var i = elements.length; i--; ) {                                                                             // 2273\n      if (_hasOwn.call(elements, i) && elements[i] && elements[i].nodeType === 1) {                                    // 2274\n        arrayIndex = 0;                                                                                                // 2275\n        while ((arrayIndex = clippedElements.indexOf(elements[i], arrayIndex)) !== -1) {                               // 2276\n          clippedElements.splice(arrayIndex, 1);                                                                       // 2277\n        }                                                                                                              // 2278\n        var clientIds = _elementMeta[elements[i].zcClippingId];                                                        // 2279\n        if (clientIds) {                                                                                               // 2280\n          arrayIndex = 0;                                                                                              // 2281\n          while ((arrayIndex = clientIds.indexOf(this.id, arrayIndex)) !== -1) {                                       // 2282\n            clientIds.splice(arrayIndex, 1);                                                                           // 2283\n          }                                                                                                            // 2284\n          if (clientIds.length === 0) {                                                                                // 2285\n            if (_globalConfig.autoActivate === true) {                                                                 // 2286\n              _removeMouseHandlers(elements[i]);                                                                       // 2287\n            }                                                                                                          // 2288\n            delete elements[i].zcClippingId;                                                                           // 2289\n          }                                                                                                            // 2290\n        }                                                                                                              // 2291\n      }                                                                                                                // 2292\n    }                                                                                                                  // 2293\n    return this;                                                                                                       // 2294\n  };                                                                                                                   // 2295\n  /**                                                                                                                  // 2296\n * The underlying implementation of `ZeroClipboard.Client.prototype.elements`.                                         // 2297\n * @private                                                                                                            // 2298\n */                                                                                                                    // 2299\n  var _clientElements = function() {                                                                                   // 2300\n    var meta = _clientMeta[this.id];                                                                                   // 2301\n    return meta && meta.elements ? meta.elements.slice(0) : [];                                                        // 2302\n  };                                                                                                                   // 2303\n  /**                                                                                                                  // 2304\n * The underlying implementation of `ZeroClipboard.Client.prototype.destroy`.                                          // 2305\n * @private                                                                                                            // 2306\n */                                                                                                                    // 2307\n  var _clientDestroy = function() {                                                                                    // 2308\n    if (!_clientMeta[this.id]) {                                                                                       // 2309\n      return;                                                                                                          // 2310\n    }                                                                                                                  // 2311\n    this.unclip();                                                                                                     // 2312\n    this.off();                                                                                                        // 2313\n    delete _clientMeta[this.id];                                                                                       // 2314\n  };                                                                                                                   // 2315\n  /**                                                                                                                  // 2316\n * Inspect an Event to see if the Client (`this`) should honor it for emission.                                        // 2317\n * @private                                                                                                            // 2318\n */                                                                                                                    // 2319\n  var _clientShouldEmit = function(event) {                                                                            // 2320\n    if (!(event && event.type)) {                                                                                      // 2321\n      return false;                                                                                                    // 2322\n    }                                                                                                                  // 2323\n    if (event.client && event.client !== this) {                                                                       // 2324\n      return false;                                                                                                    // 2325\n    }                                                                                                                  // 2326\n    var meta = _clientMeta[this.id];                                                                                   // 2327\n    var clippedEls = meta && meta.elements;                                                                            // 2328\n    var hasClippedEls = !!clippedEls && clippedEls.length > 0;                                                         // 2329\n    var goodTarget = !event.target || hasClippedEls && clippedEls.indexOf(event.target) !== -1;                        // 2330\n    var goodRelTarget = event.relatedTarget && hasClippedEls && clippedEls.indexOf(event.relatedTarget) !== -1;        // 2331\n    var goodClient = event.client && event.client === this;                                                            // 2332\n    if (!meta || !(goodTarget || goodRelTarget || goodClient)) {                                                       // 2333\n      return false;                                                                                                    // 2334\n    }                                                                                                                  // 2335\n    return true;                                                                                                       // 2336\n  };                                                                                                                   // 2337\n  /**                                                                                                                  // 2338\n * Handle the actual dispatching of events to a client instance.                                                       // 2339\n *                                                                                                                     // 2340\n * @returns `undefined`                                                                                                // 2341\n * @private                                                                                                            // 2342\n */                                                                                                                    // 2343\n  var _clientDispatchCallbacks = function(event) {                                                                     // 2344\n    var meta = _clientMeta[this.id];                                                                                   // 2345\n    if (!(typeof event === \"object\" && event && event.type && meta)) {                                                 // 2346\n      return;                                                                                                          // 2347\n    }                                                                                                                  // 2348\n    var async = _shouldPerformAsync(event);                                                                            // 2349\n    var wildcardTypeHandlers = meta && meta.handlers[\"*\"] || [];                                                       // 2350\n    var specificTypeHandlers = meta && meta.handlers[event.type] || [];                                                // 2351\n    var handlers = wildcardTypeHandlers.concat(specificTypeHandlers);                                                  // 2352\n    if (handlers && handlers.length) {                                                                                 // 2353\n      var i, len, func, context, eventCopy, originalContext = this;                                                    // 2354\n      for (i = 0, len = handlers.length; i < len; i++) {                                                               // 2355\n        func = handlers[i];                                                                                            // 2356\n        context = originalContext;                                                                                     // 2357\n        if (typeof func === \"string\" && typeof _window[func] === \"function\") {                                         // 2358\n          func = _window[func];                                                                                        // 2359\n        }                                                                                                              // 2360\n        if (typeof func === \"object\" && func && typeof func.handleEvent === \"function\") {                              // 2361\n          context = func;                                                                                              // 2362\n          func = func.handleEvent;                                                                                     // 2363\n        }                                                                                                              // 2364\n        if (typeof func === \"function\") {                                                                              // 2365\n          eventCopy = _extend({}, event);                                                                              // 2366\n          _dispatchCallback(func, context, [ eventCopy ], async);                                                      // 2367\n        }                                                                                                              // 2368\n      }                                                                                                                // 2369\n    }                                                                                                                  // 2370\n  };                                                                                                                   // 2371\n  /**                                                                                                                  // 2372\n * Prepares the elements for clipping/unclipping.                                                                      // 2373\n *                                                                                                                     // 2374\n * @returns An Array of elements.                                                                                      // 2375\n * @private                                                                                                            // 2376\n */                                                                                                                    // 2377\n  var _prepClip = function(elements) {                                                                                 // 2378\n    if (typeof elements === \"string\") {                                                                                // 2379\n      elements = [];                                                                                                   // 2380\n    }                                                                                                                  // 2381\n    return typeof elements.length !== \"number\" ? [ elements ] : elements;                                              // 2382\n  };                                                                                                                   // 2383\n  /**                                                                                                                  // 2384\n * Add a `mouseover` handler function for a clipped element.                                                           // 2385\n *                                                                                                                     // 2386\n * @returns `undefined`                                                                                                // 2387\n * @private                                                                                                            // 2388\n */                                                                                                                    // 2389\n  var _addMouseHandlers = function(element) {                                                                          // 2390\n    if (!(element && element.nodeType === 1)) {                                                                        // 2391\n      return;                                                                                                          // 2392\n    }                                                                                                                  // 2393\n    var _suppressMouseEvents = function(event) {                                                                       // 2394\n      if (!(event || (event = _window.event))) {                                                                       // 2395\n        return;                                                                                                        // 2396\n      }                                                                                                                // 2397\n      if (event._source !== \"js\") {                                                                                    // 2398\n        event.stopImmediatePropagation();                                                                              // 2399\n        event.preventDefault();                                                                                        // 2400\n      }                                                                                                                // 2401\n      delete event._source;                                                                                            // 2402\n    };                                                                                                                 // 2403\n    var _elementMouseOver = function(event) {                                                                          // 2404\n      if (!(event || (event = _window.event))) {                                                                       // 2405\n        return;                                                                                                        // 2406\n      }                                                                                                                // 2407\n      _suppressMouseEvents(event);                                                                                     // 2408\n      ZeroClipboard.focus(element);                                                                                    // 2409\n    };                                                                                                                 // 2410\n    element.addEventListener(\"mouseover\", _elementMouseOver, false);                                                   // 2411\n    element.addEventListener(\"mouseout\", _suppressMouseEvents, false);                                                 // 2412\n    element.addEventListener(\"mouseenter\", _suppressMouseEvents, false);                                               // 2413\n    element.addEventListener(\"mouseleave\", _suppressMouseEvents, false);                                               // 2414\n    element.addEventListener(\"mousemove\", _suppressMouseEvents, false);                                                // 2415\n    _mouseHandlers[element.zcClippingId] = {                                                                           // 2416\n      mouseover: _elementMouseOver,                                                                                    // 2417\n      mouseout: _suppressMouseEvents,                                                                                  // 2418\n      mouseenter: _suppressMouseEvents,                                                                                // 2419\n      mouseleave: _suppressMouseEvents,                                                                                // 2420\n      mousemove: _suppressMouseEvents                                                                                  // 2421\n    };                                                                                                                 // 2422\n  };                                                                                                                   // 2423\n  /**                                                                                                                  // 2424\n * Remove a `mouseover` handler function for a clipped element.                                                        // 2425\n *                                                                                                                     // 2426\n * @returns `undefined`                                                                                                // 2427\n * @private                                                                                                            // 2428\n */                                                                                                                    // 2429\n  var _removeMouseHandlers = function(element) {                                                                       // 2430\n    if (!(element && element.nodeType === 1)) {                                                                        // 2431\n      return;                                                                                                          // 2432\n    }                                                                                                                  // 2433\n    var mouseHandlers = _mouseHandlers[element.zcClippingId];                                                          // 2434\n    if (!(typeof mouseHandlers === \"object\" && mouseHandlers)) {                                                       // 2435\n      return;                                                                                                          // 2436\n    }                                                                                                                  // 2437\n    var key, val, mouseEvents = [ \"move\", \"leave\", \"enter\", \"out\", \"over\" ];                                           // 2438\n    for (var i = 0, len = mouseEvents.length; i < len; i++) {                                                          // 2439\n      key = \"mouse\" + mouseEvents[i];                                                                                  // 2440\n      val = mouseHandlers[key];                                                                                        // 2441\n      if (typeof val === \"function\") {                                                                                 // 2442\n        element.removeEventListener(key, val, false);                                                                  // 2443\n      }                                                                                                                // 2444\n    }                                                                                                                  // 2445\n    delete _mouseHandlers[element.zcClippingId];                                                                       // 2446\n  };                                                                                                                   // 2447\n  /**                                                                                                                  // 2448\n * Creates a new ZeroClipboard client instance.                                                                        // 2449\n * Optionally, auto-`clip` an element or collection of elements.                                                       // 2450\n *                                                                                                                     // 2451\n * @constructor                                                                                                        // 2452\n */                                                                                                                    // 2453\n  ZeroClipboard._createClient = function() {                                                                           // 2454\n    _clientConstructor.apply(this, _args(arguments));                                                                  // 2455\n  };                                                                                                                   // 2456\n  /**                                                                                                                  // 2457\n * Register an event listener to the client.                                                                           // 2458\n *                                                                                                                     // 2459\n * @returns `this`                                                                                                     // 2460\n */                                                                                                                    // 2461\n  ZeroClipboard.prototype.on = function() {                                                                            // 2462\n    return _clientOn.apply(this, _args(arguments));                                                                    // 2463\n  };                                                                                                                   // 2464\n  /**                                                                                                                  // 2465\n * Unregister an event handler from the client.                                                                        // 2466\n * If no `listener` function/object is provided, it will unregister all handlers for the provided `eventType`.         // 2467\n * If no `eventType` is provided, it will unregister all handlers for every event type.                                // 2468\n *                                                                                                                     // 2469\n * @returns `this`                                                                                                     // 2470\n */                                                                                                                    // 2471\n  ZeroClipboard.prototype.off = function() {                                                                           // 2472\n    return _clientOff.apply(this, _args(arguments));                                                                   // 2473\n  };                                                                                                                   // 2474\n  /**                                                                                                                  // 2475\n * Retrieve event listeners for an `eventType` from the client.                                                        // 2476\n * If no `eventType` is provided, it will retrieve all listeners for every event type.                                 // 2477\n *                                                                                                                     // 2478\n * @returns array of listeners for the `eventType`; if no `eventType`, then a map/hash object of listeners for all event types; or `null`\n */                                                                                                                    // 2480\n  ZeroClipboard.prototype.handlers = function() {                                                                      // 2481\n    return _clientListeners.apply(this, _args(arguments));                                                             // 2482\n  };                                                                                                                   // 2483\n  /**                                                                                                                  // 2484\n * Event emission receiver from the Flash object for this client's registered JavaScript event listeners.              // 2485\n *                                                                                                                     // 2486\n * @returns For the \"copy\" event, returns the Flash-friendly \"clipData\" object; otherwise `undefined`.                 // 2487\n */                                                                                                                    // 2488\n  ZeroClipboard.prototype.emit = function() {                                                                          // 2489\n    return _clientEmit.apply(this, _args(arguments));                                                                  // 2490\n  };                                                                                                                   // 2491\n  /**                                                                                                                  // 2492\n * Register clipboard actions for new element(s) to the client.                                                        // 2493\n *                                                                                                                     // 2494\n * @returns `this`                                                                                                     // 2495\n */                                                                                                                    // 2496\n  ZeroClipboard.prototype.clip = function() {                                                                          // 2497\n    return _clientClip.apply(this, _args(arguments));                                                                  // 2498\n  };                                                                                                                   // 2499\n  /**                                                                                                                  // 2500\n * Unregister the clipboard actions of previously registered element(s) on the page.                                   // 2501\n * If no elements are provided, ALL registered elements will be unregistered.                                          // 2502\n *                                                                                                                     // 2503\n * @returns `this`                                                                                                     // 2504\n */                                                                                                                    // 2505\n  ZeroClipboard.prototype.unclip = function() {                                                                        // 2506\n    return _clientUnclip.apply(this, _args(arguments));                                                                // 2507\n  };                                                                                                                   // 2508\n  /**                                                                                                                  // 2509\n * Get all of the elements to which this client is clipped.                                                            // 2510\n *                                                                                                                     // 2511\n * @returns array of clipped elements                                                                                  // 2512\n */                                                                                                                    // 2513\n  ZeroClipboard.prototype.elements = function() {                                                                      // 2514\n    return _clientElements.apply(this, _args(arguments));                                                              // 2515\n  };                                                                                                                   // 2516\n  /**                                                                                                                  // 2517\n * Self-destruct and clean up everything for a single client.                                                          // 2518\n * This will NOT destroy the embedded Flash object.                                                                    // 2519\n *                                                                                                                     // 2520\n * @returns `undefined`                                                                                                // 2521\n */                                                                                                                    // 2522\n  ZeroClipboard.prototype.destroy = function() {                                                                       // 2523\n    return _clientDestroy.apply(this, _args(arguments));                                                               // 2524\n  };                                                                                                                   // 2525\n  /**                                                                                                                  // 2526\n * Stores the pending plain text to inject into the clipboard.                                                         // 2527\n *                                                                                                                     // 2528\n * @returns `this`                                                                                                     // 2529\n */                                                                                                                    // 2530\n  ZeroClipboard.prototype.setText = function(text) {                                                                   // 2531\n    if (!_clientMeta[this.id]) {                                                                                       // 2532\n      throw new Error(\"Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance\");       // 2533\n    }                                                                                                                  // 2534\n    ZeroClipboard.setData(\"text/plain\", text);                                                                         // 2535\n    return this;                                                                                                       // 2536\n  };                                                                                                                   // 2537\n  /**                                                                                                                  // 2538\n * Stores the pending HTML text to inject into the clipboard.                                                          // 2539\n *                                                                                                                     // 2540\n * @returns `this`                                                                                                     // 2541\n */                                                                                                                    // 2542\n  ZeroClipboard.prototype.setHtml = function(html) {                                                                   // 2543\n    if (!_clientMeta[this.id]) {                                                                                       // 2544\n      throw new Error(\"Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance\");       // 2545\n    }                                                                                                                  // 2546\n    ZeroClipboard.setData(\"text/html\", html);                                                                          // 2547\n    return this;                                                                                                       // 2548\n  };                                                                                                                   // 2549\n  /**                                                                                                                  // 2550\n * Stores the pending rich text (RTF) to inject into the clipboard.                                                    // 2551\n *                                                                                                                     // 2552\n * @returns `this`                                                                                                     // 2553\n */                                                                                                                    // 2554\n  ZeroClipboard.prototype.setRichText = function(richText) {                                                           // 2555\n    if (!_clientMeta[this.id]) {                                                                                       // 2556\n      throw new Error(\"Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance\");       // 2557\n    }                                                                                                                  // 2558\n    ZeroClipboard.setData(\"application/rtf\", richText);                                                                // 2559\n    return this;                                                                                                       // 2560\n  };                                                                                                                   // 2561\n  /**                                                                                                                  // 2562\n * Stores the pending data to inject into the clipboard.                                                               // 2563\n *                                                                                                                     // 2564\n * @returns `this`                                                                                                     // 2565\n */                                                                                                                    // 2566\n  ZeroClipboard.prototype.setData = function() {                                                                       // 2567\n    if (!_clientMeta[this.id]) {                                                                                       // 2568\n      throw new Error(\"Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance\");       // 2569\n    }                                                                                                                  // 2570\n    ZeroClipboard.setData.apply(this, _args(arguments));                                                               // 2571\n    return this;                                                                                                       // 2572\n  };                                                                                                                   // 2573\n  /**                                                                                                                  // 2574\n * Clears the pending data to inject into the clipboard.                                                               // 2575\n * If no `format` is provided, all pending data formats will be cleared.                                               // 2576\n *                                                                                                                     // 2577\n * @returns `this`                                                                                                     // 2578\n */                                                                                                                    // 2579\n  ZeroClipboard.prototype.clearData = function() {                                                                     // 2580\n    if (!_clientMeta[this.id]) {                                                                                       // 2581\n      throw new Error(\"Attempted to clear pending clipboard data from a destroyed ZeroClipboard client instance\");     // 2582\n    }                                                                                                                  // 2583\n    ZeroClipboard.clearData.apply(this, _args(arguments));                                                             // 2584\n    return this;                                                                                                       // 2585\n  };                                                                                                                   // 2586\n  /**                                                                                                                  // 2587\n * Gets a copy of the pending data to inject into the clipboard.                                                       // 2588\n * If no `format` is provided, a copy of ALL pending data formats will be returned.                                    // 2589\n *                                                                                                                     // 2590\n * @returns `String` or `Object`                                                                                       // 2591\n */                                                                                                                    // 2592\n  ZeroClipboard.prototype.getData = function() {                                                                       // 2593\n    if (!_clientMeta[this.id]) {                                                                                       // 2594\n      throw new Error(\"Attempted to get pending clipboard data from a destroyed ZeroClipboard client instance\");       // 2595\n    }                                                                                                                  // 2596\n    return ZeroClipboard.getData.apply(this, _args(arguments));                                                        // 2597\n  };                                                                                                                   // 2598\n  if (typeof define === \"function\" && define.amd) {                                                                    // 2599\n    define(function() {                                                                                                // 2600\n      return ZeroClipboard;                                                                                            // 2601\n    });                                                                                                                // 2602\n  } else if (typeof module === \"object\" && module && typeof module.exports === \"object\" && module.exports) {           // 2603\n    module.exports = ZeroClipboard;                                                                                    // 2604\n  } else {                                                                                                             // 2605\n    window.ZeroClipboard = ZeroClipboard;                                                                              // 2606\n  }                                                                                                                    // 2607\n})(function() {                                                                                                        // 2608\n  return this || window;                                                                                               // 2609\n}());                                                                                                                  // 2610\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 2620\n}).call(this);                                                       // 2621\n                                                                     // 2622\n                                                                     // 2623\n                                                                     // 2624\n                                                                     // 2625\n                                                                     // 2626\n                                                                     // 2627\n(function () {                                                       // 2628\n                                                                     // 2629\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/propercursive:zeroclipboard/export.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nZeroClipboard = this.ZeroClipboard;                                                                                    // 1\n                                                                                                                       // 2\ntry {                                                                                                                  // 3\n  delete this.ZeroClipboard;                                                                                           // 4\n}                                                                                                                      // 5\n  catch (e) {                                                                                                          // 6\n}                                                                                                                      // 7\n                                                                                                                       // 8\nZeroClipboard.config( { swfPath: '/packages/propercursive_zeroclipboard/zeroclipboard/dist/ZeroClipboard.swf' } );     // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 2646\n}).call(this);                                                       // 2647\n                                                                     // 2648\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['propercursive:zeroclipboard'] = {\n  ZeroClipboard: ZeroClipboard\n};\n\n})();\n","servePath":"/packages/propercursive_zeroclipboard.js","sourceMap":{"version":3,"sources":["/packages/propercursive_zeroclipboard/packages/propercursive_zeroclipboard.js"],"names":[],"mappingsfile":"/packages/propercursive_zeroclipboard.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/propercursive:zeroclipboard/zeroclipboard/dist/ZeroClipboard.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * ZeroClipboard                                                                                                       // 2\n * The ZeroClipboard library provides an easy way to copy text to the clipboard using an invisible Adobe Flash movie and a JavaScript interface.\n * Copyright (c) 2009-2015 Jon Rohan, James M. Greene                                                                  // 4\n * Licensed MIT                                                                                                        // 5\n * http://zeroclipboard.org/                                                                                           // 6\n * v2.3.0-beta.1                                                                                                       // 7\n */                                                                                                                    // 8\n(function(window, undefined) {                                                                                         // 9\n  \"use strict\";                                                                                                        // 10\n  /**                                                                                                                  // 11\n * Store references to critically important global functions that may be                                               // 12\n * overridden on certain web pages.                                                                                    // 13\n */                                                                                                                    // 14\n  var _window = window, _document = _window.document, _navigator = _window.navigator, _setTimeout = _window.setTimeout, _clearTimeout = _window.clearTimeout, _setInterval = _window.setInterval, _clearInterval = _window.clearInterval, _getComputedStyle = _window.getComputedStyle, _encodeURIComponent = _window.encodeURIComponent, _ActiveXObject = _window.ActiveXObject, _Error = _window.Error, _parseInt = _window.Number.parseInt || _window.parseInt, _parseFloat = _window.Number.parseFloat || _window.parseFloat, _isNaN = _window.Number.isNaN || _window.isNaN, _now = _window.Date.now, _keys = _window.Object.keys, _defineProperty = _window.Object.defineProperty, _hasOwn = _window.Object.prototype.hasOwnProperty, _slice = _window.Array.prototype.slice, _unwrap = function() {\n    var unwrapper = function(el) {                                                                                     // 16\n      return el;                                                                                                       // 17\n    };                                                                                                                 // 18\n    if (typeof _window.wrap === \"function\" && typeof _window.unwrap === \"function\") {                                  // 19\n      try {                                                                                                            // 20\n        var div = _document.createElement(\"div\");                                                                      // 21\n        var unwrappedDiv = _window.unwrap(div);                                                                        // 22\n        if (div.nodeType === 1 && unwrappedDiv && unwrappedDiv.nodeType === 1) {                                       // 23\n          unwrapper = _window.unwrap;                                                                                  // 24\n        }                                                                                                              // 25\n      } catch (e) {}                                                                                                   // 26\n    }                                                                                                                  // 27\n    return unwrapper;                                                                                                  // 28\n  }();                                                                                                                 // 29\n  /**                                                                                                                  // 30\n * Convert an `arguments` object into an Array.                                                                        // 31\n *                                                                                                                     // 32\n * @returns The arguments as an Array                                                                                  // 33\n * @private                                                                                                            // 34\n */                                                                                                                    // 35\n  var _args = function(argumentsObj) {                                                                                 // 36\n    return _slice.call(argumentsObj, 0);                                                                               // 37\n  };                                                                                                                   // 38\n  /**                                                                                                                  // 39\n * Shallow-copy the owned, enumerable properties of one object over to another, similar to jQuery's `$.extend`.        // 40\n *                                                                                                                     // 41\n * @returns The target object, augmented                                                                               // 42\n * @private                                                                                                            // 43\n */                                                                                                                    // 44\n  var _extend = function() {                                                                                           // 45\n    var i, len, arg, prop, src, copy, args = _args(arguments), target = args[0] || {};                                 // 46\n    for (i = 1, len = args.length; i < len; i++) {                                                                     // 47\n      if ((arg = args[i]) != null) {                                                                                   // 48\n        for (prop in arg) {                                                                                            // 49\n          if (_hasOwn.call(arg, prop)) {                                                                               // 50\n            src = target[prop];                                                                                        // 51\n            copy = arg[prop];                                                                                          // 52\n            if (target !== copy && copy !== undefined) {                                                               // 53\n              target[prop] = copy;                                                                                     // 54\n            }                                                                                                          // 55\n          }                                                                                                            // 56\n        }                                                                                                              // 57\n      }                                                                                                                // 58\n    }                                                                                                                  // 59\n    return target;                                                                                                     // 60\n  };                                                                                                                   // 61\n  /**                                                                                                                  // 62\n * Return a deep copy of the source object or array.                                                                   // 63\n *                                                                                                                     // 64\n * @returns Object or Array                                                                                            // 65\n * @private                                                                                                            // 66\n */                                                                                                                    // 67\n  var _deepCopy = function(source) {                                                                                   // 68\n    var copy, i, len, prop;                                                                                            // 69\n    if (typeof source !== \"object\" || source == null || typeof source.nodeType === \"number\") {                         // 70\n      copy = source;                                                                                                   // 71\n    } else if (typeof source.length === \"number\") {                                                                    // 72\n      copy = [];                                                                                                       // 73\n      for (i = 0, len = source.length; i < len; i++) {                                                                 // 74\n        if (_hasOwn.call(source, i)) {                                                                                 // 75\n          copy[i] = _deepCopy(source[i]);                                                                              // 76\n        }                                                                                                              // 77\n      }                                                                                                                // 78\n    } else {                                                                                                           // 79\n      copy = {};                                                                                                       // 80\n      for (prop in source) {                                                                                           // 81\n        if (_hasOwn.call(source, prop)) {                                                                              // 82\n          copy[prop] = _deepCopy(source[prop]);                                                                        // 83\n        }                                                                                                              // 84\n      }                                                                                                                // 85\n    }                                                                                                                  // 86\n    return copy;                                                                                                       // 87\n  };                                                                                                                   // 88\n  /**                                                                                                                  // 89\n * Makes a shallow copy of `obj` (like `_extend`) but filters its properties based on a list of `keys` to keep.        // 90\n * The inverse of `_omit`, mostly. The big difference is that these properties do NOT need to be enumerable to         // 91\n * be kept.                                                                                                            // 92\n *                                                                                                                     // 93\n * @returns A new filtered object.                                                                                     // 94\n * @private                                                                                                            // 95\n */                                                                                                                    // 96\n  var _pick = function(obj, keys) {                                                                                    // 97\n    var newObj = {};                                                                                                   // 98\n    for (var i = 0, len = keys.length; i < len; i++) {                                                                 // 99\n      if (keys[i] in obj) {                                                                                            // 100\n        newObj[keys[i]] = obj[keys[i]];                                                                                // 101\n      }                                                                                                                // 102\n    }                                                                                                                  // 103\n    return newObj;                                                                                                     // 104\n  };                                                                                                                   // 105\n  /**                                                                                                                  // 106\n * Makes a shallow copy of `obj` (like `_extend`) but filters its properties based on a list of `keys` to omit.        // 107\n * The inverse of `_pick`.                                                                                             // 108\n *                                                                                                                     // 109\n * @returns A new filtered object.                                                                                     // 110\n * @private                                                                                                            // 111\n */                                                                                                                    // 112\n  var _omit = function(obj, keys) {                                                                                    // 113\n    var newObj = {};                                                                                                   // 114\n    for (var prop in obj) {                                                                                            // 115\n      if (keys.indexOf(prop) === -1) {                                                                                 // 116\n        newObj[prop] = obj[prop];                                                                                      // 117\n      }                                                                                                                // 118\n    }                                                                                                                  // 119\n    return newObj;                                                                                                     // 120\n  };                                                                                                                   // 121\n  /**                                                                                                                  // 122\n * Remove all owned, enumerable properties from an object.                                                             // 123\n *                                                                                                                     // 124\n * @returns The original object without its owned, enumerable properties.                                              // 125\n * @private                                                                                                            // 126\n */                                                                                                                    // 127\n  var _deleteOwnProperties = function(obj) {                                                                           // 128\n    if (obj) {                                                                                                         // 129\n      for (var prop in obj) {                                                                                          // 130\n        if (_hasOwn.call(obj, prop)) {                                                                                 // 131\n          delete obj[prop];                                                                                            // 132\n        }                                                                                                              // 133\n      }                                                                                                                // 134\n    }                                                                                                                  // 135\n    return obj;                                                                                                        // 136\n  };                                                                                                                   // 137\n  /**                                                                                                                  // 138\n * Determine if an element is contained within another element.                                                        // 139\n *                                                                                                                     // 140\n * @returns Boolean                                                                                                    // 141\n * @private                                                                                                            // 142\n */                                                                                                                    // 143\n  var _containedBy = function(el, ancestorEl) {                                                                        // 144\n    if (el && el.nodeType === 1 && el.ownerDocument && ancestorEl && (ancestorEl.nodeType === 1 && ancestorEl.ownerDocument && ancestorEl.ownerDocument === el.ownerDocument || ancestorEl.nodeType === 9 && !ancestorEl.ownerDocument && ancestorEl === el.ownerDocument)) {\n      do {                                                                                                             // 146\n        if (el === ancestorEl) {                                                                                       // 147\n          return true;                                                                                                 // 148\n        }                                                                                                              // 149\n        el = el.parentNode;                                                                                            // 150\n      } while (el);                                                                                                    // 151\n    }                                                                                                                  // 152\n    return false;                                                                                                      // 153\n  };                                                                                                                   // 154\n  /**                                                                                                                  // 155\n * Get the URL path's parent directory.                                                                                // 156\n *                                                                                                                     // 157\n * @returns String or `undefined`                                                                                      // 158\n * @private                                                                                                            // 159\n */                                                                                                                    // 160\n  var _getDirPathOfUrl = function(url) {                                                                               // 161\n    var dir;                                                                                                           // 162\n    if (typeof url === \"string\" && url) {                                                                              // 163\n      dir = url.split(\"#\")[0].split(\"?\")[0];                                                                           // 164\n      dir = url.slice(0, url.lastIndexOf(\"/\") + 1);                                                                    // 165\n    }                                                                                                                  // 166\n    return dir;                                                                                                        // 167\n  };                                                                                                                   // 168\n  /**                                                                                                                  // 169\n * Get the current script's URL by throwing an `Error` and analyzing it.                                               // 170\n *                                                                                                                     // 171\n * @returns String or `undefined`                                                                                      // 172\n * @private                                                                                                            // 173\n */                                                                                                                    // 174\n  var _getCurrentScriptUrlFromErrorStack = function(stack) {                                                           // 175\n    var url, matches;                                                                                                  // 176\n    if (typeof stack === \"string\" && stack) {                                                                          // 177\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)((?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      if (matches && matches[1]) {                                                                                     // 179\n        url = matches[1];                                                                                              // 180\n      } else {                                                                                                         // 181\n        matches = stack.match(/\\)@((?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);                       // 182\n        if (matches && matches[1]) {                                                                                   // 183\n          url = matches[1];                                                                                            // 184\n        }                                                                                                              // 185\n      }                                                                                                                // 186\n    }                                                                                                                  // 187\n    return url;                                                                                                        // 188\n  };                                                                                                                   // 189\n  /**                                                                                                                  // 190\n * Get the current script's URL by throwing an `Error` and analyzing it.                                               // 191\n *                                                                                                                     // 192\n * @returns String or `undefined`                                                                                      // 193\n * @private                                                                                                            // 194\n */                                                                                                                    // 195\n  var _getCurrentScriptUrlFromError = function() {                                                                     // 196\n    var url, err;                                                                                                      // 197\n    try {                                                                                                              // 198\n      throw new _Error();                                                                                              // 199\n    } catch (e) {                                                                                                      // 200\n      err = e;                                                                                                         // 201\n    }                                                                                                                  // 202\n    if (err) {                                                                                                         // 203\n      url = err.sourceURL || err.fileName || _getCurrentScriptUrlFromErrorStack(err.stack);                            // 204\n    }                                                                                                                  // 205\n    return url;                                                                                                        // 206\n  };                                                                                                                   // 207\n  /**                                                                                                                  // 208\n * Get the current script's URL.                                                                                       // 209\n *                                                                                                                     // 210\n * @returns String or `undefined`                                                                                      // 211\n * @private                                                                                                            // 212\n */                                                                                                                    // 213\n  var _getCurrentScriptUrl = function() {                                                                              // 214\n    var jsPath, scripts, i;                                                                                            // 215\n    if (_document.currentScript && (jsPath = _document.currentScript.src)) {                                           // 216\n      return jsPath;                                                                                                   // 217\n    }                                                                                                                  // 218\n    scripts = _document.getElementsByTagName(\"script\");                                                                // 219\n    if (scripts.length === 1) {                                                                                        // 220\n      return scripts[0].src || undefined;                                                                              // 221\n    }                                                                                                                  // 222\n    if (\"readyState\" in scripts[0]) {                                                                                  // 223\n      for (i = scripts.length; i--; ) {                                                                                // 224\n        if (scripts[i].readyState === \"interactive\" && (jsPath = scripts[i].src)) {                                    // 225\n          return jsPath;                                                                                               // 226\n        }                                                                                                              // 227\n      }                                                                                                                // 228\n    }                                                                                                                  // 229\n    if (_document.readyState === \"loading\" && (jsPath = scripts[scripts.length - 1].src)) {                            // 230\n      return jsPath;                                                                                                   // 231\n    }                                                                                                                  // 232\n    if (jsPath = _getCurrentScriptUrlFromError()) {                                                                    // 233\n      return jsPath;                                                                                                   // 234\n    }                                                                                                                  // 235\n    return undefined;                                                                                                  // 236\n  };                                                                                                                   // 237\n  /**                                                                                                                  // 238\n * Get the unanimous parent directory of ALL script tags.                                                              // 239\n * If any script tags are either (a) inline or (b) from differing parent                                               // 240\n * directories, this method must return `undefined`.                                                                   // 241\n *                                                                                                                     // 242\n * @returns String or `undefined`                                                                                      // 243\n * @private                                                                                                            // 244\n */                                                                                                                    // 245\n  var _getUnanimousScriptParentDir = function() {                                                                      // 246\n    var i, jsDir, jsPath, scripts = _document.getElementsByTagName(\"script\");                                          // 247\n    for (i = scripts.length; i--; ) {                                                                                  // 248\n      if (!(jsPath = scripts[i].src)) {                                                                                // 249\n        jsDir = null;                                                                                                  // 250\n        break;                                                                                                         // 251\n      }                                                                                                                // 252\n      jsPath = _getDirPathOfUrl(jsPath);                                                                               // 253\n      if (jsDir == null) {                                                                                             // 254\n        jsDir = jsPath;                                                                                                // 255\n      } else if (jsDir !== jsPath) {                                                                                   // 256\n        jsDir = null;                                                                                                  // 257\n        break;                                                                                                         // 258\n      }                                                                                                                // 259\n    }                                                                                                                  // 260\n    return jsDir || undefined;                                                                                         // 261\n  };                                                                                                                   // 262\n  /**                                                                                                                  // 263\n * Get the presumed location of the \"ZeroClipboard.swf\" file, based on the location                                    // 264\n * of the executing JavaScript file (e.g. \"ZeroClipboard.js\", etc.).                                                   // 265\n *                                                                                                                     // 266\n * @returns String                                                                                                     // 267\n * @private                                                                                                            // 268\n */                                                                                                                    // 269\n  var _getDefaultSwfPath = function() {                                                                                // 270\n    var jsDir = _getDirPathOfUrl(_getCurrentScriptUrl()) || _getUnanimousScriptParentDir() || \"\";                      // 271\n    return jsDir + \"ZeroClipboard.swf\";                                                                                // 272\n  };                                                                                                                   // 273\n  /**                                                                                                                  // 274\n * Is the client's operating system some version of Windows?                                                           // 275\n *                                                                                                                     // 276\n * @returns Boolean                                                                                                    // 277\n * @private                                                                                                            // 278\n */                                                                                                                    // 279\n  var _isWindows = function() {                                                                                        // 280\n    var isWindowsRegex = /win(dows|[\\s]?(nt|me|ce|xp|vista|[\\d]+))/i;                                                  // 281\n    return !!_navigator && (isWindowsRegex.test(_navigator.appVersion || \"\") || isWindowsRegex.test(_navigator.platform || \"\") || (_navigator.userAgent || \"\").indexOf(\"Windows\") !== -1);\n  };                                                                                                                   // 283\n  /**                                                                                                                  // 284\n * Keep track of if the page is framed (in an `iframe`). This can never change.                                        // 285\n * @private                                                                                                            // 286\n */                                                                                                                    // 287\n  var _pageIsFramed = function() {                                                                                     // 288\n    return window.opener == null && (!!window.top && window != window.top || !!window.parent && window != window.parent);\n  }();                                                                                                                 // 290\n  /**                                                                                                                  // 291\n * Keep track of the state of the Flash object.                                                                        // 292\n * @private                                                                                                            // 293\n */                                                                                                                    // 294\n  var _flashState = {                                                                                                  // 295\n    bridge: null,                                                                                                      // 296\n    version: \"0.0.0\",                                                                                                  // 297\n    pluginType: \"unknown\",                                                                                             // 298\n    disabled: null,                                                                                                    // 299\n    outdated: null,                                                                                                    // 300\n    sandboxed: null,                                                                                                   // 301\n    unavailable: null,                                                                                                 // 302\n    degraded: null,                                                                                                    // 303\n    deactivated: null,                                                                                                 // 304\n    overdue: null,                                                                                                     // 305\n    ready: null                                                                                                        // 306\n  };                                                                                                                   // 307\n  /**                                                                                                                  // 308\n * The minimum Flash Player version required to use ZeroClipboard completely.                                          // 309\n * @readonly                                                                                                           // 310\n * @private                                                                                                            // 311\n */                                                                                                                    // 312\n  var _minimumFlashVersion = \"11.0.0\";                                                                                 // 313\n  /**                                                                                                                  // 314\n * The ZeroClipboard library version number, as reported by Flash, at the time the SWF was compiled.                   // 315\n */                                                                                                                    // 316\n  var _zcSwfVersion;                                                                                                   // 317\n  /**                                                                                                                  // 318\n * Keep track of all event listener registrations.                                                                     // 319\n * @private                                                                                                            // 320\n */                                                                                                                    // 321\n  var _handlers = {};                                                                                                  // 322\n  /**                                                                                                                  // 323\n * Keep track of the currently activated element.                                                                      // 324\n * @private                                                                                                            // 325\n */                                                                                                                    // 326\n  var _currentElement;                                                                                                 // 327\n  /**                                                                                                                  // 328\n * Keep track of the element that was activated when a `copy` process started.                                         // 329\n * @private                                                                                                            // 330\n */                                                                                                                    // 331\n  var _copyTarget;                                                                                                     // 332\n  /**                                                                                                                  // 333\n * Keep track of data for the pending clipboard transaction.                                                           // 334\n * @private                                                                                                            // 335\n */                                                                                                                    // 336\n  var _clipData = {};                                                                                                  // 337\n  /**                                                                                                                  // 338\n * Keep track of data formats for the pending clipboard transaction.                                                   // 339\n * @private                                                                                                            // 340\n */                                                                                                                    // 341\n  var _clipDataFormatMap = null;                                                                                       // 342\n  /**                                                                                                                  // 343\n * Keep track of the Flash availability check timeout.                                                                 // 344\n * @private                                                                                                            // 345\n */                                                                                                                    // 346\n  var _flashCheckTimeout = 0;                                                                                          // 347\n  /**                                                                                                                  // 348\n * Keep track of SWF network errors interval polling.                                                                  // 349\n * @private                                                                                                            // 350\n */                                                                                                                    // 351\n  var _swfFallbackCheckInterval = 0;                                                                                   // 352\n  /**                                                                                                                  // 353\n * The `message` store for events                                                                                      // 354\n * @private                                                                                                            // 355\n */                                                                                                                    // 356\n  var _eventMessages = {                                                                                               // 357\n    ready: \"Flash communication is established\",                                                                       // 358\n    error: {                                                                                                           // 359\n      \"flash-disabled\": \"Flash is disabled or not installed. May also be attempting to run Flash in a sandboxed iframe, which is impossible.\",\n      \"flash-outdated\": \"Flash is too outdated to support ZeroClipboard\",                                              // 361\n      \"flash-sandboxed\": \"Attempting to run Flash in a sandboxed iframe, which is impossible\",                         // 362\n      \"flash-unavailable\": \"Flash is unable to communicate bidirectionally with JavaScript\",                           // 363\n      \"flash-degraded\": \"Flash is unable to preserve data fidelity when communicating with JavaScript\",                // 364\n      \"flash-deactivated\": \"Flash is too outdated for your browser and/or is configured as click-to-activate.\\nThis may also mean that the ZeroClipboard SWF object could not be loaded, so please check your `swfPath` configuration and/or network connectivity.\\nMay also be attempting to run Flash in a sandboxed iframe, which is impossible.\",\n      \"flash-overdue\": \"Flash communication was established but NOT within the acceptable time limit\",                 // 366\n      \"version-mismatch\": \"ZeroClipboard JS version number does not match ZeroClipboard SWF version number\",           // 367\n      \"clipboard-error\": \"At least one error was thrown while ZeroClipboard was attempting to inject your data into the clipboard\",\n      \"config-mismatch\": \"ZeroClipboard configuration does not match Flash's reality\",                                 // 369\n      \"swf-not-found\": \"The ZeroClipboard SWF object could not be loaded, so please check your `swfPath` configuration and/or network connectivity\"\n    }                                                                                                                  // 371\n  };                                                                                                                   // 372\n  /**                                                                                                                  // 373\n * The `name`s of `error` events that can only occur is Flash has at least                                             // 374\n * been able to load the SWF successfully.                                                                             // 375\n * @private                                                                                                            // 376\n */                                                                                                                    // 377\n  var _errorsThatOnlyOccurAfterFlashLoads = [ \"flash-unavailable\", \"flash-degraded\", \"flash-overdue\", \"version-mismatch\", \"config-mismatch\", \"clipboard-error\" ];\n  /**                                                                                                                  // 379\n * The `name`s of `error` events that should likely result in the `_flashState`                                        // 380\n * variable's property values being updated.                                                                           // 381\n * @private                                                                                                            // 382\n */                                                                                                                    // 383\n  var _flashStateErrorNames = [ \"flash-disabled\", \"flash-outdated\", \"flash-sandboxed\", \"flash-unavailable\", \"flash-degraded\", \"flash-deactivated\", \"flash-overdue\" ];\n  /**                                                                                                                  // 385\n * A RegExp to match the `name` property of `error` events related to Flash.                                           // 386\n * @private                                                                                                            // 387\n */                                                                                                                    // 388\n  var _flashStateErrorNameMatchingRegex = new RegExp(\"^flash-(\" + _flashStateErrorNames.map(function(errorName) {      // 389\n    return errorName.replace(/^flash-/, \"\");                                                                           // 390\n  }).join(\"|\") + \")$\");                                                                                                // 391\n  /**                                                                                                                  // 392\n * A RegExp to match the `name` property of `error` events related to Flash,                                           // 393\n * which is enabled.                                                                                                   // 394\n * @private                                                                                                            // 395\n */                                                                                                                    // 396\n  var _flashStateEnabledErrorNameMatchingRegex = new RegExp(\"^flash-(\" + _flashStateErrorNames.slice(1).map(function(errorName) {\n    return errorName.replace(/^flash-/, \"\");                                                                           // 398\n  }).join(\"|\") + \")$\");                                                                                                // 399\n  /**                                                                                                                  // 400\n * ZeroClipboard configuration defaults for the Core module.                                                           // 401\n * @private                                                                                                            // 402\n */                                                                                                                    // 403\n  var _globalConfig = {                                                                                                // 404\n    swfPath: _getDefaultSwfPath(),                                                                                     // 405\n    trustedDomains: window.location.host ? [ window.location.host ] : [],                                              // 406\n    cacheBust: true,                                                                                                   // 407\n    forceEnhancedClipboard: false,                                                                                     // 408\n    flashLoadTimeout: 3e4,                                                                                             // 409\n    autoActivate: true,                                                                                                // 410\n    bubbleEvents: true,                                                                                                // 411\n    fixLineEndings: true,                                                                                              // 412\n    containerId: \"global-zeroclipboard-html-bridge\",                                                                   // 413\n    containerClass: \"global-zeroclipboard-container\",                                                                  // 414\n    swfObjectId: \"global-zeroclipboard-flash-bridge\",                                                                  // 415\n    hoverClass: \"zeroclipboard-is-hover\",                                                                              // 416\n    activeClass: \"zeroclipboard-is-active\",                                                                            // 417\n    forceHandCursor: false,                                                                                            // 418\n    title: null,                                                                                                       // 419\n    zIndex: 999999999                                                                                                  // 420\n  };                                                                                                                   // 421\n  /**                                                                                                                  // 422\n * The underlying implementation of `ZeroClipboard.config`.                                                            // 423\n * @private                                                                                                            // 424\n */                                                                                                                    // 425\n  var _config = function(options) {                                                                                    // 426\n    if (typeof options === \"object\" && options !== null) {                                                             // 427\n      for (var prop in options) {                                                                                      // 428\n        if (_hasOwn.call(options, prop)) {                                                                             // 429\n          if (/^(?:forceHandCursor|title|zIndex|bubbleEvents|fixLineEndings)$/.test(prop)) {                           // 430\n            _globalConfig[prop] = options[prop];                                                                       // 431\n          } else if (_flashState.bridge == null) {                                                                     // 432\n            if (prop === \"containerId\" || prop === \"swfObjectId\") {                                                    // 433\n              if (_isValidHtml4Id(options[prop])) {                                                                    // 434\n                _globalConfig[prop] = options[prop];                                                                   // 435\n              } else {                                                                                                 // 436\n                throw new Error(\"The specified `\" + prop + \"` value is not valid as an HTML4 Element ID\");             // 437\n              }                                                                                                        // 438\n            } else {                                                                                                   // 439\n              _globalConfig[prop] = options[prop];                                                                     // 440\n            }                                                                                                          // 441\n          }                                                                                                            // 442\n        }                                                                                                              // 443\n      }                                                                                                                // 444\n    }                                                                                                                  // 445\n    if (typeof options === \"string\" && options) {                                                                      // 446\n      if (_hasOwn.call(_globalConfig, options)) {                                                                      // 447\n        return _globalConfig[options];                                                                                 // 448\n      }                                                                                                                // 449\n      return;                                                                                                          // 450\n    }                                                                                                                  // 451\n    return _deepCopy(_globalConfig);                                                                                   // 452\n  };                                                                                                                   // 453\n  /**                                                                                                                  // 454\n * The underlying implementation of `ZeroClipboard.state`.                                                             // 455\n * @private                                                                                                            // 456\n */                                                                                                                    // 457\n  var _state = function() {                                                                                            // 458\n    _detectSandbox();                                                                                                  // 459\n    return {                                                                                                           // 460\n      browser: _pick(_navigator, [ \"userAgent\", \"platform\", \"appName\", \"appVersion\" ]),                                // 461\n      flash: _omit(_flashState, [ \"bridge\" ]),                                                                         // 462\n      zeroclipboard: {                                                                                                 // 463\n        version: ZeroClipboard.version,                                                                                // 464\n        config: ZeroClipboard.config()                                                                                 // 465\n      }                                                                                                                // 466\n    };                                                                                                                 // 467\n  };                                                                                                                   // 468\n  /**                                                                                                                  // 469\n * The underlying implementation of `ZeroClipboard.isFlashUnusable`.                                                   // 470\n * @private                                                                                                            // 471\n */                                                                                                                    // 472\n  var _isFlashUnusable = function() {                                                                                  // 473\n    return !!(_flashState.disabled || _flashState.outdated || _flashState.sandboxed || _flashState.unavailable || _flashState.degraded || _flashState.deactivated);\n  };                                                                                                                   // 475\n  /**                                                                                                                  // 476\n * The underlying implementation of `ZeroClipboard.on`.                                                                // 477\n * @private                                                                                                            // 478\n */                                                                                                                    // 479\n  var _on = function(eventType, listener) {                                                                            // 480\n    var i, len, events, added = {};                                                                                    // 481\n    if (typeof eventType === \"string\" && eventType) {                                                                  // 482\n      events = eventType.toLowerCase().split(/\\s+/);                                                                   // 483\n    } else if (typeof eventType === \"object\" && eventType && typeof listener === \"undefined\") {                        // 484\n      for (i in eventType) {                                                                                           // 485\n        if (_hasOwn.call(eventType, i) && typeof i === \"string\" && i && typeof eventType[i] === \"function\") {          // 486\n          ZeroClipboard.on(i, eventType[i]);                                                                           // 487\n        }                                                                                                              // 488\n      }                                                                                                                // 489\n    }                                                                                                                  // 490\n    if (events && events.length) {                                                                                     // 491\n      for (i = 0, len = events.length; i < len; i++) {                                                                 // 492\n        eventType = events[i].replace(/^on/, \"\");                                                                      // 493\n        added[eventType] = true;                                                                                       // 494\n        if (!_handlers[eventType]) {                                                                                   // 495\n          _handlers[eventType] = [];                                                                                   // 496\n        }                                                                                                              // 497\n        _handlers[eventType].push(listener);                                                                           // 498\n      }                                                                                                                // 499\n      if (added.ready && _flashState.ready) {                                                                          // 500\n        ZeroClipboard.emit({                                                                                           // 501\n          type: \"ready\"                                                                                                // 502\n        });                                                                                                            // 503\n      }                                                                                                                // 504\n      if (added.error) {                                                                                               // 505\n        for (i = 0, len = _flashStateErrorNames.length; i < len; i++) {                                                // 506\n          if (_flashState[_flashStateErrorNames[i].replace(/^flash-/, \"\")] === true) {                                 // 507\n            ZeroClipboard.emit({                                                                                       // 508\n              type: \"error\",                                                                                           // 509\n              name: _flashStateErrorNames[i]                                                                           // 510\n            });                                                                                                        // 511\n            break;                                                                                                     // 512\n          }                                                                                                            // 513\n        }                                                                                                              // 514\n        if (_zcSwfVersion !== undefined && ZeroClipboard.version !== _zcSwfVersion) {                                  // 515\n          ZeroClipboard.emit({                                                                                         // 516\n            type: \"error\",                                                                                             // 517\n            name: \"version-mismatch\",                                                                                  // 518\n            jsVersion: ZeroClipboard.version,                                                                          // 519\n            swfVersion: _zcSwfVersion                                                                                  // 520\n          });                                                                                                          // 521\n        }                                                                                                              // 522\n      }                                                                                                                // 523\n    }                                                                                                                  // 524\n    return ZeroClipboard;                                                                                              // 525\n  };                                                                                                                   // 526\n  /**                                                                                                                  // 527\n * The underlying implementation of `ZeroClipboard.off`.                                                               // 528\n * @private                                                                                                            // 529\n */                                                                                                                    // 530\n  var _off = function(eventType, listener) {                                                                           // 531\n    var i, len, foundIndex, events, perEventHandlers;                                                                  // 532\n    if (arguments.length === 0) {                                                                                      // 533\n      events = _keys(_handlers);                                                                                       // 534\n    } else if (typeof eventType === \"string\" && eventType) {                                                           // 535\n      events = eventType.split(/\\s+/);                                                                                 // 536\n    } else if (typeof eventType === \"object\" && eventType && typeof listener === \"undefined\") {                        // 537\n      for (i in eventType) {                                                                                           // 538\n        if (_hasOwn.call(eventType, i) && typeof i === \"string\" && i && typeof eventType[i] === \"function\") {          // 539\n          ZeroClipboard.off(i, eventType[i]);                                                                          // 540\n        }                                                                                                              // 541\n      }                                                                                                                // 542\n    }                                                                                                                  // 543\n    if (events && events.length) {                                                                                     // 544\n      for (i = 0, len = events.length; i < len; i++) {                                                                 // 545\n        eventType = events[i].toLowerCase().replace(/^on/, \"\");                                                        // 546\n        perEventHandlers = _handlers[eventType];                                                                       // 547\n        if (perEventHandlers && perEventHandlers.length) {                                                             // 548\n          if (listener) {                                                                                              // 549\n            foundIndex = perEventHandlers.indexOf(listener);                                                           // 550\n            while (foundIndex !== -1) {                                                                                // 551\n              perEventHandlers.splice(foundIndex, 1);                                                                  // 552\n              foundIndex = perEventHandlers.indexOf(listener, foundIndex);                                             // 553\n            }                                                                                                          // 554\n          } else {                                                                                                     // 555\n            perEventHandlers.length = 0;                                                                               // 556\n          }                                                                                                            // 557\n        }                                                                                                              // 558\n      }                                                                                                                // 559\n    }                                                                                                                  // 560\n    return ZeroClipboard;                                                                                              // 561\n  };                                                                                                                   // 562\n  /**                                                                                                                  // 563\n * The underlying implementation of `ZeroClipboard.handlers`.                                                          // 564\n * @private                                                                                                            // 565\n */                                                                                                                    // 566\n  var _listeners = function(eventType) {                                                                               // 567\n    var copy;                                                                                                          // 568\n    if (typeof eventType === \"string\" && eventType) {                                                                  // 569\n      copy = _deepCopy(_handlers[eventType]) || null;                                                                  // 570\n    } else {                                                                                                           // 571\n      copy = _deepCopy(_handlers);                                                                                     // 572\n    }                                                                                                                  // 573\n    return copy;                                                                                                       // 574\n  };                                                                                                                   // 575\n  /**                                                                                                                  // 576\n * The underlying implementation of `ZeroClipboard.emit`.                                                              // 577\n * @private                                                                                                            // 578\n */                                                                                                                    // 579\n  var _emit = function(event) {                                                                                        // 580\n    var eventCopy, returnVal, tmp;                                                                                     // 581\n    event = _createEvent(event);                                                                                       // 582\n    if (!event) {                                                                                                      // 583\n      return;                                                                                                          // 584\n    }                                                                                                                  // 585\n    if (_preprocessEvent(event)) {                                                                                     // 586\n      return;                                                                                                          // 587\n    }                                                                                                                  // 588\n    if (event.type === \"ready\" && _flashState.overdue === true) {                                                      // 589\n      return ZeroClipboard.emit({                                                                                      // 590\n        type: \"error\",                                                                                                 // 591\n        name: \"flash-overdue\"                                                                                          // 592\n      });                                                                                                              // 593\n    }                                                                                                                  // 594\n    eventCopy = _extend({}, event);                                                                                    // 595\n    _dispatchCallbacks.call(this, eventCopy);                                                                          // 596\n    if (event.type === \"copy\") {                                                                                       // 597\n      tmp = _mapClipDataToFlash(_clipData);                                                                            // 598\n      returnVal = tmp.data;                                                                                            // 599\n      _clipDataFormatMap = tmp.formatMap;                                                                              // 600\n    }                                                                                                                  // 601\n    return returnVal;                                                                                                  // 602\n  };                                                                                                                   // 603\n  /**                                                                                                                  // 604\n * The underlying implementation of `ZeroClipboard.create`.                                                            // 605\n * @private                                                                                                            // 606\n */                                                                                                                    // 607\n  var _create = function() {                                                                                           // 608\n    var previousState = _flashState.sandboxed;                                                                         // 609\n    _detectSandbox();                                                                                                  // 610\n    if (typeof _flashState.ready !== \"boolean\") {                                                                      // 611\n      _flashState.ready = false;                                                                                       // 612\n    }                                                                                                                  // 613\n    if (_flashState.sandboxed !== previousState && _flashState.sandboxed === true) {                                   // 614\n      _flashState.ready = false;                                                                                       // 615\n      ZeroClipboard.emit({                                                                                             // 616\n        type: \"error\",                                                                                                 // 617\n        name: \"flash-sandboxed\"                                                                                        // 618\n      });                                                                                                              // 619\n    } else if (!ZeroClipboard.isFlashUnusable() && _flashState.bridge === null) {                                      // 620\n      var maxWait = _globalConfig.flashLoadTimeout;                                                                    // 621\n      if (typeof maxWait === \"number\" && maxWait >= 0) {                                                               // 622\n        _flashCheckTimeout = _setTimeout(function() {                                                                  // 623\n          if (typeof _flashState.deactivated !== \"boolean\") {                                                          // 624\n            _flashState.deactivated = true;                                                                            // 625\n          }                                                                                                            // 626\n          if (_flashState.deactivated === true) {                                                                      // 627\n            ZeroClipboard.emit({                                                                                       // 628\n              type: \"error\",                                                                                           // 629\n              name: \"flash-deactivated\"                                                                                // 630\n            });                                                                                                        // 631\n          }                                                                                                            // 632\n        }, maxWait);                                                                                                   // 633\n      }                                                                                                                // 634\n      _flashState.overdue = false;                                                                                     // 635\n      _embedSwf();                                                                                                     // 636\n    }                                                                                                                  // 637\n  };                                                                                                                   // 638\n  /**                                                                                                                  // 639\n * The underlying implementation of `ZeroClipboard.destroy`.                                                           // 640\n * @private                                                                                                            // 641\n */                                                                                                                    // 642\n  var _destroy = function() {                                                                                          // 643\n    ZeroClipboard.clearData();                                                                                         // 644\n    ZeroClipboard.blur();                                                                                              // 645\n    ZeroClipboard.emit(\"destroy\");                                                                                     // 646\n    _unembedSwf();                                                                                                     // 647\n    ZeroClipboard.off();                                                                                               // 648\n  };                                                                                                                   // 649\n  /**                                                                                                                  // 650\n * The underlying implementation of `ZeroClipboard.setData`.                                                           // 651\n * @private                                                                                                            // 652\n */                                                                                                                    // 653\n  var _setData = function(format, data) {                                                                              // 654\n    var dataObj;                                                                                                       // 655\n    if (typeof format === \"object\" && format && typeof data === \"undefined\") {                                         // 656\n      dataObj = format;                                                                                                // 657\n      ZeroClipboard.clearData();                                                                                       // 658\n    } else if (typeof format === \"string\" && format) {                                                                 // 659\n      dataObj = {};                                                                                                    // 660\n      dataObj[format] = data;                                                                                          // 661\n    } else {                                                                                                           // 662\n      return;                                                                                                          // 663\n    }                                                                                                                  // 664\n    for (var dataFormat in dataObj) {                                                                                  // 665\n      if (typeof dataFormat === \"string\" && dataFormat && _hasOwn.call(dataObj, dataFormat) && typeof dataObj[dataFormat] === \"string\" && dataObj[dataFormat]) {\n        _clipData[dataFormat] = _fixLineEndings(dataObj[dataFormat]);                                                  // 667\n      }                                                                                                                // 668\n    }                                                                                                                  // 669\n  };                                                                                                                   // 670\n  /**                                                                                                                  // 671\n * The underlying implementation of `ZeroClipboard.clearData`.                                                         // 672\n * @private                                                                                                            // 673\n */                                                                                                                    // 674\n  var _clearData = function(format) {                                                                                  // 675\n    if (typeof format === \"undefined\") {                                                                               // 676\n      _deleteOwnProperties(_clipData);                                                                                 // 677\n      _clipDataFormatMap = null;                                                                                       // 678\n    } else if (typeof format === \"string\" && _hasOwn.call(_clipData, format)) {                                        // 679\n      delete _clipData[format];                                                                                        // 680\n    }                                                                                                                  // 681\n  };                                                                                                                   // 682\n  /**                                                                                                                  // 683\n * The underlying implementation of `ZeroClipboard.getData`.                                                           // 684\n * @private                                                                                                            // 685\n */                                                                                                                    // 686\n  var _getData = function(format) {                                                                                    // 687\n    if (typeof format === \"undefined\") {                                                                               // 688\n      return _deepCopy(_clipData);                                                                                     // 689\n    } else if (typeof format === \"string\" && _hasOwn.call(_clipData, format)) {                                        // 690\n      return _clipData[format];                                                                                        // 691\n    }                                                                                                                  // 692\n  };                                                                                                                   // 693\n  /**                                                                                                                  // 694\n * The underlying implementation of `ZeroClipboard.focus`/`ZeroClipboard.activate`.                                    // 695\n * @private                                                                                                            // 696\n */                                                                                                                    // 697\n  var _focus = function(element) {                                                                                     // 698\n    if (!(element && element.nodeType === 1)) {                                                                        // 699\n      return;                                                                                                          // 700\n    }                                                                                                                  // 701\n    if (_currentElement) {                                                                                             // 702\n      _removeClass(_currentElement, _globalConfig.activeClass);                                                        // 703\n      if (_currentElement !== element) {                                                                               // 704\n        _removeClass(_currentElement, _globalConfig.hoverClass);                                                       // 705\n      }                                                                                                                // 706\n    }                                                                                                                  // 707\n    _currentElement = element;                                                                                         // 708\n    _addClass(element, _globalConfig.hoverClass);                                                                      // 709\n    var newTitle = element.getAttribute(\"title\") || _globalConfig.title;                                               // 710\n    if (typeof newTitle === \"string\" && newTitle) {                                                                    // 711\n      var htmlBridge = _getHtmlBridge(_flashState.bridge);                                                             // 712\n      if (htmlBridge) {                                                                                                // 713\n        htmlBridge.setAttribute(\"title\", newTitle);                                                                    // 714\n      }                                                                                                                // 715\n    }                                                                                                                  // 716\n    var useHandCursor = _globalConfig.forceHandCursor === true || _getStyle(element, \"cursor\") === \"pointer\";          // 717\n    _setHandCursor(useHandCursor);                                                                                     // 718\n    _reposition();                                                                                                     // 719\n  };                                                                                                                   // 720\n  /**                                                                                                                  // 721\n * The underlying implementation of `ZeroClipboard.blur`/`ZeroClipboard.deactivate`.                                   // 722\n * @private                                                                                                            // 723\n */                                                                                                                    // 724\n  var _blur = function() {                                                                                             // 725\n    var htmlBridge = _getHtmlBridge(_flashState.bridge);                                                               // 726\n    if (htmlBridge) {                                                                                                  // 727\n      htmlBridge.removeAttribute(\"title\");                                                                             // 728\n      htmlBridge.style.left = \"0px\";                                                                                   // 729\n      htmlBridge.style.top = \"-9999px\";                                                                                // 730\n      htmlBridge.style.width = \"1px\";                                                                                  // 731\n      htmlBridge.style.height = \"1px\";                                                                                 // 732\n    }                                                                                                                  // 733\n    if (_currentElement) {                                                                                             // 734\n      _removeClass(_currentElement, _globalConfig.hoverClass);                                                         // 735\n      _removeClass(_currentElement, _globalConfig.activeClass);                                                        // 736\n      _currentElement = null;                                                                                          // 737\n    }                                                                                                                  // 738\n  };                                                                                                                   // 739\n  /**                                                                                                                  // 740\n * The underlying implementation of `ZeroClipboard.activeElement`.                                                     // 741\n * @private                                                                                                            // 742\n */                                                                                                                    // 743\n  var _activeElement = function() {                                                                                    // 744\n    return _currentElement || null;                                                                                    // 745\n  };                                                                                                                   // 746\n  /**                                                                                                                  // 747\n * Check if a value is a valid HTML4 `ID` or `Name` token.                                                             // 748\n * @private                                                                                                            // 749\n */                                                                                                                    // 750\n  var _isValidHtml4Id = function(id) {                                                                                 // 751\n    return typeof id === \"string\" && id && /^[A-Za-z][A-Za-z0-9_:\\-\\.]*$/.test(id);                                    // 752\n  };                                                                                                                   // 753\n  /**                                                                                                                  // 754\n * Create or update an `event` object, based on the `eventType`.                                                       // 755\n * @private                                                                                                            // 756\n */                                                                                                                    // 757\n  var _createEvent = function(event) {                                                                                 // 758\n    var eventType;                                                                                                     // 759\n    if (typeof event === \"string\" && event) {                                                                          // 760\n      eventType = event;                                                                                               // 761\n      event = {};                                                                                                      // 762\n    } else if (typeof event === \"object\" && event && typeof event.type === \"string\" && event.type) {                   // 763\n      eventType = event.type;                                                                                          // 764\n    }                                                                                                                  // 765\n    if (!eventType) {                                                                                                  // 766\n      return;                                                                                                          // 767\n    }                                                                                                                  // 768\n    eventType = eventType.toLowerCase();                                                                               // 769\n    if (!event.target && (/^(copy|aftercopy|_click)$/.test(eventType) || eventType === \"error\" && event.name === \"clipboard-error\")) {\n      event.target = _copyTarget;                                                                                      // 771\n    }                                                                                                                  // 772\n    _extend(event, {                                                                                                   // 773\n      type: eventType,                                                                                                 // 774\n      target: event.target || _currentElement || null,                                                                 // 775\n      relatedTarget: event.relatedTarget || null,                                                                      // 776\n      currentTarget: _flashState && _flashState.bridge || null,                                                        // 777\n      timeStamp: event.timeStamp || _now() || null                                                                     // 778\n    });                                                                                                                // 779\n    var msg = _eventMessages[event.type];                                                                              // 780\n    if (event.type === \"error\" && event.name && msg) {                                                                 // 781\n      msg = msg[event.name];                                                                                           // 782\n    }                                                                                                                  // 783\n    if (msg) {                                                                                                         // 784\n      event.message = msg;                                                                                             // 785\n    }                                                                                                                  // 786\n    if (event.type === \"ready\") {                                                                                      // 787\n      _extend(event, {                                                                                                 // 788\n        target: null,                                                                                                  // 789\n        version: _flashState.version                                                                                   // 790\n      });                                                                                                              // 791\n    }                                                                                                                  // 792\n    if (event.type === \"error\") {                                                                                      // 793\n      if (_flashStateErrorNameMatchingRegex.test(event.name)) {                                                        // 794\n        _extend(event, {                                                                                               // 795\n          target: null,                                                                                                // 796\n          minimumVersion: _minimumFlashVersion                                                                         // 797\n        });                                                                                                            // 798\n      }                                                                                                                // 799\n      if (_flashStateEnabledErrorNameMatchingRegex.test(event.name)) {                                                 // 800\n        _extend(event, {                                                                                               // 801\n          version: _flashState.version                                                                                 // 802\n        });                                                                                                            // 803\n      }                                                                                                                // 804\n    }                                                                                                                  // 805\n    if (event.type === \"copy\") {                                                                                       // 806\n      event.clipboardData = {                                                                                          // 807\n        setData: ZeroClipboard.setData,                                                                                // 808\n        clearData: ZeroClipboard.clearData                                                                             // 809\n      };                                                                                                               // 810\n    }                                                                                                                  // 811\n    if (event.type === \"aftercopy\") {                                                                                  // 812\n      event = _mapClipResultsFromFlash(event, _clipDataFormatMap);                                                     // 813\n    }                                                                                                                  // 814\n    if (event.target && !event.relatedTarget) {                                                                        // 815\n      event.relatedTarget = _getRelatedTarget(event.target);                                                           // 816\n    }                                                                                                                  // 817\n    return _addMouseData(event);                                                                                       // 818\n  };                                                                                                                   // 819\n  /**                                                                                                                  // 820\n * Get a relatedTarget from the target's `data-clipboard-target` attribute                                             // 821\n * @private                                                                                                            // 822\n */                                                                                                                    // 823\n  var _getRelatedTarget = function(targetEl) {                                                                         // 824\n    var relatedTargetId = targetEl && targetEl.getAttribute && targetEl.getAttribute(\"data-clipboard-target\");         // 825\n    return relatedTargetId ? _document.getElementById(relatedTargetId) : null;                                         // 826\n  };                                                                                                                   // 827\n  /**                                                                                                                  // 828\n * Add element and position data to `MouseEvent` instances                                                             // 829\n * @private                                                                                                            // 830\n */                                                                                                                    // 831\n  var _addMouseData = function(event) {                                                                                // 832\n    if (event && /^_(?:click|mouse(?:over|out|down|up|move))$/.test(event.type)) {                                     // 833\n      var srcElement = event.target;                                                                                   // 834\n      var fromElement = event.type === \"_mouseover\" && event.relatedTarget ? event.relatedTarget : undefined;          // 835\n      var toElement = event.type === \"_mouseout\" && event.relatedTarget ? event.relatedTarget : undefined;             // 836\n      var pos = _getElementPosition(srcElement);                                                                       // 837\n      var screenLeft = _window.screenLeft || _window.screenX || 0;                                                     // 838\n      var screenTop = _window.screenTop || _window.screenY || 0;                                                       // 839\n      var scrollLeft = _document.body.scrollLeft + _document.documentElement.scrollLeft;                               // 840\n      var scrollTop = _document.body.scrollTop + _document.documentElement.scrollTop;                                  // 841\n      var pageX = pos.left + (typeof event._stageX === \"number\" ? event._stageX : 0);                                  // 842\n      var pageY = pos.top + (typeof event._stageY === \"number\" ? event._stageY : 0);                                   // 843\n      var clientX = pageX - scrollLeft;                                                                                // 844\n      var clientY = pageY - scrollTop;                                                                                 // 845\n      var screenX = screenLeft + clientX;                                                                              // 846\n      var screenY = screenTop + clientY;                                                                               // 847\n      var moveX = typeof event.movementX === \"number\" ? event.movementX : 0;                                           // 848\n      var moveY = typeof event.movementY === \"number\" ? event.movementY : 0;                                           // 849\n      delete event._stageX;                                                                                            // 850\n      delete event._stageY;                                                                                            // 851\n      _extend(event, {                                                                                                 // 852\n        srcElement: srcElement,                                                                                        // 853\n        fromElement: fromElement,                                                                                      // 854\n        toElement: toElement,                                                                                          // 855\n        screenX: screenX,                                                                                              // 856\n        screenY: screenY,                                                                                              // 857\n        pageX: pageX,                                                                                                  // 858\n        pageY: pageY,                                                                                                  // 859\n        clientX: clientX,                                                                                              // 860\n        clientY: clientY,                                                                                              // 861\n        x: clientX,                                                                                                    // 862\n        y: clientY,                                                                                                    // 863\n        movementX: moveX,                                                                                              // 864\n        movementY: moveY,                                                                                              // 865\n        offsetX: 0,                                                                                                    // 866\n        offsetY: 0,                                                                                                    // 867\n        layerX: 0,                                                                                                     // 868\n        layerY: 0                                                                                                      // 869\n      });                                                                                                              // 870\n    }                                                                                                                  // 871\n    return event;                                                                                                      // 872\n  };                                                                                                                   // 873\n  /**                                                                                                                  // 874\n * Determine if an event's registered handlers should be execute synchronously or asynchronously.                      // 875\n *                                                                                                                     // 876\n * @returns {boolean}                                                                                                  // 877\n * @private                                                                                                            // 878\n */                                                                                                                    // 879\n  var _shouldPerformAsync = function(event) {                                                                          // 880\n    var eventType = event && typeof event.type === \"string\" && event.type || \"\";                                       // 881\n    return !/^(?:(?:before)?copy|destroy)$/.test(eventType);                                                           // 882\n  };                                                                                                                   // 883\n  /**                                                                                                                  // 884\n * Control if a callback should be executed asynchronously or not.                                                     // 885\n *                                                                                                                     // 886\n * @returns `undefined`                                                                                                // 887\n * @private                                                                                                            // 888\n */                                                                                                                    // 889\n  var _dispatchCallback = function(func, context, args, async) {                                                       // 890\n    if (async) {                                                                                                       // 891\n      _setTimeout(function() {                                                                                         // 892\n        func.apply(context, args);                                                                                     // 893\n      }, 0);                                                                                                           // 894\n    } else {                                                                                                           // 895\n      func.apply(context, args);                                                                                       // 896\n    }                                                                                                                  // 897\n  };                                                                                                                   // 898\n  /**                                                                                                                  // 899\n * Handle the actual dispatching of events to client instances.                                                        // 900\n *                                                                                                                     // 901\n * @returns `undefined`                                                                                                // 902\n * @private                                                                                                            // 903\n */                                                                                                                    // 904\n  var _dispatchCallbacks = function(event) {                                                                           // 905\n    if (!(typeof event === \"object\" && event && event.type)) {                                                         // 906\n      return;                                                                                                          // 907\n    }                                                                                                                  // 908\n    var async = _shouldPerformAsync(event);                                                                            // 909\n    var wildcardTypeHandlers = _handlers[\"*\"] || [];                                                                   // 910\n    var specificTypeHandlers = _handlers[event.type] || [];                                                            // 911\n    var handlers = wildcardTypeHandlers.concat(specificTypeHandlers);                                                  // 912\n    if (handlers && handlers.length) {                                                                                 // 913\n      var i, len, func, context, eventCopy, originalContext = this;                                                    // 914\n      for (i = 0, len = handlers.length; i < len; i++) {                                                               // 915\n        func = handlers[i];                                                                                            // 916\n        context = originalContext;                                                                                     // 917\n        if (typeof func === \"string\" && typeof _window[func] === \"function\") {                                         // 918\n          func = _window[func];                                                                                        // 919\n        }                                                                                                              // 920\n        if (typeof func === \"object\" && func && typeof func.handleEvent === \"function\") {                              // 921\n          context = func;                                                                                              // 922\n          func = func.handleEvent;                                                                                     // 923\n        }                                                                                                              // 924\n        if (typeof func === \"function\") {                                                                              // 925\n          eventCopy = _extend({}, event);                                                                              // 926\n          _dispatchCallback(func, context, [ eventCopy ], async);                                                      // 927\n        }                                                                                                              // 928\n      }                                                                                                                // 929\n    }                                                                                                                  // 930\n    return this;                                                                                                       // 931\n  };                                                                                                                   // 932\n  /**                                                                                                                  // 933\n * Check an `error` event's `name` property to see if Flash has                                                        // 934\n * already loaded, which rules out possible `iframe` sandboxing.                                                       // 935\n * @private                                                                                                            // 936\n */                                                                                                                    // 937\n  var _getSandboxStatusFromErrorEvent = function(event) {                                                              // 938\n    var isSandboxed = null;                                                                                            // 939\n    if (_pageIsFramed === false || event && event.type === \"error\" && event.name && _errorsThatOnlyOccurAfterFlashLoads.indexOf(event.name) !== -1) {\n      isSandboxed = false;                                                                                             // 941\n    }                                                                                                                  // 942\n    return isSandboxed;                                                                                                // 943\n  };                                                                                                                   // 944\n  /**                                                                                                                  // 945\n * Preprocess any special behaviors, reactions, or state changes after receiving this event.                           // 946\n * Executes only once per event emitted, NOT once per client.                                                          // 947\n * @private                                                                                                            // 948\n */                                                                                                                    // 949\n  var _preprocessEvent = function(event) {                                                                             // 950\n    var element = event.target || _currentElement || null;                                                             // 951\n    var sourceIsSwf = event._source === \"swf\";                                                                         // 952\n    delete event._source;                                                                                              // 953\n    switch (event.type) {                                                                                              // 954\n     case \"error\":                                                                                                     // 955\n      var isSandboxed = event.name === \"flash-sandboxed\" || _getSandboxStatusFromErrorEvent(event);                    // 956\n      if (typeof isSandboxed === \"boolean\") {                                                                          // 957\n        _flashState.sandboxed = isSandboxed;                                                                           // 958\n      }                                                                                                                // 959\n      if (_flashStateErrorNames.indexOf(event.name) !== -1) {                                                          // 960\n        _extend(_flashState, {                                                                                         // 961\n          disabled: event.name === \"flash-disabled\",                                                                   // 962\n          outdated: event.name === \"flash-outdated\",                                                                   // 963\n          unavailable: event.name === \"flash-unavailable\",                                                             // 964\n          degraded: event.name === \"flash-degraded\",                                                                   // 965\n          deactivated: event.name === \"flash-deactivated\",                                                             // 966\n          overdue: event.name === \"flash-overdue\",                                                                     // 967\n          ready: false                                                                                                 // 968\n        });                                                                                                            // 969\n      } else if (event.name === \"version-mismatch\") {                                                                  // 970\n        _zcSwfVersion = event.swfVersion;                                                                              // 971\n        _extend(_flashState, {                                                                                         // 972\n          disabled: false,                                                                                             // 973\n          outdated: false,                                                                                             // 974\n          unavailable: false,                                                                                          // 975\n          degraded: false,                                                                                             // 976\n          deactivated: false,                                                                                          // 977\n          overdue: false,                                                                                              // 978\n          ready: false                                                                                                 // 979\n        });                                                                                                            // 980\n      }                                                                                                                // 981\n      _clearTimeoutsAndPolling();                                                                                      // 982\n      break;                                                                                                           // 983\n                                                                                                                       // 984\n     case \"ready\":                                                                                                     // 985\n      _zcSwfVersion = event.swfVersion;                                                                                // 986\n      var wasDeactivated = _flashState.deactivated === true;                                                           // 987\n      _extend(_flashState, {                                                                                           // 988\n        disabled: false,                                                                                               // 989\n        outdated: false,                                                                                               // 990\n        sandboxed: false,                                                                                              // 991\n        unavailable: false,                                                                                            // 992\n        degraded: false,                                                                                               // 993\n        deactivated: false,                                                                                            // 994\n        overdue: wasDeactivated,                                                                                       // 995\n        ready: !wasDeactivated                                                                                         // 996\n      });                                                                                                              // 997\n      _clearTimeoutsAndPolling();                                                                                      // 998\n      break;                                                                                                           // 999\n                                                                                                                       // 1000\n     case \"beforecopy\":                                                                                                // 1001\n      _copyTarget = element;                                                                                           // 1002\n      break;                                                                                                           // 1003\n                                                                                                                       // 1004\n     case \"copy\":                                                                                                      // 1005\n      var textContent, htmlContent, targetEl = event.relatedTarget;                                                    // 1006\n      if (!(_clipData[\"text/html\"] || _clipData[\"text/plain\"]) && targetEl && (htmlContent = targetEl.value || targetEl.outerHTML || targetEl.innerHTML) && (textContent = targetEl.value || targetEl.textContent || targetEl.innerText)) {\n        event.clipboardData.clearData();                                                                               // 1008\n        event.clipboardData.setData(\"text/plain\", textContent);                                                        // 1009\n        if (htmlContent !== textContent) {                                                                             // 1010\n          event.clipboardData.setData(\"text/html\", htmlContent);                                                       // 1011\n        }                                                                                                              // 1012\n      } else if (!_clipData[\"text/plain\"] && event.target && (textContent = event.target.getAttribute(\"data-clipboard-text\"))) {\n        event.clipboardData.clearData();                                                                               // 1014\n        event.clipboardData.setData(\"text/plain\", textContent);                                                        // 1015\n      }                                                                                                                // 1016\n      break;                                                                                                           // 1017\n                                                                                                                       // 1018\n     case \"aftercopy\":                                                                                                 // 1019\n      _queueEmitClipboardErrors(event);                                                                                // 1020\n      ZeroClipboard.clearData();                                                                                       // 1021\n      if (element && element !== _safeActiveElement() && element.focus) {                                              // 1022\n        element.focus();                                                                                               // 1023\n      }                                                                                                                // 1024\n      break;                                                                                                           // 1025\n                                                                                                                       // 1026\n     case \"_mouseover\":                                                                                                // 1027\n      ZeroClipboard.focus(element);                                                                                    // 1028\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {                                                        // 1029\n        if (element && element !== event.relatedTarget && !_containedBy(event.relatedTarget, element)) {               // 1030\n          _fireMouseEvent(_extend({}, event, {                                                                         // 1031\n            type: \"mouseenter\",                                                                                        // 1032\n            bubbles: false,                                                                                            // 1033\n            cancelable: false                                                                                          // 1034\n          }));                                                                                                         // 1035\n        }                                                                                                              // 1036\n        _fireMouseEvent(_extend({}, event, {                                                                           // 1037\n          type: \"mouseover\"                                                                                            // 1038\n        }));                                                                                                           // 1039\n      }                                                                                                                // 1040\n      break;                                                                                                           // 1041\n                                                                                                                       // 1042\n     case \"_mouseout\":                                                                                                 // 1043\n      ZeroClipboard.blur();                                                                                            // 1044\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {                                                        // 1045\n        if (element && element !== event.relatedTarget && !_containedBy(event.relatedTarget, element)) {               // 1046\n          _fireMouseEvent(_extend({}, event, {                                                                         // 1047\n            type: \"mouseleave\",                                                                                        // 1048\n            bubbles: false,                                                                                            // 1049\n            cancelable: false                                                                                          // 1050\n          }));                                                                                                         // 1051\n        }                                                                                                              // 1052\n        _fireMouseEvent(_extend({}, event, {                                                                           // 1053\n          type: \"mouseout\"                                                                                             // 1054\n        }));                                                                                                           // 1055\n      }                                                                                                                // 1056\n      break;                                                                                                           // 1057\n                                                                                                                       // 1058\n     case \"_mousedown\":                                                                                                // 1059\n      _addClass(element, _globalConfig.activeClass);                                                                   // 1060\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {                                                        // 1061\n        _fireMouseEvent(_extend({}, event, {                                                                           // 1062\n          type: event.type.slice(1)                                                                                    // 1063\n        }));                                                                                                           // 1064\n      }                                                                                                                // 1065\n      break;                                                                                                           // 1066\n                                                                                                                       // 1067\n     case \"_mouseup\":                                                                                                  // 1068\n      _removeClass(element, _globalConfig.activeClass);                                                                // 1069\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {                                                        // 1070\n        _fireMouseEvent(_extend({}, event, {                                                                           // 1071\n          type: event.type.slice(1)                                                                                    // 1072\n        }));                                                                                                           // 1073\n      }                                                                                                                // 1074\n      break;                                                                                                           // 1075\n                                                                                                                       // 1076\n     case \"_click\":                                                                                                    // 1077\n      _copyTarget = null;                                                                                              // 1078\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {                                                        // 1079\n        _fireMouseEvent(_extend({}, event, {                                                                           // 1080\n          type: event.type.slice(1)                                                                                    // 1081\n        }));                                                                                                           // 1082\n      }                                                                                                                // 1083\n      break;                                                                                                           // 1084\n                                                                                                                       // 1085\n     case \"_mousemove\":                                                                                                // 1086\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {                                                        // 1087\n        _fireMouseEvent(_extend({}, event, {                                                                           // 1088\n          type: event.type.slice(1)                                                                                    // 1089\n        }));                                                                                                           // 1090\n      }                                                                                                                // 1091\n      break;                                                                                                           // 1092\n    }                                                                                                                  // 1093\n    if (/^_(?:click|mouse(?:over|out|down|up|move))$/.test(event.type)) {                                              // 1094\n      return true;                                                                                                     // 1095\n    }                                                                                                                  // 1096\n  };                                                                                                                   // 1097\n  /**                                                                                                                  // 1098\n * Check an \"aftercopy\" event for clipboard errors and emit a corresponding \"error\" event.                             // 1099\n * @private                                                                                                            // 1100\n */                                                                                                                    // 1101\n  var _queueEmitClipboardErrors = function(aftercopyEvent) {                                                           // 1102\n    if (aftercopyEvent.errors && aftercopyEvent.errors.length > 0) {                                                   // 1103\n      var errorEvent = _deepCopy(aftercopyEvent);                                                                      // 1104\n      _extend(errorEvent, {                                                                                            // 1105\n        type: \"error\",                                                                                                 // 1106\n        name: \"clipboard-error\"                                                                                        // 1107\n      });                                                                                                              // 1108\n      delete errorEvent.success;                                                                                       // 1109\n      _setTimeout(function() {                                                                                         // 1110\n        ZeroClipboard.emit(errorEvent);                                                                                // 1111\n      }, 0);                                                                                                           // 1112\n    }                                                                                                                  // 1113\n  };                                                                                                                   // 1114\n  /**                                                                                                                  // 1115\n * Dispatch a synthetic MouseEvent.                                                                                    // 1116\n *                                                                                                                     // 1117\n * @returns `undefined`                                                                                                // 1118\n * @private                                                                                                            // 1119\n */                                                                                                                    // 1120\n  var _fireMouseEvent = function(event) {                                                                              // 1121\n    if (!(event && typeof event.type === \"string\" && event)) {                                                         // 1122\n      return;                                                                                                          // 1123\n    }                                                                                                                  // 1124\n    var e, target = event.target || null, doc = target && target.ownerDocument || _document, defaults = {              // 1125\n      view: doc.defaultView || _window,                                                                                // 1126\n      canBubble: true,                                                                                                 // 1127\n      cancelable: true,                                                                                                // 1128\n      detail: event.type === \"click\" ? 1 : 0,                                                                          // 1129\n      button: typeof event.which === \"number\" ? event.which - 1 : typeof event.button === \"number\" ? event.button : doc.createEvent ? 0 : 1\n    }, args = _extend(defaults, event);                                                                                // 1131\n    if (!target) {                                                                                                     // 1132\n      return;                                                                                                          // 1133\n    }                                                                                                                  // 1134\n    if (doc.createEvent && target.dispatchEvent) {                                                                     // 1135\n      args = [ args.type, args.canBubble, args.cancelable, args.view, args.detail, args.screenX, args.screenY, args.clientX, args.clientY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.button, args.relatedTarget ];\n      e = doc.createEvent(\"MouseEvents\");                                                                              // 1137\n      if (e.initMouseEvent) {                                                                                          // 1138\n        e.initMouseEvent.apply(e, args);                                                                               // 1139\n        e._source = \"js\";                                                                                              // 1140\n        target.dispatchEvent(e);                                                                                       // 1141\n      }                                                                                                                // 1142\n    }                                                                                                                  // 1143\n  };                                                                                                                   // 1144\n  /**                                                                                                                  // 1145\n * Continuously poll the DOM until either:                                                                             // 1146\n *  (a) the fallback content becomes visible, or                                                                       // 1147\n *  (b) we receive an event from SWF (handled elsewhere)                                                               // 1148\n *                                                                                                                     // 1149\n * IMPORTANT:                                                                                                          // 1150\n * This is NOT a necessary check but it can result in significantly faster                                             // 1151\n * detection of bad `swfPath` configuration and/or network/server issues [in                                           // 1152\n * supported browsers] than waiting for the entire `flashLoadTimeout` duration                                         // 1153\n * to elapse before detecting that the SWF cannot be loaded. The detection                                             // 1154\n * duration can be anywhere from 10-30 times faster [in supported browsers] by                                         // 1155\n * using this approach.                                                                                                // 1156\n *                                                                                                                     // 1157\n * @returns `undefined`                                                                                                // 1158\n * @private                                                                                                            // 1159\n */                                                                                                                    // 1160\n  var _watchForSwfFallbackContent = function() {                                                                       // 1161\n    var maxWait = _globalConfig.flashLoadTimeout;                                                                      // 1162\n    if (typeof maxWait === \"number\" && maxWait >= 0) {                                                                 // 1163\n      var pollWait = Math.min(1e3, maxWait / 10);                                                                      // 1164\n      var fallbackContentId = _globalConfig.swfObjectId + \"_fallbackContent\";                                          // 1165\n      _swfFallbackCheckInterval = _setInterval(function() {                                                            // 1166\n        var el = _document.getElementById(fallbackContentId);                                                          // 1167\n        if (_isElementVisible(el)) {                                                                                   // 1168\n          _clearTimeoutsAndPolling();                                                                                  // 1169\n          _flashState.deactivated = null;                                                                              // 1170\n          ZeroClipboard.emit({                                                                                         // 1171\n            type: \"error\",                                                                                             // 1172\n            name: \"swf-not-found\"                                                                                      // 1173\n          });                                                                                                          // 1174\n        }                                                                                                              // 1175\n      }, pollWait);                                                                                                    // 1176\n    }                                                                                                                  // 1177\n  };                                                                                                                   // 1178\n  /**                                                                                                                  // 1179\n * Create the HTML bridge element to embed the Flash object into.                                                      // 1180\n * @private                                                                                                            // 1181\n */                                                                                                                    // 1182\n  var _createHtmlBridge = function() {                                                                                 // 1183\n    var container = _document.createElement(\"div\");                                                                    // 1184\n    container.id = _globalConfig.containerId;                                                                          // 1185\n    container.className = _globalConfig.containerClass;                                                                // 1186\n    container.style.position = \"absolute\";                                                                             // 1187\n    container.style.left = \"0px\";                                                                                      // 1188\n    container.style.top = \"-9999px\";                                                                                   // 1189\n    container.style.width = \"1px\";                                                                                     // 1190\n    container.style.height = \"1px\";                                                                                    // 1191\n    container.style.zIndex = \"\" + _getSafeZIndex(_globalConfig.zIndex);                                                // 1192\n    return container;                                                                                                  // 1193\n  };                                                                                                                   // 1194\n  /**                                                                                                                  // 1195\n * Get the HTML element container that wraps the Flash bridge object/element.                                          // 1196\n * @private                                                                                                            // 1197\n */                                                                                                                    // 1198\n  var _getHtmlBridge = function(flashBridge) {                                                                         // 1199\n    var htmlBridge = flashBridge && flashBridge.parentNode;                                                            // 1200\n    while (htmlBridge && htmlBridge.nodeName === \"OBJECT\" && htmlBridge.parentNode) {                                  // 1201\n      htmlBridge = htmlBridge.parentNode;                                                                              // 1202\n    }                                                                                                                  // 1203\n    return htmlBridge || null;                                                                                         // 1204\n  };                                                                                                                   // 1205\n  /**                                                                                                                  // 1206\n * Create the SWF object.                                                                                              // 1207\n *                                                                                                                     // 1208\n * @returns The SWF object reference.                                                                                  // 1209\n * @private                                                                                                            // 1210\n */                                                                                                                    // 1211\n  var _embedSwf = function() {                                                                                         // 1212\n    var len, flashBridge = _flashState.bridge, container = _getHtmlBridge(flashBridge);                                // 1213\n    if (!flashBridge) {                                                                                                // 1214\n      var allowScriptAccess = _determineScriptAccess(_window.location.host, _globalConfig);                            // 1215\n      var allowNetworking = allowScriptAccess === \"never\" ? \"none\" : \"all\";                                            // 1216\n      var flashvars = _vars(_extend({                                                                                  // 1217\n        jsVersion: ZeroClipboard.version                                                                               // 1218\n      }, _globalConfig));                                                                                              // 1219\n      var swfUrl = _globalConfig.swfPath + _cacheBust(_globalConfig.swfPath, _globalConfig);                           // 1220\n      container = _createHtmlBridge();                                                                                 // 1221\n      var divToBeReplaced = _document.createElement(\"div\");                                                            // 1222\n      container.appendChild(divToBeReplaced);                                                                          // 1223\n      _document.body.appendChild(container);                                                                           // 1224\n      var tmpDiv = _document.createElement(\"div\");                                                                     // 1225\n      var usingActiveX = _flashState.pluginType === \"activex\";                                                         // 1226\n      tmpDiv.innerHTML = '<object id=\"' + _globalConfig.swfObjectId + '\" name=\"' + _globalConfig.swfObjectId + '\" ' + 'width=\"100%\" height=\"100%\" ' + (usingActiveX ? 'classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"' : 'type=\"application/x-shockwave-flash\" data=\"' + swfUrl + '\"') + \">\" + (usingActiveX ? '<param name=\"movie\" value=\"' + swfUrl + '\"/>' : \"\") + '<param name=\"allowScriptAccess\" value=\"' + allowScriptAccess + '\"/>' + '<param name=\"allowNetworking\" value=\"' + allowNetworking + '\"/>' + '<param name=\"menu\" value=\"false\"/>' + '<param name=\"wmode\" value=\"transparent\"/>' + '<param name=\"flashvars\" value=\"' + flashvars + '\"/>' + '<div id=\"' + _globalConfig.swfObjectId + '_fallbackContent\">&nbsp;</div>' + \"</object>\";\n      flashBridge = tmpDiv.firstChild;                                                                                 // 1228\n      tmpDiv = null;                                                                                                   // 1229\n      _unwrap(flashBridge).ZeroClipboard = ZeroClipboard;                                                              // 1230\n      container.replaceChild(flashBridge, divToBeReplaced);                                                            // 1231\n      _watchForSwfFallbackContent();                                                                                   // 1232\n    }                                                                                                                  // 1233\n    if (!flashBridge) {                                                                                                // 1234\n      flashBridge = _document[_globalConfig.swfObjectId];                                                              // 1235\n      if (flashBridge && (len = flashBridge.length)) {                                                                 // 1236\n        flashBridge = flashBridge[len - 1];                                                                            // 1237\n      }                                                                                                                // 1238\n      if (!flashBridge && container) {                                                                                 // 1239\n        flashBridge = container.firstChild;                                                                            // 1240\n      }                                                                                                                // 1241\n    }                                                                                                                  // 1242\n    _flashState.bridge = flashBridge || null;                                                                          // 1243\n    return flashBridge;                                                                                                // 1244\n  };                                                                                                                   // 1245\n  /**                                                                                                                  // 1246\n * Destroy the SWF object.                                                                                             // 1247\n * @private                                                                                                            // 1248\n */                                                                                                                    // 1249\n  var _unembedSwf = function() {                                                                                       // 1250\n    var flashBridge = _flashState.bridge;                                                                              // 1251\n    if (flashBridge) {                                                                                                 // 1252\n      var htmlBridge = _getHtmlBridge(flashBridge);                                                                    // 1253\n      if (htmlBridge) {                                                                                                // 1254\n        if (_flashState.pluginType === \"activex\" && \"readyState\" in flashBridge) {                                     // 1255\n          flashBridge.style.display = \"none\";                                                                          // 1256\n          (function removeSwfFromIE() {                                                                                // 1257\n            if (flashBridge.readyState === 4) {                                                                        // 1258\n              for (var prop in flashBridge) {                                                                          // 1259\n                if (typeof flashBridge[prop] === \"function\") {                                                         // 1260\n                  flashBridge[prop] = null;                                                                            // 1261\n                }                                                                                                      // 1262\n              }                                                                                                        // 1263\n              if (flashBridge.parentNode) {                                                                            // 1264\n                flashBridge.parentNode.removeChild(flashBridge);                                                       // 1265\n              }                                                                                                        // 1266\n              if (htmlBridge.parentNode) {                                                                             // 1267\n                htmlBridge.parentNode.removeChild(htmlBridge);                                                         // 1268\n              }                                                                                                        // 1269\n            } else {                                                                                                   // 1270\n              _setTimeout(removeSwfFromIE, 10);                                                                        // 1271\n            }                                                                                                          // 1272\n          })();                                                                                                        // 1273\n        } else {                                                                                                       // 1274\n          if (flashBridge.parentNode) {                                                                                // 1275\n            flashBridge.parentNode.removeChild(flashBridge);                                                           // 1276\n          }                                                                                                            // 1277\n          if (htmlBridge.parentNode) {                                                                                 // 1278\n            htmlBridge.parentNode.removeChild(htmlBridge);                                                             // 1279\n          }                                                                                                            // 1280\n        }                                                                                                              // 1281\n      }                                                                                                                // 1282\n      _clearTimeoutsAndPolling();                                                                                      // 1283\n      _flashState.ready = null;                                                                                        // 1284\n      _flashState.bridge = null;                                                                                       // 1285\n      _flashState.deactivated = null;                                                                                  // 1286\n      _zcSwfVersion = undefined;                                                                                       // 1287\n    }                                                                                                                  // 1288\n  };                                                                                                                   // 1289\n  /**                                                                                                                  // 1290\n * Map the data format names of the \"clipData\" to Flash-friendly names.                                                // 1291\n *                                                                                                                     // 1292\n * @returns A new transformed object.                                                                                  // 1293\n * @private                                                                                                            // 1294\n */                                                                                                                    // 1295\n  var _mapClipDataToFlash = function(clipData) {                                                                       // 1296\n    var newClipData = {}, formatMap = {};                                                                              // 1297\n    if (!(typeof clipData === \"object\" && clipData)) {                                                                 // 1298\n      return;                                                                                                          // 1299\n    }                                                                                                                  // 1300\n    for (var dataFormat in clipData) {                                                                                 // 1301\n      if (dataFormat && _hasOwn.call(clipData, dataFormat) && typeof clipData[dataFormat] === \"string\" && clipData[dataFormat]) {\n        switch (dataFormat.toLowerCase()) {                                                                            // 1303\n         case \"text/plain\":                                                                                            // 1304\n         case \"text\":                                                                                                  // 1305\n         case \"air:text\":                                                                                              // 1306\n         case \"flash:text\":                                                                                            // 1307\n          newClipData.text = clipData[dataFormat];                                                                     // 1308\n          formatMap.text = dataFormat;                                                                                 // 1309\n          break;                                                                                                       // 1310\n                                                                                                                       // 1311\n         case \"text/html\":                                                                                             // 1312\n         case \"html\":                                                                                                  // 1313\n         case \"air:html\":                                                                                              // 1314\n         case \"flash:html\":                                                                                            // 1315\n          newClipData.html = clipData[dataFormat];                                                                     // 1316\n          formatMap.html = dataFormat;                                                                                 // 1317\n          break;                                                                                                       // 1318\n                                                                                                                       // 1319\n         case \"application/rtf\":                                                                                       // 1320\n         case \"text/rtf\":                                                                                              // 1321\n         case \"rtf\":                                                                                                   // 1322\n         case \"richtext\":                                                                                              // 1323\n         case \"air:rtf\":                                                                                               // 1324\n         case \"flash:rtf\":                                                                                             // 1325\n          newClipData.rtf = clipData[dataFormat];                                                                      // 1326\n          formatMap.rtf = dataFormat;                                                                                  // 1327\n          break;                                                                                                       // 1328\n                                                                                                                       // 1329\n         default:                                                                                                      // 1330\n          break;                                                                                                       // 1331\n        }                                                                                                              // 1332\n      }                                                                                                                // 1333\n    }                                                                                                                  // 1334\n    return {                                                                                                           // 1335\n      data: newClipData,                                                                                               // 1336\n      formatMap: formatMap                                                                                             // 1337\n    };                                                                                                                 // 1338\n  };                                                                                                                   // 1339\n  /**                                                                                                                  // 1340\n * Map the data format names from Flash-friendly names back to their original \"clipData\" names (via a format mapping). // 1341\n *                                                                                                                     // 1342\n * @returns A new transformed object.                                                                                  // 1343\n * @private                                                                                                            // 1344\n */                                                                                                                    // 1345\n  var _mapClipResultsFromFlash = function(clipResults, formatMap) {                                                    // 1346\n    if (!(typeof clipResults === \"object\" && clipResults && typeof formatMap === \"object\" && formatMap)) {             // 1347\n      return clipResults;                                                                                              // 1348\n    }                                                                                                                  // 1349\n    var newResults = {};                                                                                               // 1350\n    for (var prop in clipResults) {                                                                                    // 1351\n      if (_hasOwn.call(clipResults, prop)) {                                                                           // 1352\n        if (prop === \"errors\") {                                                                                       // 1353\n          newResults[prop] = clipResults[prop] ? clipResults[prop].slice() : [];                                       // 1354\n          for (var i = 0, len = newResults[prop].length; i < len; i++) {                                               // 1355\n            newResults[prop][i].format = formatMap[newResults[prop][i].format];                                        // 1356\n          }                                                                                                            // 1357\n        } else if (prop !== \"success\" && prop !== \"data\") {                                                            // 1358\n          newResults[prop] = clipResults[prop];                                                                        // 1359\n        } else {                                                                                                       // 1360\n          newResults[prop] = {};                                                                                       // 1361\n          var tmpHash = clipResults[prop];                                                                             // 1362\n          for (var dataFormat in tmpHash) {                                                                            // 1363\n            if (dataFormat && _hasOwn.call(tmpHash, dataFormat) && _hasOwn.call(formatMap, dataFormat)) {              // 1364\n              newResults[prop][formatMap[dataFormat]] = tmpHash[dataFormat];                                           // 1365\n            }                                                                                                          // 1366\n          }                                                                                                            // 1367\n        }                                                                                                              // 1368\n      }                                                                                                                // 1369\n    }                                                                                                                  // 1370\n    return newResults;                                                                                                 // 1371\n  };                                                                                                                   // 1372\n  /**                                                                                                                  // 1373\n * Will look at a path, and will create a \"?noCache={time}\" or \"&noCache={time}\"                                       // 1374\n * query param string to return. Does NOT append that string to the original path.                                     // 1375\n * This is useful because ExternalInterface often breaks when a Flash SWF is cached.                                   // 1376\n *                                                                                                                     // 1377\n * @returns The `noCache` query param with necessary \"?\"/\"&\" prefix.                                                   // 1378\n * @private                                                                                                            // 1379\n */                                                                                                                    // 1380\n  var _cacheBust = function(path, options) {                                                                           // 1381\n    var cacheBust = options == null || options && options.cacheBust === true;                                          // 1382\n    if (cacheBust) {                                                                                                   // 1383\n      return (path.indexOf(\"?\") === -1 ? \"?\" : \"&\") + \"noCache=\" + _now();                                             // 1384\n    } else {                                                                                                           // 1385\n      return \"\";                                                                                                       // 1386\n    }                                                                                                                  // 1387\n  };                                                                                                                   // 1388\n  /**                                                                                                                  // 1389\n * Creates a query string for the FlashVars param.                                                                     // 1390\n * Does NOT include the cache-busting query param.                                                                     // 1391\n *                                                                                                                     // 1392\n * @returns FlashVars query string                                                                                     // 1393\n * @private                                                                                                            // 1394\n */                                                                                                                    // 1395\n  var _vars = function(options) {                                                                                      // 1396\n    var i, len, domain, domains, str = \"\", trustedOriginsExpanded = [];                                                // 1397\n    if (options.trustedDomains) {                                                                                      // 1398\n      if (typeof options.trustedDomains === \"string\") {                                                                // 1399\n        domains = [ options.trustedDomains ];                                                                          // 1400\n      } else if (typeof options.trustedDomains === \"object\" && \"length\" in options.trustedDomains) {                   // 1401\n        domains = options.trustedDomains;                                                                              // 1402\n      }                                                                                                                // 1403\n    }                                                                                                                  // 1404\n    if (domains && domains.length) {                                                                                   // 1405\n      for (i = 0, len = domains.length; i < len; i++) {                                                                // 1406\n        if (_hasOwn.call(domains, i) && domains[i] && typeof domains[i] === \"string\") {                                // 1407\n          domain = _extractDomain(domains[i]);                                                                         // 1408\n          if (!domain) {                                                                                               // 1409\n            continue;                                                                                                  // 1410\n          }                                                                                                            // 1411\n          if (domain === \"*\") {                                                                                        // 1412\n            trustedOriginsExpanded.length = 0;                                                                         // 1413\n            trustedOriginsExpanded.push(domain);                                                                       // 1414\n            break;                                                                                                     // 1415\n          }                                                                                                            // 1416\n          trustedOriginsExpanded.push.apply(trustedOriginsExpanded, [ domain, \"//\" + domain, _window.location.protocol + \"//\" + domain ]);\n        }                                                                                                              // 1418\n      }                                                                                                                // 1419\n    }                                                                                                                  // 1420\n    if (trustedOriginsExpanded.length) {                                                                               // 1421\n      str += \"trustedOrigins=\" + _encodeURIComponent(trustedOriginsExpanded.join(\",\"));                                // 1422\n    }                                                                                                                  // 1423\n    if (options.forceEnhancedClipboard === true) {                                                                     // 1424\n      str += (str ? \"&\" : \"\") + \"forceEnhancedClipboard=true\";                                                         // 1425\n    }                                                                                                                  // 1426\n    if (typeof options.swfObjectId === \"string\" && options.swfObjectId) {                                              // 1427\n      str += (str ? \"&\" : \"\") + \"swfObjectId=\" + _encodeURIComponent(options.swfObjectId);                             // 1428\n    }                                                                                                                  // 1429\n    if (typeof options.jsVersion === \"string\" && options.jsVersion) {                                                  // 1430\n      str += (str ? \"&\" : \"\") + \"jsVersion=\" + _encodeURIComponent(options.jsVersion);                                 // 1431\n    }                                                                                                                  // 1432\n    return str;                                                                                                        // 1433\n  };                                                                                                                   // 1434\n  /**                                                                                                                  // 1435\n * Extract the domain (e.g. \"github.com\") from an origin (e.g. \"https://github.com\") or                                // 1436\n * URL (e.g. \"https://github.com/zeroclipboard/zeroclipboard/\").                                                       // 1437\n *                                                                                                                     // 1438\n * @returns the domain                                                                                                 // 1439\n * @private                                                                                                            // 1440\n */                                                                                                                    // 1441\n  var _extractDomain = function(originOrUrl) {                                                                         // 1442\n    if (originOrUrl == null || originOrUrl === \"\") {                                                                   // 1443\n      return null;                                                                                                     // 1444\n    }                                                                                                                  // 1445\n    originOrUrl = originOrUrl.replace(/^\\s+|\\s+$/g, \"\");                                                               // 1446\n    if (originOrUrl === \"\") {                                                                                          // 1447\n      return null;                                                                                                     // 1448\n    }                                                                                                                  // 1449\n    var protocolIndex = originOrUrl.indexOf(\"//\");                                                                     // 1450\n    originOrUrl = protocolIndex === -1 ? originOrUrl : originOrUrl.slice(protocolIndex + 2);                           // 1451\n    var pathIndex = originOrUrl.indexOf(\"/\");                                                                          // 1452\n    originOrUrl = pathIndex === -1 ? originOrUrl : protocolIndex === -1 || pathIndex === 0 ? null : originOrUrl.slice(0, pathIndex);\n    if (originOrUrl && originOrUrl.slice(-4).toLowerCase() === \".swf\") {                                               // 1454\n      return null;                                                                                                     // 1455\n    }                                                                                                                  // 1456\n    return originOrUrl || null;                                                                                        // 1457\n  };                                                                                                                   // 1458\n  /**                                                                                                                  // 1459\n * Set `allowScriptAccess` based on `trustedDomains` and `window.location.host` vs. `swfPath`.                         // 1460\n *                                                                                                                     // 1461\n * @returns The appropriate script access level.                                                                       // 1462\n * @private                                                                                                            // 1463\n */                                                                                                                    // 1464\n  var _determineScriptAccess = function() {                                                                            // 1465\n    var _extractAllDomains = function(origins) {                                                                       // 1466\n      var i, len, tmp, resultsArray = [];                                                                              // 1467\n      if (typeof origins === \"string\") {                                                                               // 1468\n        origins = [ origins ];                                                                                         // 1469\n      }                                                                                                                // 1470\n      if (!(typeof origins === \"object\" && origins && typeof origins.length === \"number\")) {                           // 1471\n        return resultsArray;                                                                                           // 1472\n      }                                                                                                                // 1473\n      for (i = 0, len = origins.length; i < len; i++) {                                                                // 1474\n        if (_hasOwn.call(origins, i) && (tmp = _extractDomain(origins[i]))) {                                          // 1475\n          if (tmp === \"*\") {                                                                                           // 1476\n            resultsArray.length = 0;                                                                                   // 1477\n            resultsArray.push(\"*\");                                                                                    // 1478\n            break;                                                                                                     // 1479\n          }                                                                                                            // 1480\n          if (resultsArray.indexOf(tmp) === -1) {                                                                      // 1481\n            resultsArray.push(tmp);                                                                                    // 1482\n          }                                                                                                            // 1483\n        }                                                                                                              // 1484\n      }                                                                                                                // 1485\n      return resultsArray;                                                                                             // 1486\n    };                                                                                                                 // 1487\n    return function(currentDomain, configOptions) {                                                                    // 1488\n      var swfDomain = _extractDomain(configOptions.swfPath);                                                           // 1489\n      if (swfDomain === null) {                                                                                        // 1490\n        swfDomain = currentDomain;                                                                                     // 1491\n      }                                                                                                                // 1492\n      var trustedDomains = _extractAllDomains(configOptions.trustedDomains);                                           // 1493\n      var len = trustedDomains.length;                                                                                 // 1494\n      if (len > 0) {                                                                                                   // 1495\n        if (len === 1 && trustedDomains[0] === \"*\") {                                                                  // 1496\n          return \"always\";                                                                                             // 1497\n        }                                                                                                              // 1498\n        if (trustedDomains.indexOf(currentDomain) !== -1) {                                                            // 1499\n          if (len === 1 && currentDomain === swfDomain) {                                                              // 1500\n            return \"sameDomain\";                                                                                       // 1501\n          }                                                                                                            // 1502\n          return \"always\";                                                                                             // 1503\n        }                                                                                                              // 1504\n      }                                                                                                                // 1505\n      return \"never\";                                                                                                  // 1506\n    };                                                                                                                 // 1507\n  }();                                                                                                                 // 1508\n  /**                                                                                                                  // 1509\n * Get the currently active/focused DOM element.                                                                       // 1510\n *                                                                                                                     // 1511\n * @returns the currently active/focused element, or `null`                                                            // 1512\n * @private                                                                                                            // 1513\n */                                                                                                                    // 1514\n  var _safeActiveElement = function() {                                                                                // 1515\n    try {                                                                                                              // 1516\n      return _document.activeElement;                                                                                  // 1517\n    } catch (err) {                                                                                                    // 1518\n      return null;                                                                                                     // 1519\n    }                                                                                                                  // 1520\n  };                                                                                                                   // 1521\n  /**                                                                                                                  // 1522\n * Add a class to an element, if it doesn't already have it.                                                           // 1523\n *                                                                                                                     // 1524\n * @returns The element, with its new class added.                                                                     // 1525\n * @private                                                                                                            // 1526\n */                                                                                                                    // 1527\n  var _addClass = function(element, value) {                                                                           // 1528\n    var c, cl, className, classNames = [];                                                                             // 1529\n    if (typeof value === \"string\" && value) {                                                                          // 1530\n      classNames = value.split(/\\s+/);                                                                                 // 1531\n    }                                                                                                                  // 1532\n    if (element && element.nodeType === 1 && classNames.length > 0) {                                                  // 1533\n      className = (\" \" + (element.className || \"\") + \" \").replace(/[\\t\\r\\n\\f]/g, \" \");                                 // 1534\n      for (c = 0, cl = classNames.length; c < cl; c++) {                                                               // 1535\n        if (className.indexOf(\" \" + classNames[c] + \" \") === -1) {                                                     // 1536\n          className += classNames[c] + \" \";                                                                            // 1537\n        }                                                                                                              // 1538\n      }                                                                                                                // 1539\n      className = className.replace(/^\\s+|\\s+$/g, \"\");                                                                 // 1540\n      if (className !== element.className) {                                                                           // 1541\n        element.className = className;                                                                                 // 1542\n      }                                                                                                                // 1543\n    }                                                                                                                  // 1544\n    return element;                                                                                                    // 1545\n  };                                                                                                                   // 1546\n  /**                                                                                                                  // 1547\n * Remove a class from an element, if it has it.                                                                       // 1548\n *                                                                                                                     // 1549\n * @returns The element, with its class removed.                                                                       // 1550\n * @private                                                                                                            // 1551\n */                                                                                                                    // 1552\n  var _removeClass = function(element, value) {                                                                        // 1553\n    var c, cl, className, classNames = [];                                                                             // 1554\n    if (typeof value === \"string\" && value) {                                                                          // 1555\n      classNames = value.split(/\\s+/);                                                                                 // 1556\n    }                                                                                                                  // 1557\n    if (element && element.nodeType === 1 && classNames.length > 0) {                                                  // 1558\n      if (element.className) {                                                                                         // 1559\n        className = (\" \" + element.className + \" \").replace(/[\\t\\r\\n\\f]/g, \" \");                                       // 1560\n        for (c = 0, cl = classNames.length; c < cl; c++) {                                                             // 1561\n          className = className.replace(\" \" + classNames[c] + \" \", \" \");                                               // 1562\n        }                                                                                                              // 1563\n        className = className.replace(/^\\s+|\\s+$/g, \"\");                                                               // 1564\n        if (className !== element.className) {                                                                         // 1565\n          element.className = className;                                                                               // 1566\n        }                                                                                                              // 1567\n      }                                                                                                                // 1568\n    }                                                                                                                  // 1569\n    return element;                                                                                                    // 1570\n  };                                                                                                                   // 1571\n  /**                                                                                                                  // 1572\n * Attempt to interpret the element's CSS styling. If `prop` is `\"cursor\"`,                                            // 1573\n * then we assume that it should be a hand (\"pointer\") cursor if the element                                           // 1574\n * is an anchor element (\"a\" tag).                                                                                     // 1575\n *                                                                                                                     // 1576\n * @returns The computed style property.                                                                               // 1577\n * @private                                                                                                            // 1578\n */                                                                                                                    // 1579\n  var _getStyle = function(el, prop) {                                                                                 // 1580\n    var value = _getComputedStyle(el, null).getPropertyValue(prop);                                                    // 1581\n    if (prop === \"cursor\") {                                                                                           // 1582\n      if (!value || value === \"auto\") {                                                                                // 1583\n        if (el.nodeName === \"A\") {                                                                                     // 1584\n          return \"pointer\";                                                                                            // 1585\n        }                                                                                                              // 1586\n      }                                                                                                                // 1587\n    }                                                                                                                  // 1588\n    return value;                                                                                                      // 1589\n  };                                                                                                                   // 1590\n  /**                                                                                                                  // 1591\n * Get the absolutely positioned coordinates of a DOM element.                                                         // 1592\n *                                                                                                                     // 1593\n * @returns Object containing the element's position, width, and height.                                               // 1594\n * @private                                                                                                            // 1595\n */                                                                                                                    // 1596\n  var _getElementPosition = function(el) {                                                                             // 1597\n    var pos = {                                                                                                        // 1598\n      left: 0,                                                                                                         // 1599\n      top: 0,                                                                                                          // 1600\n      width: 0,                                                                                                        // 1601\n      height: 0                                                                                                        // 1602\n    };                                                                                                                 // 1603\n    if (el.getBoundingClientRect) {                                                                                    // 1604\n      var elRect = el.getBoundingClientRect();                                                                         // 1605\n      var pageXOffset = _window.pageXOffset;                                                                           // 1606\n      var pageYOffset = _window.pageYOffset;                                                                           // 1607\n      var leftBorderWidth = _document.documentElement.clientLeft || 0;                                                 // 1608\n      var topBorderWidth = _document.documentElement.clientTop || 0;                                                   // 1609\n      var leftBodyOffset = 0;                                                                                          // 1610\n      var topBodyOffset = 0;                                                                                           // 1611\n      if (_getStyle(_document.body, \"position\") === \"relative\") {                                                      // 1612\n        var bodyRect = _document.body.getBoundingClientRect();                                                         // 1613\n        var htmlRect = _document.documentElement.getBoundingClientRect();                                              // 1614\n        leftBodyOffset = bodyRect.left - htmlRect.left || 0;                                                           // 1615\n        topBodyOffset = bodyRect.top - htmlRect.top || 0;                                                              // 1616\n      }                                                                                                                // 1617\n      pos.left = elRect.left + pageXOffset - leftBorderWidth - leftBodyOffset;                                         // 1618\n      pos.top = elRect.top + pageYOffset - topBorderWidth - topBodyOffset;                                             // 1619\n      pos.width = \"width\" in elRect ? elRect.width : elRect.right - elRect.left;                                       // 1620\n      pos.height = \"height\" in elRect ? elRect.height : elRect.bottom - elRect.top;                                    // 1621\n    }                                                                                                                  // 1622\n    return pos;                                                                                                        // 1623\n  };                                                                                                                   // 1624\n  /**                                                                                                                  // 1625\n * Determine is an element is visible somewhere within the document (page).                                            // 1626\n *                                                                                                                     // 1627\n * @returns Boolean                                                                                                    // 1628\n * @private                                                                                                            // 1629\n */                                                                                                                    // 1630\n  var _isElementVisible = function(el) {                                                                               // 1631\n    if (!el) {                                                                                                         // 1632\n      return false;                                                                                                    // 1633\n    }                                                                                                                  // 1634\n    var styles = _getComputedStyle(el, null);                                                                          // 1635\n    if (!styles) {                                                                                                     // 1636\n      return false;                                                                                                    // 1637\n    }                                                                                                                  // 1638\n    var hasCssHeight = _parseFloat(styles.height) > 0;                                                                 // 1639\n    var hasCssWidth = _parseFloat(styles.width) > 0;                                                                   // 1640\n    var hasCssTop = _parseFloat(styles.top) >= 0;                                                                      // 1641\n    var hasCssLeft = _parseFloat(styles.left) >= 0;                                                                    // 1642\n    var cssKnows = hasCssHeight && hasCssWidth && hasCssTop && hasCssLeft;                                             // 1643\n    var rect = cssKnows ? null : _getElementPosition(el);                                                              // 1644\n    var isVisible = styles.display !== \"none\" && styles.visibility !== \"collapse\" && (cssKnows || !!rect && (hasCssHeight || rect.height > 0) && (hasCssWidth || rect.width > 0) && (hasCssTop || rect.top >= 0) && (hasCssLeft || rect.left >= 0));\n    return isVisible;                                                                                                  // 1646\n  };                                                                                                                   // 1647\n  /**                                                                                                                  // 1648\n * Clear all existing timeouts and interval polling delegates.                                                         // 1649\n *                                                                                                                     // 1650\n * @returns `undefined`                                                                                                // 1651\n * @private                                                                                                            // 1652\n */                                                                                                                    // 1653\n  var _clearTimeoutsAndPolling = function() {                                                                          // 1654\n    _clearTimeout(_flashCheckTimeout);                                                                                 // 1655\n    _flashCheckTimeout = 0;                                                                                            // 1656\n    _clearInterval(_swfFallbackCheckInterval);                                                                         // 1657\n    _swfFallbackCheckInterval = 0;                                                                                     // 1658\n  };                                                                                                                   // 1659\n  /**                                                                                                                  // 1660\n * Reposition the Flash object to cover the currently activated element.                                               // 1661\n *                                                                                                                     // 1662\n * @returns `undefined`                                                                                                // 1663\n * @private                                                                                                            // 1664\n */                                                                                                                    // 1665\n  var _reposition = function() {                                                                                       // 1666\n    var htmlBridge;                                                                                                    // 1667\n    if (_currentElement && (htmlBridge = _getHtmlBridge(_flashState.bridge))) {                                        // 1668\n      var pos = _getElementPosition(_currentElement);                                                                  // 1669\n      _extend(htmlBridge.style, {                                                                                      // 1670\n        width: pos.width + \"px\",                                                                                       // 1671\n        height: pos.height + \"px\",                                                                                     // 1672\n        top: pos.top + \"px\",                                                                                           // 1673\n        left: pos.left + \"px\",                                                                                         // 1674\n        zIndex: \"\" + _getSafeZIndex(_globalConfig.zIndex)                                                              // 1675\n      });                                                                                                              // 1676\n    }                                                                                                                  // 1677\n  };                                                                                                                   // 1678\n  /**                                                                                                                  // 1679\n * Sends a signal to the Flash object to display the hand cursor if `true`.                                            // 1680\n *                                                                                                                     // 1681\n * @returns `undefined`                                                                                                // 1682\n * @private                                                                                                            // 1683\n */                                                                                                                    // 1684\n  var _setHandCursor = function(enabled) {                                                                             // 1685\n    if (_flashState.ready === true) {                                                                                  // 1686\n      if (_flashState.bridge && typeof _flashState.bridge.setHandCursor === \"function\") {                              // 1687\n        _flashState.bridge.setHandCursor(enabled);                                                                     // 1688\n      } else {                                                                                                         // 1689\n        _flashState.ready = false;                                                                                     // 1690\n      }                                                                                                                // 1691\n    }                                                                                                                  // 1692\n  };                                                                                                                   // 1693\n  /**                                                                                                                  // 1694\n * Get a safe value for `zIndex`                                                                                       // 1695\n *                                                                                                                     // 1696\n * @returns an integer, or \"auto\"                                                                                      // 1697\n * @private                                                                                                            // 1698\n */                                                                                                                    // 1699\n  var _getSafeZIndex = function(val) {                                                                                 // 1700\n    if (/^(?:auto|inherit)$/.test(val)) {                                                                              // 1701\n      return val;                                                                                                      // 1702\n    }                                                                                                                  // 1703\n    var zIndex;                                                                                                        // 1704\n    if (typeof val === \"number\" && !_isNaN(val)) {                                                                     // 1705\n      zIndex = val;                                                                                                    // 1706\n    } else if (typeof val === \"string\") {                                                                              // 1707\n      zIndex = _getSafeZIndex(_parseInt(val, 10));                                                                     // 1708\n    }                                                                                                                  // 1709\n    return typeof zIndex === \"number\" ? zIndex : \"auto\";                                                               // 1710\n  };                                                                                                                   // 1711\n  /**                                                                                                                  // 1712\n * Ensure OS-compliant line endings, i.e. \"\\r\\n\" on Windows, \"\\n\" elsewhere                                            // 1713\n *                                                                                                                     // 1714\n * @returns string                                                                                                     // 1715\n * @private                                                                                                            // 1716\n */                                                                                                                    // 1717\n  var _fixLineEndings = function(content) {                                                                            // 1718\n    var replaceRegex = /(\\r\\n|\\r|\\n)/g;                                                                                // 1719\n    if (typeof content === \"string\" && _globalConfig.fixLineEndings === true) {                                        // 1720\n      if (_isWindows()) {                                                                                              // 1721\n        if (/((^|[^\\r])\\n|\\r([^\\n]|$))/.test(content)) {                                                               // 1722\n          content = content.replace(replaceRegex, \"\\r\\n\");                                                             // 1723\n        }                                                                                                              // 1724\n      } else if (/\\r/.test(content)) {                                                                                 // 1725\n        content = content.replace(replaceRegex, \"\\n\");                                                                 // 1726\n      }                                                                                                                // 1727\n    }                                                                                                                  // 1728\n    return content;                                                                                                    // 1729\n  };                                                                                                                   // 1730\n  /**                                                                                                                  // 1731\n * Attempt to detect if ZeroClipboard is executing inside of a sandboxed iframe.                                       // 1732\n * If it is, Flash Player cannot be used, so ZeroClipboard is dead in the water.                                       // 1733\n *                                                                                                                     // 1734\n * @see {@link http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Dec/0002.html}                            // 1735\n * @see {@link https://github.com/zeroclipboard/zeroclipboard/issues/511}                                              // 1736\n * @see {@link http://zeroclipboard.org/test-iframes.html}                                                             // 1737\n *                                                                                                                     // 1738\n * @returns `true` (is sandboxed), `false` (is not sandboxed), or `null` (uncertain)                                   // 1739\n * @private                                                                                                            // 1740\n */                                                                                                                    // 1741\n  var _detectSandbox = function(doNotReassessFlashSupport) {                                                           // 1742\n    var effectiveScriptOrigin, frame, frameError, previousState = _flashState.sandboxed, isSandboxed = null;           // 1743\n    doNotReassessFlashSupport = doNotReassessFlashSupport === true;                                                    // 1744\n    if (_pageIsFramed === false) {                                                                                     // 1745\n      isSandboxed = false;                                                                                             // 1746\n    } else {                                                                                                           // 1747\n      try {                                                                                                            // 1748\n        frame = window.frameElement || null;                                                                           // 1749\n      } catch (e) {                                                                                                    // 1750\n        frameError = {                                                                                                 // 1751\n          name: e.name,                                                                                                // 1752\n          message: e.message                                                                                           // 1753\n        };                                                                                                             // 1754\n      }                                                                                                                // 1755\n      if (frame && frame.nodeType === 1 && frame.nodeName === \"IFRAME\") {                                              // 1756\n        try {                                                                                                          // 1757\n          isSandboxed = frame.hasAttribute(\"sandbox\");                                                                 // 1758\n        } catch (e) {                                                                                                  // 1759\n          isSandboxed = null;                                                                                          // 1760\n        }                                                                                                              // 1761\n      } else {                                                                                                         // 1762\n        try {                                                                                                          // 1763\n          effectiveScriptOrigin = document.domain || null;                                                             // 1764\n        } catch (e) {                                                                                                  // 1765\n          effectiveScriptOrigin = null;                                                                                // 1766\n        }                                                                                                              // 1767\n        if (effectiveScriptOrigin === null || frameError && frameError.name === \"SecurityError\" && /(^|[\\s\\(\\[@])sandbox(es|ed|ing|[\\s\\.,!\\)\\]@]|$)/.test(frameError.message.toLowerCase())) {\n          isSandboxed = true;                                                                                          // 1769\n        }                                                                                                              // 1770\n      }                                                                                                                // 1771\n    }                                                                                                                  // 1772\n    _flashState.sandboxed = isSandboxed;                                                                               // 1773\n    if (previousState !== isSandboxed && !doNotReassessFlashSupport) {                                                 // 1774\n      _detectFlashSupport(_ActiveXObject);                                                                             // 1775\n    }                                                                                                                  // 1776\n    return isSandboxed;                                                                                                // 1777\n  };                                                                                                                   // 1778\n  /**                                                                                                                  // 1779\n * Detect the Flash Player status, version, and plugin type.                                                           // 1780\n *                                                                                                                     // 1781\n * @see {@link https://code.google.com/p/doctype-mirror/wiki/ArticleDetectFlash#The_code}                              // 1782\n * @see {@link http://stackoverflow.com/questions/12866060/detecting-pepper-ppapi-flash-with-javascript}               // 1783\n *                                                                                                                     // 1784\n * @returns `undefined`                                                                                                // 1785\n * @private                                                                                                            // 1786\n */                                                                                                                    // 1787\n  var _detectFlashSupport = function(ActiveXObject) {                                                                  // 1788\n    var plugin, ax, mimeType, hasFlash = false, isActiveX = false, isPPAPI = false, flashVersion = \"\";                 // 1789\n    /**                                                                                                                // 1790\n   * Derived from Apple's suggested sniffer.                                                                           // 1791\n   * @param {String} desc e.g. \"Shockwave Flash 7.0 r61\"                                                               // 1792\n   * @returns {String} \"7.0.61\"                                                                                        // 1793\n   * @private                                                                                                          // 1794\n   */                                                                                                                  // 1795\n    function parseFlashVersion(desc) {                                                                                 // 1796\n      var matches = desc.match(/[\\d]+/g);                                                                              // 1797\n      matches.length = 3;                                                                                              // 1798\n      return matches.join(\".\");                                                                                        // 1799\n    }                                                                                                                  // 1800\n    function isPepperFlash(flashPlayerFileName) {                                                                      // 1801\n      return !!flashPlayerFileName && (flashPlayerFileName = flashPlayerFileName.toLowerCase()) && (/^(pepflashplayer\\.dll|libpepflashplayer\\.so|pepperflashplayer\\.plugin)$/.test(flashPlayerFileName) || flashPlayerFileName.slice(-13) === \"chrome.plugin\");\n    }                                                                                                                  // 1803\n    function inspectPlugin(plugin) {                                                                                   // 1804\n      if (plugin) {                                                                                                    // 1805\n        hasFlash = true;                                                                                               // 1806\n        if (plugin.version) {                                                                                          // 1807\n          flashVersion = parseFlashVersion(plugin.version);                                                            // 1808\n        }                                                                                                              // 1809\n        if (!flashVersion && plugin.description) {                                                                     // 1810\n          flashVersion = parseFlashVersion(plugin.description);                                                        // 1811\n        }                                                                                                              // 1812\n        if (plugin.filename) {                                                                                         // 1813\n          isPPAPI = isPepperFlash(plugin.filename);                                                                    // 1814\n        }                                                                                                              // 1815\n      }                                                                                                                // 1816\n    }                                                                                                                  // 1817\n    if (_navigator.plugins && _navigator.plugins.length) {                                                             // 1818\n      plugin = _navigator.plugins[\"Shockwave Flash\"];                                                                  // 1819\n      inspectPlugin(plugin);                                                                                           // 1820\n      if (_navigator.plugins[\"Shockwave Flash 2.0\"]) {                                                                 // 1821\n        hasFlash = true;                                                                                               // 1822\n        flashVersion = \"2.0.0.11\";                                                                                     // 1823\n      }                                                                                                                // 1824\n    } else if (_navigator.mimeTypes && _navigator.mimeTypes.length) {                                                  // 1825\n      mimeType = _navigator.mimeTypes[\"application/x-shockwave-flash\"];                                                // 1826\n      plugin = mimeType && mimeType.enabledPlugin;                                                                     // 1827\n      inspectPlugin(plugin);                                                                                           // 1828\n    } else if (typeof ActiveXObject !== \"undefined\") {                                                                 // 1829\n      isActiveX = true;                                                                                                // 1830\n      try {                                                                                                            // 1831\n        ax = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash.7\");                                                     // 1832\n        hasFlash = true;                                                                                               // 1833\n        flashVersion = parseFlashVersion(ax.GetVariable(\"$version\"));                                                  // 1834\n      } catch (e1) {                                                                                                   // 1835\n        try {                                                                                                          // 1836\n          ax = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash.6\");                                                   // 1837\n          hasFlash = true;                                                                                             // 1838\n          flashVersion = \"6.0.21\";                                                                                     // 1839\n        } catch (e2) {                                                                                                 // 1840\n          try {                                                                                                        // 1841\n            ax = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\");                                                   // 1842\n            hasFlash = true;                                                                                           // 1843\n            flashVersion = parseFlashVersion(ax.GetVariable(\"$version\"));                                              // 1844\n          } catch (e3) {                                                                                               // 1845\n            isActiveX = false;                                                                                         // 1846\n          }                                                                                                            // 1847\n        }                                                                                                              // 1848\n      }                                                                                                                // 1849\n    }                                                                                                                  // 1850\n    _flashState.disabled = hasFlash !== true;                                                                          // 1851\n    _flashState.outdated = flashVersion && _parseFloat(flashVersion) < _parseFloat(_minimumFlashVersion);              // 1852\n    _flashState.version = flashVersion || \"0.0.0\";                                                                     // 1853\n    _flashState.pluginType = isPPAPI ? \"pepper\" : isActiveX ? \"activex\" : hasFlash ? \"netscape\" : \"unknown\";           // 1854\n  };                                                                                                                   // 1855\n  /**                                                                                                                  // 1856\n * Invoke the Flash detection algorithms immediately upon inclusion so we're not waiting later.                        // 1857\n */                                                                                                                    // 1858\n  _detectFlashSupport(_ActiveXObject);                                                                                 // 1859\n  /**                                                                                                                  // 1860\n * Always assess the `sandboxed` state of the page at important Flash-related moments.                                 // 1861\n */                                                                                                                    // 1862\n  _detectSandbox(true);                                                                                                // 1863\n  /**                                                                                                                  // 1864\n * A shell constructor for `ZeroClipboard` client instances.                                                           // 1865\n *                                                                                                                     // 1866\n * @constructor                                                                                                        // 1867\n */                                                                                                                    // 1868\n  var ZeroClipboard = function() {                                                                                     // 1869\n    if (!(this instanceof ZeroClipboard)) {                                                                            // 1870\n      return new ZeroClipboard();                                                                                      // 1871\n    }                                                                                                                  // 1872\n    if (typeof ZeroClipboard._createClient === \"function\") {                                                           // 1873\n      ZeroClipboard._createClient.apply(this, _args(arguments));                                                       // 1874\n    }                                                                                                                  // 1875\n  };                                                                                                                   // 1876\n  /**                                                                                                                  // 1877\n * The ZeroClipboard library's version number.                                                                         // 1878\n *                                                                                                                     // 1879\n * @static                                                                                                             // 1880\n * @readonly                                                                                                           // 1881\n * @property {string}                                                                                                  // 1882\n */                                                                                                                    // 1883\n  _defineProperty(ZeroClipboard, \"version\", {                                                                          // 1884\n    value: \"2.3.0-beta.1\",                                                                                             // 1885\n    writable: false,                                                                                                   // 1886\n    configurable: true,                                                                                                // 1887\n    enumerable: true                                                                                                   // 1888\n  });                                                                                                                  // 1889\n  /**                                                                                                                  // 1890\n * Update or get a copy of the ZeroClipboard global configuration.                                                     // 1891\n * Returns a copy of the current/updated configuration.                                                                // 1892\n *                                                                                                                     // 1893\n * @returns Object                                                                                                     // 1894\n * @static                                                                                                             // 1895\n */                                                                                                                    // 1896\n  ZeroClipboard.config = function() {                                                                                  // 1897\n    return _config.apply(this, _args(arguments));                                                                      // 1898\n  };                                                                                                                   // 1899\n  /**                                                                                                                  // 1900\n * Diagnostic method that describes the state of the browser, Flash Player, and ZeroClipboard.                         // 1901\n *                                                                                                                     // 1902\n * @returns Object                                                                                                     // 1903\n * @static                                                                                                             // 1904\n */                                                                                                                    // 1905\n  ZeroClipboard.state = function() {                                                                                   // 1906\n    return _state.apply(this, _args(arguments));                                                                       // 1907\n  };                                                                                                                   // 1908\n  /**                                                                                                                  // 1909\n * Check if Flash is unusable for any reason: disabled, outdated, deactivated, etc.                                    // 1910\n *                                                                                                                     // 1911\n * @returns Boolean                                                                                                    // 1912\n * @static                                                                                                             // 1913\n */                                                                                                                    // 1914\n  ZeroClipboard.isFlashUnusable = function() {                                                                         // 1915\n    return _isFlashUnusable.apply(this, _args(arguments));                                                             // 1916\n  };                                                                                                                   // 1917\n  /**                                                                                                                  // 1918\n * Register an event listener.                                                                                         // 1919\n *                                                                                                                     // 1920\n * @returns `ZeroClipboard`                                                                                            // 1921\n * @static                                                                                                             // 1922\n */                                                                                                                    // 1923\n  ZeroClipboard.on = function() {                                                                                      // 1924\n    return _on.apply(this, _args(arguments));                                                                          // 1925\n  };                                                                                                                   // 1926\n  /**                                                                                                                  // 1927\n * Unregister an event listener.                                                                                       // 1928\n * If no `listener` function/object is provided, it will unregister all listeners for the provided `eventType`.        // 1929\n * If no `eventType` is provided, it will unregister all listeners for every event type.                               // 1930\n *                                                                                                                     // 1931\n * @returns `ZeroClipboard`                                                                                            // 1932\n * @static                                                                                                             // 1933\n */                                                                                                                    // 1934\n  ZeroClipboard.off = function() {                                                                                     // 1935\n    return _off.apply(this, _args(arguments));                                                                         // 1936\n  };                                                                                                                   // 1937\n  /**                                                                                                                  // 1938\n * Retrieve event listeners for an `eventType`.                                                                        // 1939\n * If no `eventType` is provided, it will retrieve all listeners for every event type.                                 // 1940\n *                                                                                                                     // 1941\n * @returns array of listeners for the `eventType`; if no `eventType`, then a map/hash object of listeners for all event types; or `null`\n */                                                                                                                    // 1943\n  ZeroClipboard.handlers = function() {                                                                                // 1944\n    return _listeners.apply(this, _args(arguments));                                                                   // 1945\n  };                                                                                                                   // 1946\n  /**                                                                                                                  // 1947\n * Event emission receiver from the Flash object, forwarding to any registered JavaScript event listeners.             // 1948\n *                                                                                                                     // 1949\n * @returns For the \"copy\" event, returns the Flash-friendly \"clipData\" object; otherwise `undefined`.                 // 1950\n * @static                                                                                                             // 1951\n */                                                                                                                    // 1952\n  ZeroClipboard.emit = function() {                                                                                    // 1953\n    return _emit.apply(this, _args(arguments));                                                                        // 1954\n  };                                                                                                                   // 1955\n  /**                                                                                                                  // 1956\n * Create and embed the Flash object.                                                                                  // 1957\n *                                                                                                                     // 1958\n * @returns The Flash object                                                                                           // 1959\n * @static                                                                                                             // 1960\n */                                                                                                                    // 1961\n  ZeroClipboard.create = function() {                                                                                  // 1962\n    return _create.apply(this, _args(arguments));                                                                      // 1963\n  };                                                                                                                   // 1964\n  /**                                                                                                                  // 1965\n * Self-destruct and clean up everything, including the embedded Flash object.                                         // 1966\n *                                                                                                                     // 1967\n * @returns `undefined`                                                                                                // 1968\n * @static                                                                                                             // 1969\n */                                                                                                                    // 1970\n  ZeroClipboard.destroy = function() {                                                                                 // 1971\n    return _destroy.apply(this, _args(arguments));                                                                     // 1972\n  };                                                                                                                   // 1973\n  /**                                                                                                                  // 1974\n * Set the pending data for clipboard injection.                                                                       // 1975\n *                                                                                                                     // 1976\n * @returns `undefined`                                                                                                // 1977\n * @static                                                                                                             // 1978\n */                                                                                                                    // 1979\n  ZeroClipboard.setData = function() {                                                                                 // 1980\n    return _setData.apply(this, _args(arguments));                                                                     // 1981\n  };                                                                                                                   // 1982\n  /**                                                                                                                  // 1983\n * Clear the pending data for clipboard injection.                                                                     // 1984\n * If no `format` is provided, all pending data formats will be cleared.                                               // 1985\n *                                                                                                                     // 1986\n * @returns `undefined`                                                                                                // 1987\n * @static                                                                                                             // 1988\n */                                                                                                                    // 1989\n  ZeroClipboard.clearData = function() {                                                                               // 1990\n    return _clearData.apply(this, _args(arguments));                                                                   // 1991\n  };                                                                                                                   // 1992\n  /**                                                                                                                  // 1993\n * Get a copy of the pending data for clipboard injection.                                                             // 1994\n * If no `format` is provided, a copy of ALL pending data formats will be returned.                                    // 1995\n *                                                                                                                     // 1996\n * @returns `String` or `Object`                                                                                       // 1997\n * @static                                                                                                             // 1998\n */                                                                                                                    // 1999\n  ZeroClipboard.getData = function() {                                                                                 // 2000\n    return _getData.apply(this, _args(arguments));                                                                     // 2001\n  };                                                                                                                   // 2002\n  /**                                                                                                                  // 2003\n * Sets the current HTML object that the Flash object should overlay. This will put the global                         // 2004\n * Flash object on top of the current element; depending on the setup, this may also set the                           // 2005\n * pending clipboard text data as well as the Flash object's wrapping element's title attribute                        // 2006\n * based on the underlying HTML element and ZeroClipboard configuration.                                               // 2007\n *                                                                                                                     // 2008\n * @returns `undefined`                                                                                                // 2009\n * @static                                                                                                             // 2010\n */                                                                                                                    // 2011\n  ZeroClipboard.focus = ZeroClipboard.activate = function() {                                                          // 2012\n    return _focus.apply(this, _args(arguments));                                                                       // 2013\n  };                                                                                                                   // 2014\n  /**                                                                                                                  // 2015\n * Un-overlays the Flash object. This will put the global Flash object off-screen; depending on                        // 2016\n * the setup, this may also unset the Flash object's wrapping element's title attribute based on                       // 2017\n * the underlying HTML element and ZeroClipboard configuration.                                                        // 2018\n *                                                                                                                     // 2019\n * @returns `undefined`                                                                                                // 2020\n * @static                                                                                                             // 2021\n */                                                                                                                    // 2022\n  ZeroClipboard.blur = ZeroClipboard.deactivate = function() {                                                         // 2023\n    return _blur.apply(this, _args(arguments));                                                                        // 2024\n  };                                                                                                                   // 2025\n  /**                                                                                                                  // 2026\n * Returns the currently focused/\"activated\" HTML element that the Flash object is wrapping.                           // 2027\n *                                                                                                                     // 2028\n * @returns `HTMLElement` or `null`                                                                                    // 2029\n * @static                                                                                                             // 2030\n */                                                                                                                    // 2031\n  ZeroClipboard.activeElement = function() {                                                                           // 2032\n    return _activeElement.apply(this, _args(arguments));                                                               // 2033\n  };                                                                                                                   // 2034\n  /**                                                                                                                  // 2035\n * Keep track of the ZeroClipboard client instance counter.                                                            // 2036\n */                                                                                                                    // 2037\n  var _clientIdCounter = 0;                                                                                            // 2038\n  /**                                                                                                                  // 2039\n * Keep track of the state of the client instances.                                                                    // 2040\n *                                                                                                                     // 2041\n * Entry structure:                                                                                                    // 2042\n *   _clientMeta[client.id] = {                                                                                        // 2043\n *     instance: client,                                                                                               // 2044\n *     elements: [],                                                                                                   // 2045\n *     handlers: {}                                                                                                    // 2046\n *   };                                                                                                                // 2047\n */                                                                                                                    // 2048\n  var _clientMeta = {};                                                                                                // 2049\n  /**                                                                                                                  // 2050\n * Keep track of the ZeroClipboard clipped elements counter.                                                           // 2051\n */                                                                                                                    // 2052\n  var _elementIdCounter = 0;                                                                                           // 2053\n  /**                                                                                                                  // 2054\n * Keep track of the state of the clipped element relationships to clients.                                            // 2055\n *                                                                                                                     // 2056\n * Entry structure:                                                                                                    // 2057\n *   _elementMeta[element.zcClippingId] = [client1.id, client2.id];                                                    // 2058\n */                                                                                                                    // 2059\n  var _elementMeta = {};                                                                                               // 2060\n  /**                                                                                                                  // 2061\n * Keep track of the state of the mouse event handlers for clipped elements.                                           // 2062\n *                                                                                                                     // 2063\n * Entry structure:                                                                                                    // 2064\n *   _mouseHandlers[element.zcClippingId] = {                                                                          // 2065\n *     mouseover:  function(event) {},                                                                                 // 2066\n *     mouseout:   function(event) {},                                                                                 // 2067\n *     mouseenter: function(event) {},                                                                                 // 2068\n *     mouseleave: function(event) {},                                                                                 // 2069\n *     mousemove:  function(event) {}                                                                                  // 2070\n *   };                                                                                                                // 2071\n */                                                                                                                    // 2072\n  var _mouseHandlers = {};                                                                                             // 2073\n  /**                                                                                                                  // 2074\n * Extending the ZeroClipboard configuration defaults for the Client module.                                           // 2075\n */                                                                                                                    // 2076\n  _extend(_globalConfig, {                                                                                             // 2077\n    autoActivate: true                                                                                                 // 2078\n  });                                                                                                                  // 2079\n  /**                                                                                                                  // 2080\n * The real constructor for `ZeroClipboard` client instances.                                                          // 2081\n * @private                                                                                                            // 2082\n */                                                                                                                    // 2083\n  var _clientConstructor = function(elements) {                                                                        // 2084\n    var client = this;                                                                                                 // 2085\n    client.id = \"\" + _clientIdCounter++;                                                                               // 2086\n    _clientMeta[client.id] = {                                                                                         // 2087\n      instance: client,                                                                                                // 2088\n      elements: [],                                                                                                    // 2089\n      handlers: {}                                                                                                     // 2090\n    };                                                                                                                 // 2091\n    if (elements) {                                                                                                    // 2092\n      client.clip(elements);                                                                                           // 2093\n    }                                                                                                                  // 2094\n    ZeroClipboard.on(\"*\", function(event) {                                                                            // 2095\n      return client.emit(event);                                                                                       // 2096\n    });                                                                                                                // 2097\n    ZeroClipboard.on(\"destroy\", function() {                                                                           // 2098\n      client.destroy();                                                                                                // 2099\n    });                                                                                                                // 2100\n    ZeroClipboard.create();                                                                                            // 2101\n  };                                                                                                                   // 2102\n  /**                                                                                                                  // 2103\n * The underlying implementation of `ZeroClipboard.Client.prototype.on`.                                               // 2104\n * @private                                                                                                            // 2105\n */                                                                                                                    // 2106\n  var _clientOn = function(eventType, listener) {                                                                      // 2107\n    var i, len, events, added = {}, meta = _clientMeta[this.id], handlers = meta && meta.handlers;                     // 2108\n    if (!meta) {                                                                                                       // 2109\n      throw new Error(\"Attempted to add new listener(s) to a destroyed ZeroClipboard client instance\");                // 2110\n    }                                                                                                                  // 2111\n    if (typeof eventType === \"string\" && eventType) {                                                                  // 2112\n      events = eventType.toLowerCase().split(/\\s+/);                                                                   // 2113\n    } else if (typeof eventType === \"object\" && eventType && typeof listener === \"undefined\") {                        // 2114\n      for (i in eventType) {                                                                                           // 2115\n        if (_hasOwn.call(eventType, i) && typeof i === \"string\" && i && typeof eventType[i] === \"function\") {          // 2116\n          this.on(i, eventType[i]);                                                                                    // 2117\n        }                                                                                                              // 2118\n      }                                                                                                                // 2119\n    }                                                                                                                  // 2120\n    if (events && events.length) {                                                                                     // 2121\n      for (i = 0, len = events.length; i < len; i++) {                                                                 // 2122\n        eventType = events[i].replace(/^on/, \"\");                                                                      // 2123\n        added[eventType] = true;                                                                                       // 2124\n        if (!handlers[eventType]) {                                                                                    // 2125\n          handlers[eventType] = [];                                                                                    // 2126\n        }                                                                                                              // 2127\n        handlers[eventType].push(listener);                                                                            // 2128\n      }                                                                                                                // 2129\n      if (added.ready && _flashState.ready) {                                                                          // 2130\n        this.emit({                                                                                                    // 2131\n          type: \"ready\",                                                                                               // 2132\n          client: this                                                                                                 // 2133\n        });                                                                                                            // 2134\n      }                                                                                                                // 2135\n      if (added.error) {                                                                                               // 2136\n        for (i = 0, len = _flashStateErrorNames.length; i < len; i++) {                                                // 2137\n          if (_flashState[_flashStateErrorNames[i].replace(/^flash-/, \"\")]) {                                          // 2138\n            this.emit({                                                                                                // 2139\n              type: \"error\",                                                                                           // 2140\n              name: _flashStateErrorNames[i],                                                                          // 2141\n              client: this                                                                                             // 2142\n            });                                                                                                        // 2143\n            break;                                                                                                     // 2144\n          }                                                                                                            // 2145\n        }                                                                                                              // 2146\n        if (_zcSwfVersion !== undefined && ZeroClipboard.version !== _zcSwfVersion) {                                  // 2147\n          this.emit({                                                                                                  // 2148\n            type: \"error\",                                                                                             // 2149\n            name: \"version-mismatch\",                                                                                  // 2150\n            jsVersion: ZeroClipboard.version,                                                                          // 2151\n            swfVersion: _zcSwfVersion                                                                                  // 2152\n          });                                                                                                          // 2153\n        }                                                                                                              // 2154\n      }                                                                                                                // 2155\n    }                                                                                                                  // 2156\n    return this;                                                                                                       // 2157\n  };                                                                                                                   // 2158\n  /**                                                                                                                  // 2159\n * The underlying implementation of `ZeroClipboard.Client.prototype.off`.                                              // 2160\n * @private                                                                                                            // 2161\n */                                                                                                                    // 2162\n  var _clientOff = function(eventType, listener) {                                                                     // 2163\n    var i, len, foundIndex, events, perEventHandlers, meta = _clientMeta[this.id], handlers = meta && meta.handlers;   // 2164\n    if (!handlers) {                                                                                                   // 2165\n      return this;                                                                                                     // 2166\n    }                                                                                                                  // 2167\n    if (arguments.length === 0) {                                                                                      // 2168\n      events = _keys(handlers);                                                                                        // 2169\n    } else if (typeof eventType === \"string\" && eventType) {                                                           // 2170\n      events = eventType.split(/\\s+/);                                                                                 // 2171\n    } else if (typeof eventType === \"object\" && eventType && typeof listener === \"undefined\") {                        // 2172\n      for (i in eventType) {                                                                                           // 2173\n        if (_hasOwn.call(eventType, i) && typeof i === \"string\" && i && typeof eventType[i] === \"function\") {          // 2174\n          this.off(i, eventType[i]);                                                                                   // 2175\n        }                                                                                                              // 2176\n      }                                                                                                                // 2177\n    }                                                                                                                  // 2178\n    if (events && events.length) {                                                                                     // 2179\n      for (i = 0, len = events.length; i < len; i++) {                                                                 // 2180\n        eventType = events[i].toLowerCase().replace(/^on/, \"\");                                                        // 2181\n        perEventHandlers = handlers[eventType];                                                                        // 2182\n        if (perEventHandlers && perEventHandlers.length) {                                                             // 2183\n          if (listener) {                                                                                              // 2184\n            foundIndex = perEventHandlers.indexOf(listener);                                                           // 2185\n            while (foundIndex !== -1) {                                                                                // 2186\n              perEventHandlers.splice(foundIndex, 1);                                                                  // 2187\n              foundIndex = perEventHandlers.indexOf(listener, foundIndex);                                             // 2188\n            }                                                                                                          // 2189\n          } else {                                                                                                     // 2190\n            perEventHandlers.length = 0;                                                                               // 2191\n          }                                                                                                            // 2192\n        }                                                                                                              // 2193\n      }                                                                                                                // 2194\n    }                                                                                                                  // 2195\n    return this;                                                                                                       // 2196\n  };                                                                                                                   // 2197\n  /**                                                                                                                  // 2198\n * The underlying implementation of `ZeroClipboard.Client.prototype.handlers`.                                         // 2199\n * @private                                                                                                            // 2200\n */                                                                                                                    // 2201\n  var _clientListeners = function(eventType) {                                                                         // 2202\n    var copy = null, handlers = _clientMeta[this.id] && _clientMeta[this.id].handlers;                                 // 2203\n    if (handlers) {                                                                                                    // 2204\n      if (typeof eventType === \"string\" && eventType) {                                                                // 2205\n        copy = handlers[eventType] ? handlers[eventType].slice(0) : [];                                                // 2206\n      } else {                                                                                                         // 2207\n        copy = _deepCopy(handlers);                                                                                    // 2208\n      }                                                                                                                // 2209\n    }                                                                                                                  // 2210\n    return copy;                                                                                                       // 2211\n  };                                                                                                                   // 2212\n  /**                                                                                                                  // 2213\n * The underlying implementation of `ZeroClipboard.Client.prototype.emit`.                                             // 2214\n * @private                                                                                                            // 2215\n */                                                                                                                    // 2216\n  var _clientEmit = function(event) {                                                                                  // 2217\n    if (_clientShouldEmit.call(this, event)) {                                                                         // 2218\n      if (typeof event === \"object\" && event && typeof event.type === \"string\" && event.type) {                        // 2219\n        event = _extend({}, event);                                                                                    // 2220\n      }                                                                                                                // 2221\n      var eventCopy = _extend({}, _createEvent(event), {                                                               // 2222\n        client: this                                                                                                   // 2223\n      });                                                                                                              // 2224\n      _clientDispatchCallbacks.call(this, eventCopy);                                                                  // 2225\n    }                                                                                                                  // 2226\n    return this;                                                                                                       // 2227\n  };                                                                                                                   // 2228\n  /**                                                                                                                  // 2229\n * The underlying implementation of `ZeroClipboard.Client.prototype.clip`.                                             // 2230\n * @private                                                                                                            // 2231\n */                                                                                                                    // 2232\n  var _clientClip = function(elements) {                                                                               // 2233\n    if (!_clientMeta[this.id]) {                                                                                       // 2234\n      throw new Error(\"Attempted to clip element(s) to a destroyed ZeroClipboard client instance\");                    // 2235\n    }                                                                                                                  // 2236\n    elements = _prepClip(elements);                                                                                    // 2237\n    for (var i = 0; i < elements.length; i++) {                                                                        // 2238\n      if (_hasOwn.call(elements, i) && elements[i] && elements[i].nodeType === 1) {                                    // 2239\n        if (!elements[i].zcClippingId) {                                                                               // 2240\n          elements[i].zcClippingId = \"zcClippingId_\" + _elementIdCounter++;                                            // 2241\n          _elementMeta[elements[i].zcClippingId] = [ this.id ];                                                        // 2242\n          if (_globalConfig.autoActivate === true) {                                                                   // 2243\n            _addMouseHandlers(elements[i]);                                                                            // 2244\n          }                                                                                                            // 2245\n        } else if (_elementMeta[elements[i].zcClippingId].indexOf(this.id) === -1) {                                   // 2246\n          _elementMeta[elements[i].zcClippingId].push(this.id);                                                        // 2247\n        }                                                                                                              // 2248\n        var clippedElements = _clientMeta[this.id] && _clientMeta[this.id].elements;                                   // 2249\n        if (clippedElements.indexOf(elements[i]) === -1) {                                                             // 2250\n          clippedElements.push(elements[i]);                                                                           // 2251\n        }                                                                                                              // 2252\n      }                                                                                                                // 2253\n    }                                                                                                                  // 2254\n    return this;                                                                                                       // 2255\n  };                                                                                                                   // 2256\n  /**                                                                                                                  // 2257\n * The underlying implementation of `ZeroClipboard.Client.prototype.unclip`.                                           // 2258\n * @private                                                                                                            // 2259\n */                                                                                                                    // 2260\n  var _clientUnclip = function(elements) {                                                                             // 2261\n    var meta = _clientMeta[this.id];                                                                                   // 2262\n    if (!meta) {                                                                                                       // 2263\n      return this;                                                                                                     // 2264\n    }                                                                                                                  // 2265\n    var clippedElements = meta.elements;                                                                               // 2266\n    var arrayIndex;                                                                                                    // 2267\n    if (typeof elements === \"undefined\") {                                                                             // 2268\n      elements = clippedElements.slice(0);                                                                             // 2269\n    } else {                                                                                                           // 2270\n      elements = _prepClip(elements);                                                                                  // 2271\n    }                                                                                                                  // 2272\n    for (var i = elements.length; i--; ) {                                                                             // 2273\n      if (_hasOwn.call(elements, i) && elements[i] && elements[i].nodeType === 1) {                                    // 2274\n        arrayIndex = 0;                                                                                                // 2275\n        while ((arrayIndex = clippedElements.indexOf(elements[i], arrayIndex)) !== -1) {                               // 2276\n          clippedElements.splice(arrayIndex, 1);                                                                       // 2277\n        }                                                                                                              // 2278\n        var clientIds = _elementMeta[elements[i].zcClippingId];                                                        // 2279\n        if (clientIds) {                                                                                               // 2280\n          arrayIndex = 0;                                                                                              // 2281\n          while ((arrayIndex = clientIds.indexOf(this.id, arrayIndex)) !== -1) {                                       // 2282\n            clientIds.splice(arrayIndex, 1);                                                                           // 2283\n          }                                                                                                            // 2284\n          if (clientIds.length === 0) {                                                                                // 2285\n            if (_globalConfig.autoActivate === true) {                                                                 // 2286\n              _removeMouseHandlers(elements[i]);                                                                       // 2287\n            }                                                                                                          // 2288\n            delete elements[i].zcClippingId;                                                                           // 2289\n          }                                                                                                            // 2290\n        }                                                                                                              // 2291\n      }                                                                                                                // 2292\n    }                                                                                                                  // 2293\n    return this;                                                                                                       // 2294\n  };                                                                                                                   // 2295\n  /**                                                                                                                  // 2296\n * The underlying implementation of `ZeroClipboard.Client.prototype.elements`.                                         // 2297\n * @private                                                                                                            // 2298\n */                                                                                                                    // 2299\n  var _clientElements = function() {                                                                                   // 2300\n    var meta = _clientMeta[this.id];                                                                                   // 2301\n    return meta && meta.elements ? meta.elements.slice(0) : [];                                                        // 2302\n  };                                                                                                                   // 2303\n  /**                                                                                                                  // 2304\n * The underlying implementation of `ZeroClipboard.Client.prototype.destroy`.                                          // 2305\n * @private                                                                                                            // 2306\n */                                                                                                                    // 2307\n  var _clientDestroy = function() {                                                                                    // 2308\n    if (!_clientMeta[this.id]) {                                                                                       // 2309\n      return;                                                                                                          // 2310\n    }                                                                                                                  // 2311\n    this.unclip();                                                                                                     // 2312\n    this.off();                                                                                                        // 2313\n    delete _clientMeta[this.id];                                                                                       // 2314\n  };                                                                                                                   // 2315\n  /**                                                                                                                  // 2316\n * Inspect an Event to see if the Client (`this`) should honor it for emission.                                        // 2317\n * @private                                                                                                            // 2318\n */                                                                                                                    // 2319\n  var _clientShouldEmit = function(event) {                                                                            // 2320\n    if (!(event && event.type)) {                                                                                      // 2321\n      return false;                                                                                                    // 2322\n    }                                                                                                                  // 2323\n    if (event.client && event.client !== this) {                                                                       // 2324\n      return false;                                                                                                    // 2325\n    }                                                                                                                  // 2326\n    var meta = _clientMeta[this.id];                                                                                   // 2327\n    var clippedEls = meta && meta.elements;                                                                            // 2328\n    var hasClippedEls = !!clippedEls && clippedEls.length > 0;                                                         // 2329\n    var goodTarget = !event.target || hasClippedEls && clippedEls.indexOf(event.target) !== -1;                        // 2330\n    var goodRelTarget = event.relatedTarget && hasClippedEls && clippedEls.indexOf(event.relatedTarget) !== -1;        // 2331\n    var goodClient = event.client && event.client === this;                                                            // 2332\n    if (!meta || !(goodTarget || goodRelTarget || goodClient)) {                                                       // 2333\n      return false;                                                                                                    // 2334\n    }                                                                                                                  // 2335\n    return true;                                                                                                       // 2336\n  };                                                                                                                   // 2337\n  /**                                                                                                                  // 2338\n * Handle the actual dispatching of events to a client instance.                                                       // 2339\n *                                                                                                                     // 2340\n * @returns `undefined`                                                                                                // 2341\n * @private                                                                                                            // 2342\n */                                                                                                                    // 2343\n  var _clientDispatchCallbacks = function(event) {                                                                     // 2344\n    var meta = _clientMeta[this.id];                                                                                   // 2345\n    if (!(typeof event === \"object\" && event && event.type && meta)) {                                                 // 2346\n      return;                                                                                                          // 2347\n    }                                                                                                                  // 2348\n    var async = _shouldPerformAsync(event);                                                                            // 2349\n    var wildcardTypeHandlers = meta && meta.handlers[\"*\"] || [];                                                       // 2350\n    var specificTypeHandlers = meta && meta.handlers[event.type] || [];                                                // 2351\n    var handlers = wildcardTypeHandlers.concat(specificTypeHandlers);                                                  // 2352\n    if (handlers && handlers.length) {                                                                                 // 2353\n      var i, len, func, context, eventCopy, originalContext = this;                                                    // 2354\n      for (i = 0, len = handlers.length; i < len; i++) {                                                               // 2355\n        func = handlers[i];                                                                                            // 2356\n        context = originalContext;                                                                                     // 2357\n        if (typeof func === \"string\" && typeof _window[func] === \"function\") {                                         // 2358\n          func = _window[func];                                                                                        // 2359\n        }                                                                                                              // 2360\n        if (typeof func === \"object\" && func && typeof func.handleEvent === \"function\") {                              // 2361\n          context = func;                                                                                              // 2362\n          func = func.handleEvent;                                                                                     // 2363\n        }                                                                                                              // 2364\n        if (typeof func === \"function\") {                                                                              // 2365\n          eventCopy = _extend({}, event);                                                                              // 2366\n          _dispatchCallback(func, context, [ eventCopy ], async);                                                      // 2367\n        }                                                                                                              // 2368\n      }                                                                                                                // 2369\n    }                                                                                                                  // 2370\n  };                                                                                                                   // 2371\n  /**                                                                                                                  // 2372\n * Prepares the elements for clipping/unclipping.                                                                      // 2373\n *                                                                                                                     // 2374\n * @returns An Array of elements.                                                                                      // 2375\n * @private                                                                                                            // 2376\n */                                                                                                                    // 2377\n  var _prepClip = function(elements) {                                                                                 // 2378\n    if (typeof elements === \"string\") {                                                                                // 2379\n      elements = [];                                                                                                   // 2380\n    }                                                                                                                  // 2381\n    return typeof elements.length !== \"number\" ? [ elements ] : elements;                                              // 2382\n  };                                                                                                                   // 2383\n  /**                                                                                                                  // 2384\n * Add a `mouseover` handler function for a clipped element.                                                           // 2385\n *                                                                                                                     // 2386\n * @returns `undefined`                                                                                                // 2387\n * @private                                                                                                            // 2388\n */                                                                                                                    // 2389\n  var _addMouseHandlers = function(element) {                                                                          // 2390\n    if (!(element && element.nodeType === 1)) {                                                                        // 2391\n      return;                                                                                                          // 2392\n    }                                                                                                                  // 2393\n    var _suppressMouseEvents = function(event) {                                                                       // 2394\n      if (!(event || (event = _window.event))) {                                                                       // 2395\n        return;                                                                                                        // 2396\n      }                                                                                                                // 2397\n      if (event._source !== \"js\") {                                                                                    // 2398\n        event.stopImmediatePropagation();                                                                              // 2399\n        event.preventDefault();                                                                                        // 2400\n      }                                                                                                                // 2401\n      delete event._source;                                                                                            // 2402\n    };                                                                                                                 // 2403\n    var _elementMouseOver = function(event) {                                                                          // 2404\n      if (!(event || (event = _window.event))) {                                                                       // 2405\n        return;                                                                                                        // 2406\n      }                                                                                                                // 2407\n      _suppressMouseEvents(event);                                                                                     // 2408\n      ZeroClipboard.focus(element);                                                                                    // 2409\n    };                                                                                                                 // 2410\n    element.addEventListener(\"mouseover\", _elementMouseOver, false);                                                   // 2411\n    element.addEventListener(\"mouseout\", _suppressMouseEvents, false);                                                 // 2412\n    element.addEventListener(\"mouseenter\", _suppressMouseEvents, false);                                               // 2413\n    element.addEventListener(\"mouseleave\", _suppressMouseEvents, false);                                               // 2414\n    element.addEventListener(\"mousemove\", _suppressMouseEvents, false);                                                // 2415\n    _mouseHandlers[element.zcClippingId] = {                                                                           // 2416\n      mouseover: _elementMouseOver,                                                                                    // 2417\n      mouseout: _suppressMouseEvents,                                                                                  // 2418\n      mouseenter: _suppressMouseEvents,                                                                                // 2419\n      mouseleave: _suppressMouseEvents,                                                                                // 2420\n      mousemove: _suppressMouseEvents                                                                                  // 2421\n    };                                                                                                                 // 2422\n  };                                                                                                                   // 2423\n  /**                                                                                                                  // 2424\n * Remove a `mouseover` handler function for a clipped element.                                                        // 2425\n *                                                                                                                     // 2426\n * @returns `undefined`                                                                                                // 2427\n * @private                                                                                                            // 2428\n */                                                                                                                    // 2429\n  var _removeMouseHandlers = function(element) {                                                                       // 2430\n    if (!(element && element.nodeType === 1)) {                                                                        // 2431\n      return;                                                                                                          // 2432\n    }                                                                                                                  // 2433\n    var mouseHandlers = _mouseHandlers[element.zcClippingId];                                                          // 2434\n    if (!(typeof mouseHandlers === \"object\" && mouseHandlers)) {                                                       // 2435\n      return;                                                                                                          // 2436\n    }                                                                                                                  // 2437\n    var key, val, mouseEvents = [ \"move\", \"leave\", \"enter\", \"out\", \"over\" ];                                           // 2438\n    for (var i = 0, len = mouseEvents.length; i < len; i++) {                                                          // 2439\n      key = \"mouse\" + mouseEvents[i];                                                                                  // 2440\n      val = mouseHandlers[key];                                                                                        // 2441\n      if (typeof val === \"function\") {                                                                                 // 2442\n        element.removeEventListener(key, val, false);                                                                  // 2443\n      }                                                                                                                // 2444\n    }                                                                                                                  // 2445\n    delete _mouseHandlers[element.zcClippingId];                                                                       // 2446\n  };                                                                                                                   // 2447\n  /**                                                                                                                  // 2448\n * Creates a new ZeroClipboard client instance.                                                                        // 2449\n * Optionally, auto-`clip` an element or collection of elements.                                                       // 2450\n *                                                                                                                     // 2451\n * @constructor                                                                                                        // 2452\n */                                                                                                                    // 2453\n  ZeroClipboard._createClient = function() {                                                                           // 2454\n    _clientConstructor.apply(this, _args(arguments));                                                                  // 2455\n  };                                                                                                                   // 2456\n  /**                                                                                                                  // 2457\n * Register an event listener to the client.                                                                           // 2458\n *                                                                                                                     // 2459\n * @returns `this`                                                                                                     // 2460\n */                                                                                                                    // 2461\n  ZeroClipboard.prototype.on = function() {                                                                            // 2462\n    return _clientOn.apply(this, _args(arguments));                                                                    // 2463\n  };                                                                                                                   // 2464\n  /**                                                                                                                  // 2465\n * Unregister an event handler from the client.                                                                        // 2466\n * If no `listener` function/object is provided, it will unregister all handlers for the provided `eventType`.         // 2467\n * If no `eventType` is provided, it will unregister all handlers for every event type.                                // 2468\n *                                                                                                                     // 2469\n * @returns `this`                                                                                                     // 2470\n */                                                                                                                    // 2471\n  ZeroClipboard.prototype.off = function() {                                                                           // 2472\n    return _clientOff.apply(this, _args(arguments));                                                                   // 2473\n  };                                                                                                                   // 2474\n  /**                                                                                                                  // 2475\n * Retrieve event listeners for an `eventType` from the client.                                                        // 2476\n * If no `eventType` is provided, it will retrieve all listeners for every event type.                                 // 2477\n *                                                                                                                     // 2478\n * @returns array of listeners for the `eventType`; if no `eventType`, then a map/hash object of listeners for all event types; or `null`\n */                                                                                                                    // 2480\n  ZeroClipboard.prototype.handlers = function() {                                                                      // 2481\n    return _clientListeners.apply(this, _args(arguments));                                                             // 2482\n  };                                                                                                                   // 2483\n  /**                                                                                                                  // 2484\n * Event emission receiver from the Flash object for this client's registered JavaScript event listeners.              // 2485\n *                                                                                                                     // 2486\n * @returns For the \"copy\" event, returns the Flash-friendly \"clipData\" object; otherwise `undefined`.                 // 2487\n */                                                                                                                    // 2488\n  ZeroClipboard.prototype.emit = function() {                                                                          // 2489\n    return _clientEmit.apply(this, _args(arguments));                                                                  // 2490\n  };                                                                                                                   // 2491\n  /**                                                                                                                  // 2492\n * Register clipboard actions for new element(s) to the client.                                                        // 2493\n *                                                                                                                     // 2494\n * @returns `this`                                                                                                     // 2495\n */                                                                                                                    // 2496\n  ZeroClipboard.prototype.clip = function() {                                                                          // 2497\n    return _clientClip.apply(this, _args(arguments));                                                                  // 2498\n  };                                                                                                                   // 2499\n  /**                                                                                                                  // 2500\n * Unregister the clipboard actions of previously registered element(s) on the page.                                   // 2501\n * If no elements are provided, ALL registered elements will be unregistered.                                          // 2502\n *                                                                                                                     // 2503\n * @returns `this`                                                                                                     // 2504\n */                                                                                                                    // 2505\n  ZeroClipboard.prototype.unclip = function() {                                                                        // 2506\n    return _clientUnclip.apply(this, _args(arguments));                                                                // 2507\n  };                                                                                                                   // 2508\n  /**                                                                                                                  // 2509\n * Get all of the elements to which this client is clipped.                                                            // 2510\n *                                                                                                                     // 2511\n * @returns array of clipped elements                                                                                  // 2512\n */                                                                                                                    // 2513\n  ZeroClipboard.prototype.elements = function() {                                                                      // 2514\n    return _clientElements.apply(this, _args(arguments));                                                              // 2515\n  };                                                                                                                   // 2516\n  /**                                                                                                                  // 2517\n * Self-destruct and clean up everything for a single client.                                                          // 2518\n * This will NOT destroy the embedded Flash object.                                                                    // 2519\n *                                                                                                                     // 2520\n * @returns `undefined`                                                                                                // 2521\n */                                                                                                                    // 2522\n  ZeroClipboard.prototype.destroy = function() {                                                                       // 2523\n    return _clientDestroy.apply(this, _args(arguments));                                                               // 2524\n  };                                                                                                                   // 2525\n  /**                                                                                                                  // 2526\n * Stores the pending plain text to inject into the clipboard.                                                         // 2527\n *                                                                                                                     // 2528\n * @returns `this`                                                                                                     // 2529\n */                                                                                                                    // 2530\n  ZeroClipboard.prototype.setText = function(text) {                                                                   // 2531\n    if (!_clientMeta[this.id]) {                                                                                       // 2532\n      throw new Error(\"Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance\");       // 2533\n    }                                                                                                                  // 2534\n    ZeroClipboard.setData(\"text/plain\", text);                                                                         // 2535\n    return this;                                                                                                       // 2536\n  };                                                                                                                   // 2537\n  /**                                                                                                                  // 2538\n * Stores the pending HTML text to inject into the clipboard.                                                          // 2539\n *                                                                                                                     // 2540\n * @returns `this`                                                                                                     // 2541\n */                                                                                                                    // 2542\n  ZeroClipboard.prototype.setHtml = function(html) {                                                                   // 2543\n    if (!_clientMeta[this.id]) {                                                                                       // 2544\n      throw new Error(\"Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance\");       // 2545\n    }                                                                                                                  // 2546\n    ZeroClipboard.setData(\"text/html\", html);                                                                          // 2547\n    return this;                                                                                                       // 2548\n  };                                                                                                                   // 2549\n  /**                                                                                                                  // 2550\n * Stores the pending rich text (RTF) to inject into the clipboard.                                                    // 2551\n *                                                                                                                     // 2552\n * @returns `this`                                                                                                     // 2553\n */                                                                                                                    // 2554\n  ZeroClipboard.prototype.setRichText = function(richText) {                                                           // 2555\n    if (!_clientMeta[this.id]) {                                                                                       // 2556\n      throw new Error(\"Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance\");       // 2557\n    }                                                                                                                  // 2558\n    ZeroClipboard.setData(\"application/rtf\", richText);                                                                // 2559\n    return this;                                                                                                       // 2560\n  };                                                                                                                   // 2561\n  /**                                                                                                                  // 2562\n * Stores the pending data to inject into the clipboard.                                                               // 2563\n *                                                                                                                     // 2564\n * @returns `this`                                                                                                     // 2565\n */                                                                                                                    // 2566\n  ZeroClipboard.prototype.setData = function() {                                                                       // 2567\n    if (!_clientMeta[this.id]) {                                                                                       // 2568\n      throw new Error(\"Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance\");       // 2569\n    }                                                                                                                  // 2570\n    ZeroClipboard.setData.apply(this, _args(arguments));                                                               // 2571\n    return this;                                                                                                       // 2572\n  };                                                                                                                   // 2573\n  /**                                                                                                                  // 2574\n * Clears the pending data to inject into the clipboard.                                                               // 2575\n * If no `format` is provided, all pending data formats will be cleared.                                               // 2576\n *                                                                                                                     // 2577\n * @returns `this`                                                                                                     // 2578\n */                                                                                                                    // 2579\n  ZeroClipboard.prototype.clearData = function() {                                                                     // 2580\n    if (!_clientMeta[this.id]) {                                                                                       // 2581\n      throw new Error(\"Attempted to clear pending clipboard data from a destroyed ZeroClipboard client instance\");     // 2582\n    }                                                                                                                  // 2583\n    ZeroClipboard.clearData.apply(this, _args(arguments));                                                             // 2584\n    return this;                                                                                                       // 2585\n  };                                                                                                                   // 2586\n  /**                                                                                                                  // 2587\n * Gets a copy of the pending data to inject into the clipboard.                                                       // 2588\n * If no `format` is provided, a copy of ALL pending data formats will be returned.                                    // 2589\n *                                                                                                                     // 2590\n * @returns `String` or `Object`                                                                                       // 2591\n */                                                                                                                    // 2592\n  ZeroClipboard.prototype.getData = function() {                                                                       // 2593\n    if (!_clientMeta[this.id]) {                                                                                       // 2594\n      throw new Error(\"Attempted to get pending clipboard data from a destroyed ZeroClipboard client instance\");       // 2595\n    }                                                                                                                  // 2596\n    return ZeroClipboard.getData.apply(this, _args(arguments));                                                        // 2597\n  };                                                                                                                   // 2598\n  if (typeof define === \"function\" && define.amd) {                                                                    // 2599\n    define(function() {                                                                                                // 2600\n      return ZeroClipboard;                                                                                            // 2601\n    });                                                                                                                // 2602\n  } else if (typeof module === \"object\" && module && typeof module.exports === \"object\" && module.exports) {           // 2603\n    module.exports = ZeroClipboard;                                                                                    // 2604\n  } else {                                                                                                             // 2605\n    window.ZeroClipboard = ZeroClipboard;                                                                              // 2606\n  }                                                                                                                    // 2607\n})(function() {                                                                                                        // 2608\n  return this || window;                                                                                               // 2609\n}());                                                                                                                  // 2610\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/propercursive:zeroclipboard/export.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nZeroClipboard = this.ZeroClipboard;                                                                                    // 1\n                                                                                                                       // 2\ntry {                                                                                                                  // 3\n  delete this.ZeroClipboard;                                                                                           // 4\n}                                                                                                                      // 5\n  catch (e) {                                                                                                          // 6\n}                                                                                                                      // 7\n                                                                                                                       // 8\nZeroClipboard.config( { swfPath: '/packages/propercursive_zeroclipboard/zeroclipboard/dist/ZeroClipboard.swf' } );     // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]